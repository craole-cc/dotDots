#!/bin/sh
# shellcheck enable=all

main() {
  set_defaults
  init_dots
  # init_blesh
  # init_atuin
  init_starship
  init_fastfetch
  init_aliases
}

set_defaults() {
  # debug=1
  home="${HOME:-/home/craole}"
  DELIMITER="$(printf "\037")"
  export DELIMITER
}

pout_debug() {
  msg=""
  case "${debug:-}" in
  1 | true | on)
    for arg in "$@"; do
      msg="${msg:+${msg} }${arg:-}"
    done
    ;;
  *) ;;
  esac

  if [ -n "${msg}" ]; then
    printf "%s\n" "${msg}"
  else
    :
  fi
}

init_dots() {
  [ -d "${DOTS:-}" ] || {
    printf "[FAILURE] /> dotsrc < The path to DOTS directory must be set.\n" >&2
    return 1
  }

  pathman="${DOTS:-/home/craole/.dots}/Bin/shellscript/environment/pathman"
  if [ -x "${pathman}" ]; then
    # ${pathman}
    pout_debug "[SUCCESS] /> dotsrc <\ Initialized dotDots"
  else
    pout_debug "[FAILURE] /> dotsrc <\ Missing Dependency: " "${pathman}"
  fi
}

init_blesh() {
  CMD_BLESH="${home}/.local/share/blesh/ble.sh"
  if [ -f "${CMD_BLESH}" ]; then
    "${CMD_BLESH}" >/dev/null 2>&1
    pout_debug "[SUCCESS] /> dotsrc <\ Initialized Ble.sh"
  else
    pout_debug "[FAILURE] /> dotsrc <\ Missing Dependency: " "${CMD_BLESH}"
  fi
}

init_atuin() {
  CMD_ATUIN="$(command -v atuin 2>/dev/null || printf "")"
  if [ -n "${CMD_ATUIN}" ]; then
    eval "$(atuin init bash --disable-ctrl-r || true)"
    pout_debug "[SUCCESS] /> dotsrc <\ Initialized Atuin"
  else
    pout_debug "[FAILURE] /> dotsrc <\ Missing Dependency: " "${CMD_ATUIN}"
  fi
}

init_starship() {
  #@ Retrieve the path to the starship binary
  CMD_STARSHIP="$(command -v starship 2>/dev/null || printf "")"
  export CMD_STARSHIP

  if [ -n "${CMD_STARSHIP}" ]; then

    #@ Check if the starship configuration file exists
    starship_config="${DOTS}/Configuration/starship/config.toml"
    [ -f "${starship_config}" ] && {
      #@ Set the STARSHIP_CONFIG environment variable
      STARSHIP_CONFIG="${starship_config}"
      export STARSHIP_CONFIG
    }

    #@ Initialize starship
    eval "$(starship init bash || true)"
    pout_debug "[SUCCESS] /> dotsrc <\ Initialized Starship"
  else
    pout_debug "[FAILURE] /> dotsrc <\ Missing Dependency: " "${CMD_STARSHIP}"
  fi
}

init_fastfetch() {
  #@ Retrieve the path to the fastfetch binary
  CMD_FASTFETCH="$(command -v fastfetch 2>/dev/null || printf "")"
  export CMD_FASTFETCH

  if [ -n "${CMD_FASTFETCH}" ]; then

    #@ Check if the starship configuration file exists
    fastfetch_config="${DOTS}/Configuration/fastfetch/config.jsonc"

    #@ Initialize fastfetch
    if [ -f "${fastfetch_config}" ]; then
      #@ Set the FASTFETCH_CONFIG environment variable
      FASTFETCH_CONFIG="${fastfetch_config}"
      export FASTFETCH_CONFIG
      fetch() { fastfetch --config "${FASTFETCH_CONFIG}"; }
    else
      fetch() { fastfetch; }
    fi
    fetch

    pout_debug "[SUCCESS] /> dotsrc <\ Initialized Fastfetch"
  else
    pout_debug "[FAILURE] /> dotsrc <\ Missing Dependency: " "${CMD_FASTFETCH}"
  fi
}

init_aliases() {
  os() {
    if command -v nix >/dev/null 2>&1; then
      printf "nix"
    else
      case "$(uname | tr '[:upper:]' '[:lower:]')" in
      *linux*) printf "linux" ;;
      *msys*) printf "windows" ;;
      *darwin*) printf "macos" ;;
      *) printf "unknown" ;;
      esac
    fi
  }

  dev() {
    case "$(os)" in
    nix) nix develop "$@" ;;
    *)
      cwd="$(pwd -P || "${PWD:-.}")"
      arg="${*:-"${cwd}"}"
      cmd="${VISUAL:-${EDITOR:-code}} ${arg}"
      eval "${cmd}" 2>/dev/null || {
        pout_debug "[FAILURE] /> dotsrc <\ Failed to run ${cmd}"
        return 1
      }
      pout_debug "[SUCCESS] /> dotsrc <\ Opened ${arg} in ${VISUAL:-${EDITOR:-code}}"
      ;;
    esac
  }

goto_dir() {
  dir_name="$1"
  target_dir=""
  delimiter="${DELIMITER:-"$(printf "\037")"}"
  OLDIFS="${IFS}"

  # Convert to uppercase for environment variable name
  dir_upper=$(echo "${dir_name}" | tr '[:lower:]' '[:upper:]')
    var_name="PRJ_${dir_upper}"

  # Get the value of the variable using eval (POSIX-compliant approach)
  eval var_value=\$"${var_name}"

  # First check if a specific environment variable exists for this directory
  if [ -n "${var_value:-}" ] && [ -d "${var_value}" ]; then
    target_dir="${var_value}"
  else
    # Save original IFS and set new one to our custom delimiter
    OLDIFS="$IFS"
    IFS="|"

    # Define possible paths with a custom delimiter for better folding
    # Use the generic PROJECTS environment variable if set, otherwise HOME-based paths
    possible_paths="${HOME}/Projects/${dir_name}|${HOME}/projects/${dir_name}|${HOME}/projects/Code/${dir_name}|${HOME}/code/${dir_name}|${PROJECTS:+${PROJECTS}/${dir_name}}"

    # Loop through each path and use the first one that exists
    for path in ${possible_paths}; do
      # Skip empty paths
      [ -z "$path" ] && continue
      if [ -d "$path" ]; then
        target_dir="$path"
        break
      fi
    done

    # Restore original IFS
    IFS="$OLDIFS"
  fi

  # Now attempt to change to the directory if one was found
  if [ -n "${target_dir}" ]; then
    cd "${target_dir}" || return 1
    pout_debug "[SUCCESS] /> goto_dir <\ Navigated to ${target_dir}"
    return 0
  else
    pout_debug "[FAILURE] /> goto_dir <\ Could not find directory '${dir_name}'"
    return 1
  fi
}
  prj_rust() {
    # possible_dirs=(
    #   "${PRJ_RUST}"
    #   "${PROJECTS}/rust"
    #   "${HOME}/Projects/rust"
    #   "${HOME}/projects/Code/Rust"
    #   "${HOME}/projects/Code/rust"
    # )
    :
  }

}

main "$@"
