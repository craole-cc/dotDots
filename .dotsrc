# shellcheck disable=SC2148,SC2292,SC1090
# ===========================================================================
# DOTS RC - Universal shell configuration loader for DOTS
# Supports: bash, zsh, sh, fish, PowerShell, Nushell
# ===========================================================================

# === NUSHELL ===
# Nushell ignores lines starting with '#' except when they start with '#nu'
#nu if ($env.DOTS == null) {
#nu     print --error "DOTS variable is unset. It must point to the DOTS (dotfiles) directory."
#nu     exit 1
#nu }
#nu
#nu if not ($env.DOTS | path exists) {
#nu     print --error $"Missing DOTS directory: ($env.DOTS)"
#nu     exit 1
#nu }
#nu
#nu let dots_env = ($env.DOTS | path join "Environment" "_.nu")
#nu if not ($dots_env | path exists) {
#nu     print --error $"Missing required configuration module: ($dots_env)"
#nu     exit 1
#nu }
#nu
#nu source $dots_env
#nu exit $env.LAST_EXIT_CODE

# === FISH SHELL ===
# Fish ignores lines starting with '#' except when they start with '#;'
#; if not set -q DOTS
#;     echo "DOTS variable is unset. It must point to the DOTS (dotfiles) directory." >&2
#;     exit 1
#; end
#;
#; if not test -d "$DOTS"
#;     echo "Missing DOTS directory: $DOTS" >&2
#;     exit 1
#; end
#;
#; set -l dots_env "$DOTS/Environment/_.fish"
#; if not test -f "$dots_env"
#;     echo "Missing required configuration module: $dots_env" >&2
#;     exit 1
#; end
#;
#; source "$dots_env"
#; exit $status

# === POSIX SHELLS (bash, zsh, sh) ===
  if [ -z "${DOTS:-}" ]; then
    printf "%s: %s\n%s" \
      "Error: Missing required environment variable" "DOTS" \
      "       It must point to the DOTS (dotfiles) directory path." >&2
    return 2
  elif [ ! -d "${DOTS:-}" ]; then
    printf "ERROR: Invalid DOTS directory: '%s'" "${DOTS:-}" >&2
    return 2
  elif ! command -v manage_env >/dev/null 2>&1 ;then
      printf "ERROR: Missing required function: manage_env" >&2
      return 2
  else
    manage_env --force --init --var DOTS_ENV --val "${DOTS}/Environment"
    manage_env --force --init --var DOTS_BIN --val "${DOTS}/Bin"
    manage_env --force --init --var DOTS_CFG --val "${DOTS}/Configuration"
    manage_env --force --init --var DOTS_DLD --val "${DOTS}/Downloads"
    manage_env --force --init --var DOTS_DOC --val "${DOTS}/Documentation"
    manage_env --force --init --var DOTS_NIX --val "${DOTS}/Admin"
    manage_env --force --init --var DOTS_TMP --val "${DOTS}/.cache"
    return $?
  fi

# === POWERSHELL ===
if (-not $env:DOTS) {
  Throw "DOTS variable is unset. It must point to the DOTS (dotfiles) directory."
}
elseif (-not (Test-Path -Path $env:DOTS -PathType Container)) {
  Throw "Missing DOTS directory: $env:DOTS"
}
else {
  $dotsEnv = Join-Path $env:DOTS 'Environment' '_.ps1'
  if (-not (Test-Path -Path $dotsEnv -PathType Leaf)) {
    Throw "Missing required configuration module: ${dotsEnv}"
  }
  else {
    Import-Module $dotsEnv -Force
    return $LASTEXITCODE
  }
}
