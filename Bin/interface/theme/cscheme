#!/bin/sh

set -eu

# Default theme names
DARK_THEME="One Half Dark"
LIGHT_THEME="One Half Light"

# KDE Plasma theme settings
DARK_SCHEME="Gruvbox"
LIGHT_SCHEME="Gruvbox Light - Red two-tone 3"
DARK_SCHEME_FALLBACK="BreezeDark"
LIGHT_SCHEME_FALLBACK="BreezeLight"

# Initialize variables
scheme=""
light=false
dark=false
toggle=false
get_current=false
verbose=false
quiet=false

# Check if a command exists
cmd_exists() {
  command -v "$1" >/dev/null 2>&1
}

# Install jq using available package manager
install_jq() {
  if cmd_exists "winget"; then
    printf "Installing jq using winget...\n"
    winget install jqlang.jq
  elif cmd_exists "choco"; then
    printf "Installing jq using chocolatey...\n"
    choco install jq --yes
  else
    printf "Error: Neither winget nor chocolatey is available.\n" >&2
    printf "Please install jq manually from: https://stedolan.github.io/jq/download/\n" >&2
    exit 1
  fi
}

# Check for Windows Terminal (including preview)
check_terminal() {
  if cmd_exists "wt.exe"; then
    return 0
  elif cmd_exists "wtpreview.exe"; then
    return 0
  else
    printf "Error: Neither Windows Terminal nor Windows Terminal Preview is installed\n" >&2
    return 1
  fi
}

# Check dependencies
check_dependencies() {
  # First check for Windows Terminal
  if ! check_terminal; then
    exit 1
  fi

  #@ Only check for jq if Terminal exists
  if ! cmd_exists "jq"; then
    printf "jq is not installed. Attempting to install...\n"
    install_jq
    if ! cmd_exists "jq"; then
      printf "Error: Failed to install jq\n" >&2
      exit 1
    fi
  fi
}

# Function to find files using fd or find
find_files() {
  base_path="$1"
  if cmd_exists "fd"; then
    fd --no-ignore --absolute-path "^Microsoft\.WindowsTerminal.*$" "$base_path" --type d 2>/dev/null
  else
    find "$base_path" \
      -name "Microsoft.WindowsTerminal*" \
      -type d 2>/dev/null
  fi
}

find_settings_paths() {
  #@ Find both regular and preview settings
  find "$LOCALAPPDATA/Packages" \
    -name "Microsoft.WindowsTerminal*" \
    -type d 2>/dev/null |
    while read -r dir; do
      settings_path="$dir/LocalState/settings.json"
      if [ -f "$settings_path" ]; then
        printf "%s\n" "$settings_path"
      fi
    done
}

toggle_wt_theme() {
  settings_file="$1"

  #@ Check if file exists and is readable
  if [ ! -r "$settings_file" ]; then
    printf "Error: Cannot read settings file: %s\n" "$settings_file" >&2
    return 1
  fi

  #@ Create backup
  cp "$settings_file" "${settings_file}.bac"

  #@ Get current default theme
  current_theme=$(jq --raw-output '.profiles.defaults.colorScheme // ""' "$settings_file")

  #@ Determine new theme
  new_theme="$DARK_THEME"
  [ "$current_theme" = "$DARK_THEME" ] && new_theme="$LIGHT_THEME"

  #@ Update the theme
  if ! jq --arg theme "$new_theme" \
    '.profiles.defaults.colorScheme = $theme' \
    "$settings_file" >"${settings_file}.tmp"; then
    printf "Error: Failed to update theme in: %s\n" "$settings_file" >&2
    mv "${settings_file}.bac" "$settings_file"
    rm -f "${settings_file}.tmp"
    return 1
  fi

  mv "${settings_file}.tmp" "$settings_file"
  printf "Successfully updated Windows Terminal theme to '%s' in: %s\n" "$new_theme" "$settings_file"
}

apply_plasma_theme() {
  scheme="$1"
  current_scheme=$(plasma-apply-colorscheme --list-schemes | grep " (current color scheme)" | sed "s/^ \* //; s/ (current color scheme)//")

  if [ "$scheme" = "$current_scheme" ]; then
    printf "The scheme '%s' is already active\n" "$scheme"
    return 0
  fi

  printf "Applying the KDE Plasma scheme: %s\n" "$scheme"
  plasma-apply-colorscheme "$scheme"
}

toggle_plasma_theme() {
  current_scheme=$(plasma-apply-colorscheme --list-schemes | grep " (current color scheme)" | sed "s/^ \* //; s/ (current color scheme)//")

  case "$current_scheme" in
  "$DARK_SCHEME" | "$DARK_SCHEME_FALLBACK")
    new_scheme="$LIGHT_SCHEME"
    ;;
  "$LIGHT_SCHEME" | "$LIGHT_SCHEME_FALLBACK")
    new_scheme="$DARK_SCHEME"
    ;;
  *)
    printf "Unable to determine the current color scheme. Defaulting to the dark scheme.\n"
    new_scheme="$DARK_SCHEME"
    ;;
  esac

  apply_plasma_theme "$new_scheme"
}

main() {
  #@ Parse the arguments
  parse_arguments "$@"

  #@ Apply the schemes per the current system, if possible.
  if cmd_exists "plasma-apply-colorscheme"; then
    for_plasma
  fi

  if cmd_exists "wt.exe" || cmd_exists "wtpreview.exe"; then
    for_windows_terminal
  fi

  execute
}

parse_arguments() {
  while [ "$#" -gt 0 ]; do
    case "$1" in
    -h | --help) show_help && exit ;;
    -v | --version) show_version && exit ;;
    -d | --verbose) verbose=true ;;
    -q | --quiet) quiet=true ;;
    -g | --get | --current) get_current=true ;;
    light) light=true ;;
    dark) dark=true ;;
    -s | --scheme | --theme) [ "$2" ] && scheme="$2" && shift ;;
    esac
    shift
  done

  { [ "$scheme" ] || [ "$light" ] || [ "$dark" ]; } || toggle=true
}

for_plasma() {
  #| Function to apply the theme
  apply_theme() {
    while [ "$#" -gt 0 ]; do
      case "$1" in
      --fallback) [ "$2" ] && fallback="$2" && shift ;;
      --preferred) [ "$2" ] && preferred="$2" && shift ;;
      esac
      shift
    done

    if [ "$scheme" ] && plasma-apply-colorscheme --list-schemes | grep --quiet --invert-match "$scheme"; then
      :
    elif plasma-apply-colorscheme --list-schemes | grep --quiet "$preferred"; then
      scheme="$preferred"
    elif plasma-apply-colorscheme --list-schemes | grep --quiet "$fallback"; then
      scheme="$fallback"
    else
      printf "Neither of the themes, preferred ('%s') or fallback ('%s') were found.\n" "$preferred" "$fallback"
      exit 1
    fi

    case "$scheme" in
    "$preferred") selected="preferred" ;;
    "$fallback") selected="fallback" ;;
    esac

    if [ "$scheme" = "$current_scheme" ]; then
      [ "$quiet" ] || printf "The %s scheme '%s' is already active\n" "$selected" "$scheme"
      return 0
    elif printf "%s" "$available_schemes" | grep --quiet "$scheme"; then
      [ "$quiet" ] || printf "Applying the %s scheme: %s\n" "$selected" "$scheme"
    else
      [ "$quiet" ] || printf "Unknown scheme '%s'. " "$scheme"
      if printf "%s" "$scheme" | grep --quiet --ignore-case "dark"; then
        [ "$quiet" ] || printf "Setting the dark scheme.\n"
        scheme="$DARK_SCHEME"
      elif printf "%s" "$scheme" | grep --quiet --ignore-case "light"; then
        [ "$quiet" ] || printf "Setting the light scheme.\n"
        scheme="$LIGHT_SCHEME"
      else
        [ "$quiet" ] || printf "Toggling between light and dark schemes.\n"
        toggle_plasma_theme
      fi
    fi

    if [ "$quiet" ]; then
      plasma-apply-colorscheme "$scheme" >/dev/null
    else
      plasma-apply-colorscheme "$scheme"
    fi
  }
}

for_windows_terminal() {
  check_dependencies

  #@ Find all settings files
  settings_files=$(find_settings_paths)

  [ "$settings_files" ] || {
    printf "Error: No Windows Terminal settings files found\n" >&2
    return 1
  }

  #@ Process each settings file
  printf "%s\n" "$settings_files" | while read -r settings_file; do
    toggle_wt_theme "$settings_file"
  done
}

execute() {
  if [ "$get_current" ]; then
    if cmd_exists "plasma-apply-colorscheme"; then
      current_scheme=$(plasma-apply-colorscheme --list-schemes | grep " (current color scheme)" | sed "s/^ \* //; s/ (current color scheme)//")
      printf "Current KDE Plasma scheme: %s\n" "$current_scheme"
    fi
    if cmd_exists "wt.exe" || cmd_exists "wtpreview.exe"; then
      settings_file=$(find_settings_paths | head -n 1)
      current_theme=$(jq --raw-output '.profiles.defaults.colorScheme // ""' "$settings_file")
      printf "Current Windows Terminal theme: %s\n" "$current_theme"
    fi
    exit 0
  elif [ "$scheme" ]; then
    if cmd_exists "plasma-apply-colorscheme"; then
      apply_plasma_theme "$scheme"
    fi
    if cmd_exists "wt.exe" || cmd_exists "wtpreview.exe"; then
      settings_file=$(find_settings_paths | head -n 1)
      jq --arg theme "$scheme" '.profiles.defaults.colorScheme = $theme' "$settings_file" >"${settings_file}.tmp"
      mv "${settings_file}.tmp" "$settings_file"
      printf "Successfully updated Windows Terminal theme to '%s'\n" "$scheme"
    fi
  elif [ "$light" ]; then
    if cmd_exists "plasma-apply-colorscheme"; then
      apply_plasma_theme "$LIGHT_SCHEME"
    fi
    if cmd_exists "wt.exe" || cmd_exists "wtpreview.exe"; then
      settings_file=$(find_settings_paths | head -n 1)
      jq --arg theme "$LIGHT_THEME" '.profiles.defaults.colorScheme = $theme' "$settings_file" >"${settings_file}.tmp"
      mv "${settings_file}.tmp" "$settings_file"
      printf "Successfully updated Windows Terminal theme to '%s'\n" "$LIGHT_THEME"
    fi
  elif [ "$dark" ]; then
    if cmd_exists "plasma-apply-colorscheme"; then
      apply_plasma_theme "$DARK_SCHEME"
    fi
    if cmd_exists "wt.exe" || cmd_exists "wtpreview.exe"; then
      settings_file=$(find_settings_paths | head -n 1)
      jq --arg theme "$DARK_THEME" '.profiles.defaults.colorScheme = $theme' "$settings_file" >"${settings_file}.tmp"
      mv "${settings_file}.tmp" "$settings_file"
      printf "Successfully updated Windows Terminal theme to '%s'\n" "$DARK_THEME"
    fi
  else
    if cmd_exists "plasma-apply-colorscheme"; then
      toggle_plasma_theme
    fi
    if cmd_exists "wt.exe" || cmd_exists "wtpreview.exe"; then
      settings_file=$(find_settings_paths | head -n 1)
      toggle_wt_theme "$settings_file"
    fi
  fi
}

show_version() {
  printf "%s\n" "theme-switcher 1.0.0"
}

show_help() {
  cat <<'EOF'
Usage: theme-switcher [OPTIONS] [COMMAND]

Toggle or set KDE Plasma color schemes and Windows Terminal themes

Options:
  -h, --help        Show this help message
  -v, --version     Show version information
  -d, --verbose     Enable verbose output
  -q, --quiet       Suppress output
  -g, --get         Get the current theme
  -s, --scheme SCHEME   Use specific color scheme

Commands:
  light             Switch to light theme
  dark              Switch to dark theme
  [none]            Toggle between light and dark themes
EOF
}

main "$@"
