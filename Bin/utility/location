#!/bin/sh

main() {
  parse_arguments "$@"
  parse_location
  get_info
}

tests() {
  run_test() {
    while [ "$#" -gt 0 ]; do
      case "$1" in
      --num) test_num="$2" ;;
      --loc) test_loc="$2" ;;
      --opt) test_opt="$2" ;;
      esac
      shift
    done

    printf "\nTest %s: %s\n" "$test_num" "$test_loc"
    printf "%s\n" "$(eval "main" "$test_loc" "$test_opt" | sed 's/^/\t/')"
  }

  run_test \
    --num 1 \
    --loc "18.0238691, -77.5040135" \
    --opt "--get coordinates --name"

  run_test \
    --num 2 \
    --loc "Mandeville, Jamaica" \
    --opt "--get latitude --longitude --name class"
}

parse_arguments() {
  #@ Set defaults
  verbosity=info
  output=coordinates
  location=""

  #@ Parse arguments
  while [ $# -gt 0 ]; do
    case "$1" in
    -h | --help) show_usage ;;
    -v | --version) show_version ;;
    --verbose=*) verbosity="${1#*=}" ;;
    --verbose)
      if [ -n "$2" ]; then
        verbosity="$2"
        shift
      else
        verbosity=debug
      fi
      ;;
    --error) verbosity=error ;;
    --warn) verbosity=warn ;;
    --info) verbosity=info ;;
    --debug) verbosity=debug ;;
    --trace) verbosity=trace ;;
    --quiet) verbosity=quiet ;;
    --all | all | "--get all")
      output="all"
      ;;
    --id | id | "--get id")
      case "$output" in *id*) ;;
      '') output="id" ;;
      *) output="${output}, id" ;;
      esac
      ;;
    --latitude | latitude | "--get latitude")
      case "$output" in *latitude*) ;;
      '') output="latitude" ;;
      *) output="${output}, latitude" ;;
      esac
      ;;
    --longitude | longitude | "--get longitude")
      case "$output" in *longitude*) ;;
      '') output="longitude" ;;
      *) output="${output}, longitude" ;;
      esac
      ;;
    --coordinates | coordinates | "--get coordinates")
      case "$output" in *coordinates*) ;;
      '') output="coordinates" ;;
      *) output="${output}, coordinates" ;;
      esac
      ;;
    --class | class | "--get class")
      case "$output" in *class*) ;;
      '') output="class" ;;
      *) output="${output}, class" ;;
      esac
      ;;
    --type | type | "--get type")
      case "$output" in *type*) ;;
      '') output="type" ;;
      *) output="${output}, type" ;;
      esac
      ;;
    --rank | rank | "--get rank")
      case "$output" in *rank*) ;;
      '') output="rank" ;;
      *) output="${output}, rank" ;;
      esac
      ;;
    --importance | importance | "--get importance")
      case "$output" in *importance*) ;;
      '') output="importance" ;;
      *) output="${output}, importance" ;;
      esac
      ;;
    --name | name | "--get name")
      case "$output" in *name*) ;;
      '') output="name" ;;
      *) output="${output}, name" ;;
      esac
      ;;
    --road | road | "--get road")
      case "$output" in *road*) ;;
      '') output="road" ;;
      *) output="${output}, road" ;;
      esac
      ;;
    --town | town | "--get town")
      case "$output" in *town*) ;;
      '') output="town" ;;
      *) output="${output}, town" ;;
      esac
      ;;
    --county | county | "--get county")
      case "$output" in *county*) ;;
      '') output="county" ;;
      *) output="${output}, county" ;;
      esac
      ;;
    --postalcode | postalcode | "--get postalcode")
      case "$output" in *postalcode*) ;;
      '') output="postalcode" ;;
      *) output="${output}, postalcode" ;;
      esac
      ;;
    --state | state | "--get state")
      case "$output" in *state*) ;;
      '') output="state" ;;
      *) output="${output}, state" ;;
      esac
      ;;
    --country | country | "--get country")
      case "$output" in *country*) ;;
      '') output="country" ;;
      *) output="${output}, country" ;;
      esac
      ;;
    --countrycode | countrycode | "--get countrycode")
      case "$output" in *countrycode*) ;;
      '') output="countrycode" ;;
      *) output="${output}, countrycode" ;;
      esac
      ;;
    --boundary | boundary | "--get boundary")
      case "$output" in *boundary*) ;;
      '') output="boundary" ;;
      *) output="${output}, boundary" ;;
      esac
      ;;
    --*) ;;
    *)
      if [ "$location" ]; then
        location="$location $1"
      else
        location="$1"
      fi
      ;;
    esac
    shift
  done

  #@ Set verbosity level
  case "$QUIET" in
  true | 1 | on) verbosity=0 ;;
  esac

  case "$(
    printf "%s" "${verbosity:-"${VERBOSITY:-$VERBOSE}"}" |
      tr '[:upper:]' '[:lower:]'
  )" in
  quiet | false | 0) verbosity=0 ;;
  error | fatal | 1) verbosity=1 ;;
  warn | warning | 2) verbosity=2 ;;
  info | normal | 3) verbosity=3 ;;
  debug | verbose | 4) verbosity=4 ;;
  trace | all | true | 5)
    verbosity=5
    set -o xtrace # this can probably be temporary if we customize the trace messages
    ;;
  *)
    verbosity=3 #? Set default to INFO
    ;;
  esac

  [ "$verbosity" -ge 4 ] && {
    printf "DEBUG: Verbosity: %s\n" "$verbosity"
    printf "DEBUG: Location: %s\n" "$location"
    printf "DEBUG: Output: %s\n" "$output"
  }
}

parse_location() {
  #@ Prepare the location string and API URL
  location=$(printf "%s" "$location" | tr -s ' ' '+')
  if [ -z "$location" ]; then
    printf "Error: Location not provided." >&2
    return 1
  else
    # url="https://nominatim.openstreetmap.org/search?q=${location}&format=json"
    url="https://nominatim.openstreetmap.org/search?q=${location}&format=jsonv2&limit=1&addressdetails=1"

    [ "$verbosity" -ge 4 ] && {
      printf "Location: %s\n" "$location"
      printf "Api URL: %s\n" "$url"
    }
  fi

  #@ Fetch the response
  res=$(curl --silent "$url")
  [ "$verbosity" -ge 4 ] && printf "Response: %s\n" "$res"

  #@ Validate response
  if [ -z "$res" ] || [ "$res" = "[]" ]; then
    printf "Error: Failed to resolve location '%s'." "$location" >&2
    return 1
  fi

  #@ Parse the response into key-value pair variables
  data="$res"

  #@ Reset variables
  unset place_id latitude longitude class type rank importance name name_detailed boundingbox

  #@ Parse the response
  place_id=$(parse_json "$data" "place_id")
  [ "$verbosity" -ge 4 ] && printf "DEBUG: ID = %s\n" "$place_id"

  latitude=$(parse_json "$data" "lat")
  [ "$verbosity" -ge 4 ] && printf "DEBUG: Latitude = %s\n" "$latitude"

  longitude=$(parse_json "$data" "lon")
  [ "$verbosity" -ge 4 ] && printf "DEBUG: Longitude = %s\n" "$longitude"

  class=$(parse_json "$data" "class")
  [ "$verbosity" -ge 4 ] && printf "DEBUG: Class = %s\n" "$class"

  type=$(parse_json "$data" "type")
  [ "$verbosity" -ge 4 ] && printf "DEBUG: Type = %s\n" "$type"

  rank=$(parse_json "$data" "place_rank")
  [ "$verbosity" -ge 4 ] && printf "DEBUG: Rank = %s\n" "$rank"

  importance=$(parse_json "$data" "importance")
  [ "$verbosity" -ge 4 ] && printf "DEBUG: Importance = %s\n" "$importance"

  name=$(parse_json "$data" "display_name")
  [ "$verbosity" -ge 4 ] && printf "DEBUG: Name = %s\n" "$name"

  address=$(parse_json "$data" "address")
  [ "$verbosity" -ge 4 ] && printf "DEBUG: Address = %s\n" "$address"

  boundingbox=$(parse_json "$data" "boundingbox")
  [ "$verbosity" -ge 4 ] && printf "DEBUG: Bounding box = %s\n" "$boundingbox"
}

parse_json() {
  json="$1"
  key="$2"

  via_bin() {
    path="$DOTS_BIN/utility/parse_json"
    [ -x "$path" ] || return 1
    "$path" "$json" "$key"
  }
  via_jq() {
    command -v jq >/dev/null 2>&1 || return 1
    printf "%s" "$json" | jq -r ".[0].$key"
  }

  via_awk() {
    #@ Fallback to POSIX-compliant parsing with awk. Howeever it doersn't handle lists well and only returns the first item.
    printf "%s" "$json" | awk -v key="$key" '
      BEGIN { RS="[{},]" }
      {
        gsub(/^[ \n\t]+|[ \n\t]+$/, "")  # Trim whitespace
        if ($0 ~ "\"" key "\":") {        # Find key
          split($0, arr, ":")             # Split on colon
          rest = arr[2]                   # Get value portion

          # Handle array values
          if (rest ~ /^\s*\[/) {
            print "["                     # Print opening bracket

            # Extract array content
            gsub(/^\s*\[|\]\s*$/, "", rest)  # Remove brackets
            n = split(rest, elements, ",")    # Split into elements

            # Print each element with proper formatting
            for (i = 1; i <= n; i++) {
              gsub(/^[ \t]+|[ \t]+$/, "", elements[i])  # Trim each element
              print "  " elements[i]
            }
            print "]"                     # Print closing bracket
          } else {
            gsub(/^[ \n\t"]+|[ \n\t",]+$/, "", rest)  # Clean regular value
            print rest
          }
          exit 0
        }
      }
    '
  }

  via_bin || via_jq || via_awk
}

to_lower() {
  #DOC Converts a string to lowercase
  #DOC Args:
  #DOC   $1 - String to convert
  #DOC Returns:
  #DOC   Lowercase string on success
  #DOC Example:
  #DOC   lower_text=$(to_lower "HELLO")

  [ "$*" ] || return

  printf "%s" "$*" | tr '[:upper:]' '[:lower:]' 2>/dev/null || {
    printf "ERROR: Failed to convert string to lowercase\n" >&2
    return 1
  }
}

get_info() {
  get_all() {
    printf "%s" "$data"
    printf "%s,%s" "$latitude" "$longitude"
  }

  get_coordinates() {

    printf "%s" "$data"
  }

  echo "Location: $location"
  echo "Output: $output"

  case "$output" in
  *all*)
    get_all
    ;;
  *coordinates*)
    printf "%s,%s" "$latitude" "$longitude"
    ;;
  esac
  # case "$output" in
  # coordinates)
  #   printf "%s,%s" "$latitude" "$longitude"
  #   ;;
  # id)
  #   printf "%s" "$place_id"
  #   ;;
  # latitude)
  #   printf "%s" "$latitude"
  #   ;;
  # longitude)
  #   printf "%s" "$longitude"
  #   ;;
  # class)
  #   printf "%s" "$class"
  #   ;;
  # type)
  #   printf "%s" "$type"
  #   ;;
  # rank)
  #   printf "%s" "$rank"
  #   ;;
  # importance)
  #   printf "%s" "$importance"
  #   ;;
  # name)
  #   printf "%s" "$name"
  #   ;;
  # name_detailed)
  #   printf "%s" "$name_detailed"
  #   ;;
  # boundingbox)
  #   printf "%s" "$boundingbox"
  #   ;;
  # *)
  #   printf "ERROR: Invalid output format\n" >&2
  #   return 1
  #   ;;
  # esac
  case "$output" in
  *all*) get_all ;;
  *) ;;
  esac
  # [ "$place_id" ] && get_id
  # [ "$latitude" ] && get_latitude
  # [ "$longitude" ] && get_longitude
  # [ "$coordinates" ] && get_coordinates
  # [ "$class" ] && get_class
  # [ "$type" ] && get_type
  # [ "$rank" ] && get_rank
  # [ "$importance" ] && get_importance
  # [ "$name" ] && get_name
  # [ "$name_detailed" ] && get_name_detailed
  # [ "$boundingbox" ] && get_boundingbox
}

# main "$@"
tests "$@"
