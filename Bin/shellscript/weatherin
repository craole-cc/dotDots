#!/bin/sh

usage() {
  #DOC Displays usage information for the script
  #DOC Args: None
  #DOC Returns: 1 (to indicate usage error)
  #DOC Example: usage
  printf "Usage: weatherin [--latitude LATITUDE --longitude LONGITUDE] [CITY, COUNTRY] [COUNTRY] [CITY] [GPS_COORDINATES] [--verbose] [--debug]\n"
  printf "Example:\n"
  printf "  weatherin \"18.0431254,-77.50741\"\n"
  printf "  weatherin \"Mandeville, Jamaica\"\n"
  printf "  weatherin --latitude 18.0431254 --longitude -77.50741\n"
  printf "  weatherin Jamaica\n"
  printf "  weatherin Mandeville\n"
  printf "Options:\n"
  printf "  --verbose   Show detailed weather information\n"
  printf "  --debug     Enable debug mode to show script execution details\n"
  return 1
}

fetch_weather() {
  while [ $# -gt 0 ]; do
    case "$1" in
      --location)
        if [ -z "$2" ]; then
          printf "Error: --location requires a value.\n" >&2
          usage
          return 1
        else
          location="$2"
          shift
          #@ Replace '+' with ',' and remove spaces from the location
          location=$(printf "%s" "$location" | tr '+' ',' | tr -d ' ')

          #@ Validate location format
          printf "%s" "$location" \
            | grep --quiet --extended-regexp '^-?[0-9]{1,3}(\.[0-9]+)?,-?[0-9]{1,3}(\.[0-9]+)?$' || {
            printf "Error: Invalid location format." >&2 \
              && printf "Use format like '18.0431254,-77.50741' (float,float) or '18,-77' (int,int) without spaces.\n" >&2
            return 1
          }
        fi
        ;;
      --verbose)
        verbose=true
        ;;
      *)
        printf "Error: Unknown option '%s'.\n" "$1" >&2
        usage
        return 1
        ;;
    esac
    shift
  done

  # https://wttr.in/18.0431254,-77.50741?format=%C+%t+%w+%h "Mandeville, Jamaica"
  # https://wttr.in/52.2297,21.0122?format=%C+%t+%w+%h "Warsaw, Poland"

  case "$verbose" in
    '' | 0) curl -s "https://wttr.in/${location}" ;;
    *) curl -s "https://wttr.in/${location}?format=%C+%t+%w+%h" ;;
  esac
}

get_coordinates() {
  #DOC Resolve a city/country name to GPS coordinates using an external API
  #DOC Args:
  #DOC   $1 - Location name (e.g., "San Francisco, USA")
  #DOC Returns:
  #DOC   GPS coordinates (e.g., "37.7749,-122.4194") or empty string on failure
  #DOC Example:
  #DOC   resolve_location "San Francisco, USA"

  #@ Use a geocoding API to resolve the location
  location=$(printf "%s" "$1" | tr ',' '+' | tr -d ' ')
  api_url="https://nominatim.openstreetmap.org/search?q=${location}&format=json"

  #@ Fetch coordinates from the API
  response=$(curl -s "$api_url")
  latitude=$(echo "$response" | grep -oP '"lat":"\K[^"]+')
  longitude=$(echo "$response" | grep -oP '"lon":"\K[^"]+')

  #@ Ensure both latitude and longitude are set
  { [ "$latitude" ] && [ "$longitude" ]; } || {
    printf "Error: Failed to resolve location '%s'." "$1" >&2
  }

  #@ Return the coordinates
  printf "%s,%s" "$latitude" "$longitude"
}

initialize_() {
  #DOC Parses command-line arguments
  #DOC Args:
  #DOC   $1 - Latitude
  #DOC   $2 - Longitude
  #DOC   $3 - Location
  #DOC   $4 - Verbose flag
  #DOC   $5 - Debug flag
  #DOC Returns: None
  #DOC Example: parse_arguments 37.7749 -122.4194 "San Francisco, USA" 0 0

  #@ Reset arguments
  unset latitude longitude location debug verbose

  #@ Parse arguments
  while [ $# -gt 0 ]; do
    case "$1" in
      --latitude)
        if [ -n "$2" ]; then
          latitude="$2"
          shift 2
        else
          printf "Error: --latitude requires a value.\n" >&2
          usage
          exit 1
        fi
        ;;
      --longitude)
        if [ -n "$2" ]; then
          longitude="$2"
          shift
        else
          printf "Error: --longitude requires a value.\n" >&2
          usage
          exit 1
        fi
        ;;
      --verbose)
        verbose=true
        ;;
      --debug)
        debug=true
        ;;
      *)
        if [ "$location" ]; then
          location="${location},$1"
        else
          location="$1"
        fi
        ;;
    esac
  done
}

#@ Debug mode: Print parsed arguments
if [ "$debug" ]; then
  #DOC Debugging function to print parsed arguments and intermediate values
  #DOC Args: None
  #DOC Returns: None
  #DOC Example: Called when --debug is enabled
  printf "Debug: Latitude = %s\n" "$latitude"
  printf "Debug: Longitude = %s\n" "$longitude"
  printf "Debug: Location = %s\n" "$location"
  printf "Debug: Verbose = %s\n" "$verbose"
fi

#@ Validate input
if [ "$latitude" ] && [ "$longitude" ]; then
  location="${latitude},${longitude}"
elif [ -z "$location" ]; then
  printf "Error: No location provided.\n" >&2
  usage
  exit 1
fi

# Debug mode: Print final location
case "$debug" in '' | 0) ;; *)
  printf "Debug: Final location = %s\n" "$location"
  ;;
esac

# Fetch and display weather
weather_output=$(fetch_weather "$location" "$verbose")
if [ -z "$weather_output" ]; then
  printf "Error: Failed to fetch weather data. Please check your input and internet connection.\n" >&2
  exit 1
else
  printf "%s\n" "$weather_output"
fi
