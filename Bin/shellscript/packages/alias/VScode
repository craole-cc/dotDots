#!/bin/sh
# shellcheck enable=all
# TODO: Finish this script. Right now we only do vscode on windows and helix
# A robust, POSIX-compliant launcher for code editors.
#
# Options:
#   -D, --dots   : Launch using the DOTS configuration.
#   -R, --rust   : Launch using the RUST configuration.
#   -N, --nix    : Launch using the NIX configuration.
#   -c, --code   : Force using VS Code variants.
#   -z, --zed    : Force using Zed editor.
#   -v, --vim    : Force using Neovim.
#   -x, --helix  : Force using Helix editor.
#   -h, --help   : Display this help message.
#   -d, --debug  : Show debugging information.
#
# If none of the above options is provided, first available editor is used.

# Default configurations for code variants.

main() {
  set_defaults
  parse_arguments "$@"
  execute_process
}

set_defaults() {
  #{ Enable strict error handling.
  set -eu

  debug=0
  delimiter=" "

  project="$(pwd)"
  editor="vscode"
  args=""
  language=""
}

pout_debug() {
  case "${debug:-0}" in
  0 | '' | off | false) ;;
  *) printf "[DEBUG] %s\n" "$*" >&2 ;;
  esac
}

parse_arguments() {
  #{ Parse arguments
  while [ "$#" -gt 0 ]; do
    case "${1:-}" in
    -h | --help)
      usage
      ;;
    -d | --debug)
      DEBUG=1
      ;;
    -D | --dots)
      project="${DOTS:-}"
      language="dots"
      ;;
    --rust | --nix | --elixir | --go | --python | --zig)
      language="${1#--}"
      ;;
    -c | --code)
      editor="vscode"
      ;;
    -z | --zed)
      editor="zed"
      ;;
    -v | --vim)
      editor="neovim"
      ;;
    -x | --helix)
      editor="helix"
      ;;
    *)
      args="${args}${args:+${delimiter}}${1}"
      ;;
    esac
    shift
  done

  #{ Add the path to the argumments
  args="${args}${args:+${delimiter}}${project}"
}

execute_process() {
  #{ Set the editor command
  case "${editor:-}" in
  zed*) build_zed_cmd ;;
  helix*) build_helix_cmd ;;
  neovim*) build_neovim_cmd ;;
  vscode) build_editor_cmd ;;
  *)
    if [ -n "${EDITOR:-}" ] && cmd -v "${EDITOR}" >/dev/null 2>&1; then
      editor_cmd="$(EDITOR "${args:-}")"
    else
      pout_debug "Default editor command not found"
    fi
    ;;
  esac
  #{ Launch the editor, if one was found
  if [ -n "${editor_cmd:-}" ]; then
    case "${debug:-0}" in
    0 | '' | off | false) eval "${editor_cmd}" ;;
    *) pout_debug "Editor command: ${editor_cmd}" ;;
    esac
  else
    printf "ðŸŸ¥ No suitable editor found. Install VS Code, Zed, Helix, Neovim, or set \$EDITOR.\n" >&2
    return 1
  fi
}

nix_check() {
  if
    nix config show |
      grep '^experimental-features.*flakes*' >/dev/null 2>&1
  then
    printf "flake"
  elif command -v nix-shell >/dev/null 2>&1; then
    printf "shell"
  else
    printf ""
  fi
}

nix_run() {
  nix_pkg="$1"
  shift

  case "$(nix_check)" in
  flake | develop)
    nix_run_cmd="$(
      printf "%s %s %s %s %s" \
        "nix run" "${nix_pkg}" "--impure" \
        "--" "${@:-}"
    )"
    ;;
  shell)
    echo shell
    nix_run_cmd="$(
      printf "%s %s %s %s %s" \
        "nix-shell" "--packages" "${nix_pkg}" \
        "--command" "${@:-}"
    )"
    ;;
  *) ;;
  esac

  pout_debug "nix_run command: ${nix_run_cmd}"
  "${nix_run_cmd}"
}

build_vscode_ext() {
  #{ Get extension list based on language
  case "${1:-}" in
  "dots")
    extensions="${dots_vscode_ext:-"
        Codeium.codeium
        EditorConfig.EditorConfig
        mkhl.shfmt
        tamasfe.even-better-toml
        timonwong.shellcheck
      "}"
    ;;
  "rust")
    extensions="${rust_vscode_ext:-"
        fill-labs.dependi
        rust-analyzer.rust-analyzer
        tamasfe.even-better-toml
        vadimcn.vscode-lldb
      "}"
    ;;
  "nix")
    extensions="${nix_vscode_ext:-"
        jnoortheen.nix-ide
        mkhl.direnv
      "}"
    ;;
  *)
    extensions=""
    ;;
  esac

  #{ Initialize empty string for extension arguments
  ext_string=""

  #{ Convert extension list to command arguments
  for ext in ${extensions}; do
    [ -n "${ext}" ] && ext_string="${ext_string:+${ext_string} }--update-extensions ${ext}"
  done

  #{ Return the built string
  printf "%s" "${ext_string}"
}

build_vscode_cmd() {
  editor_cmd="Visual Studio Code"
  pout_debug "Building command for ${editor_cmd}"

  #{ Collect language extensions
  if [ -n "${language:-}" ]; then
    pout_debug "Language: ${language}"
    # lang_args="$(build_vscode_ext "${language}")"
    lang_args="" #TODO: The app doesn't open when run with the update-extensions flag
  else
    lang_args=""
  fi

  #{ Add language extensions to the arguments
  args="${lang_args:-}${lang_args:+ }${args}"

  #{ Check for the first available command
  for cmd in code-insiders code code-oss codium; do
    pout_debug "Checking for" "${cmd:-}"
    if command -v "${cmd:-}" >/dev/null 2>&1; then
      editor_cmd="${cmd} ${args:-}"
      pout_debug "$(
        printf "Found '%s': %s" "${cmd}" "${editor_cmd}"
      )"
      return 0
    fi

    #{ Define nix package and command variables
    case "${cmd:-}" in
    code) nix_pkg="vscode-fhs" nix_cmd="${cmd}" ;;
    codium) nix_pkg="vscodium-fhs" nix_cmd="${cmd}" ;;
    *) nix_pkg="" nix_cmd="" ;;
    esac

    #{ Try using nix to get the command
    case "$(nix_check)" in
    flake | develop | shell)
      echo "Pkgs: ${nix_pkg:-}"
      if [ -n "${nix_pkg:-}" ]; then
        #{ Allow non-free packages
        export NIXPKGS_ALLOW_UNFREE=1

        #{ Define commands for develop vs shell
        case "$(nix_check)" in
        flake | develop)
          nix_pkg="nixpkgs#${nix_pkg}"
          nix_dev="nix develop"
          ;;
        *)
          nix_dev="nix-shell"
          ;;
        esac

        printf "Trying '%s' for %s..." "${nix_dev}" "${cmd}"
        nix_check_cmd="$(
          nix_run "${nix_pkg}" "command -v ${nix_cmd}"
        )"
        if "${nix_check_cmd:-}" >/dev/null 2>&1; then
          editor_cmd="$(nix_run "${nix_pkg}" "${nix_cmd}" "${args:-}")"
          pout_debug "$(
            printf "Defining %s through %s: %s\n" \
              "${nix_cmd}" "${nix_dev}" "${editor_cmd}"
          )"
          return 0
        else
          pout_debug "$(
            printf "Failed to install '%s' through '%s'\n" "${nix_pkg}" "${nix_dev}"
          )"
        fi
      else
        pout_debug "$(
          printf "Nix doesn't seem to have '%s' in the normal packages" "${cmd}"
        )"
      fi
      ;;
    *)
      #{ Try Flatpak if available.
      # pout_debug "Checking for VS Code in Flatpak"
      # if command -v flatpak >/dev/null 2>&1; then
      #   if flatpak info com.visualstudio.code >/dev/null 2>&1; then
      #     pout_debug "Found VS Code in Flatpak"
      #     eval "flatpak run com.visualstudio.code ${args}" &
      #     printf "Launched Flatpak version of Visual Studio Code with arguments: %s\n" "$*"
      #     return 0
      #   elif flatpak info com.vscodium.codium >/dev/null 2>&1; then
      #     pout_debug "Found VSCodium in Flatpak"
      #     eval "flatpak run com.vscodium.codium ${args}" &
      #     printf "Launched Flatpak version of VSCodium with arguments: %s\n" "$*"
      #     return 0
      #   fi
      # fi
      ;;
    esac
  done

  printf "Unable to find any variants of %s" "${editor_cmd}"
  unset editor_cmd
  return 1
}

build_helix_cmd() {
  editor_cmd="Helix Editor"
  pout_debug "Building command ${editor_cmd}"
  cmd=hx
  nix_pkg="helix"
  nix_cmd="hx"

  #{ Check if the command is available locally
  if command -v "${cmd:-}" >/dev/null 2>&1; then
    editor_cmd="${cmd} ${args:-}"
    pout_debug "$(
      printf "Found '%s': %s" "${cmd}" "${editor_cmd}"
    )"
    return 0
  fi

  #{ Try using nix to get the command
  case "$(nix_check)" in
  flake | develop | shell)
    echo "Pkgs: ${nix_pkg:-}"
    if [ -n "${nix_pkg:-}" ]; then
      #{ Define commands for develop vs shell
      case "$(nix_check)" in
      flake | develop)
        nix_pkg="nixpkgs#${nix_pkg}"
        nix_dev="nix develop"
        ;;
      *)
        nix_dev="nix-shell"
        ;;
      esac

      printf "Trying '%s' for %s..." "${nix_dev}" "${cmd}"
      nix_check_cmd="$(nix_run "${nix_pkg}" "command -v ${nix_cmd}")"
      if "${nix_check_cmd:-}" >/dev/null 2>&1; then
        editor_cmd="$(nix_run "${nix_pkg}" "${nix_cmd}" "${args:-}")"
        pout_debug "$(
          printf "Defining %s through %s: %s\n" \
            "${nix_cmd}" "${nix_dev}" "${editor_cmd}"
        )"
        return 0
      else
        pout_debug "$(
          printf "Failed to install '%s' through '%s'\n" "${nix_pkg}" "${nix_dev}"
        )"
      fi
    else
      pout_debug "$(
        printf "Nix doesn't seem to have '%s' in the normal packages" "${cmd}"
      )"
    fi
    ;;
  *)
    #{ Try Flatpak if available.
    # pout_debug "Checking for VS Code in Flatpak"
    # if command -v flatpak >/dev/null 2>&1; then
    #   if flatpak info com.visualstudio.code >/dev/null 2>&1; then
    #     pout_debug "Found VS Code in Flatpak"
    #     eval "flatpak run com.visualstudio.code ${args}" &
    #     printf "Launched Flatpak version of Visual Studio Code with arguments: %s\n" "$*"
    #     return 0
    #   elif flatpak info com.vscodium.codium >/dev/null 2>&1; then
    #     pout_debug "Found VSCodium in Flatpak"
    #     eval "flatpak run com.vscodium.codium ${args}" &
    #     printf "Launched Flatpak version of VSCodium with arguments: %s\n" "$*"
    #     return 0
    #   fi
    # fi
    ;;
  esac

  printf "Unable to find any variants of %s" "${editor_cmd}"
  unset editor_cmd
  return 1
}

launch_zed() {
  pout_debug "Trying to launch Zed editor"
  args=$(collect_args "$@")

  # Try both `zed` and `zeditor` commands
  for zcmd in zed zeditor; do
    if command -v "${zcmd}" >/dev/null 2>&1; then
      pout_debug "Found local ${zcmd} installation"
      eval "${zcmd} ${args}" &
      printf "Launched %s editor with arguments: %s\n" "${zcmd}" "$*"
      return 0
    fi
  done

  #{ Try nix-shell if available and we're on a Nix system
  #TODO: This function is invoked in an 'if' condition so set -e will be disabled. Invoke separately if failures should cause the script to exit.shellcheckSC2310
  if is_nix_system; then
    pout_debug "Checking for Zed in nix"

    #{ Try zed-editor-fhs with zeditor command
    if nix-shell -p zed-editor-fhs --run "command -v zeditor" >/dev/null 2>&1; then
      pout_debug "Found zed-editor-fhs in nix"
      printf "Launching Zed through nix-shell\n"
      nix-shell -p zed-editor-fhs --run "zeditor ${args:-}" &
      return 0
    fi

    #{ Try zed package with zed command
    if nix-shell -p zed --run "command -v zed" >/dev/null 2>&1; then
      pout_debug "Found zed in nix"
      printf "Launching Zed through nix-shell\n"
      nix-shell -p zed --run "zed ${args:-}" &
      return 0
    fi
  fi

  #{ Try Flatpak if available.
  pout_debug "Checking for Zed in Flatpak"
  if command -v flatpak >/dev/null 2>&1; then

    #{ Try both potential Zed Flatpak IDs
    for flat_id in dev.zed.Zed io.zed.Zed; do
      if flatpak info "${flat_id}" >/dev/null 2>&1; then
        pout_debug "Found Zed in Flatpak as ${flat_id}"
        eval "flatpak run ${flat_id} ${args}" &
        printf "Launched Flatpak version of Zed editor with arguments: %s\n" "$*"
        return 0
      fi
    done
  fi

  pout_debug "No Zed editor found"
  return 1
}

launch_helix() {
  pout_debug "Trying to launch Helix editor"
  if command -v hx >/dev/null 2>&1; then
    pout_debug "Found local helix installation"
    eval "hx $args"
    printf "Launched Helix editor with arguments: %s\n" "$*"
    return 0
  fi

  #{ Try nix-shell if available and we're on a Nix system
  if is_nix_system; then
    pout_debug "Checking for Helix in nix"
    if nix-shell -p helix --run "command -v hx" >/dev/null 2>&1; then
      pout_debug "Found helix in nix"
      printf "Launching Helix through nix-shell\n"
      nix-shell -p helix --run "hx ${args:-}"
      return 0
    fi
  fi

  #{ Try Flatpak if available.
  pout_debug "Checking for Helix in Flatpak"
  if command -v flatpak >/dev/null 2>&1 && flatpak info com.helix_editor.Helix >/dev/null 2>&1; then
    pout_debug "Found Helix in Flatpak"
    eval "flatpak run com.helix_editor.Helix ${args}"
    printf "Launched Flatpak version of Helix editor with arguments: %s\n" "$*"
    return 0
  fi

  pout_debug "No Helix editor found"
  return 1
}

launch_neovim() {
  pout_debug "Trying to launch Neovim"
  args=$(collect_args "$@")

  if command -v nvim >/dev/null 2>&1; then
    pout_debug "Found local neovim installation"
    eval "nvim ${args}"
    printf "Launched Neovim with arguments: %s\n" "$*"
    return 0
  fi

  #{ Try nix-shell if available and we're on a Nix system
  if is_nix_system; then
    pout_debug "Checking for Neovim in nix"
    if nix-shell -p neovim --run "command -v nvim" >/dev/null 2>&1; then
      pout_debug "Found neovim in nix"
      printf "Launching Neovim through nix-shell\n"
      nix-shell -p neovim --run "nvim ${args:-}"
      return 0
    fi
  fi

  #{ Try Flatpak if available.
  pout_debug "Checking for Neovim in Flatpak"
  if command -v flatpak >/dev/null 2>&1 && flatpak info io.neovim.nvim >/dev/null 2>&1; then
    pout_debug "Found Neovim in Flatpak"
    eval "flatpak run io.neovim.nvim ${args}"
    printf "Launched Flatpak version of Neovim with arguments: %s\n" "$*"
    return 0
  fi

  pout_debug "No Neovim found"
  return 1
}

launch_editor() {
  pout_debug "Attempting to launch any available editor"

  # # Try VS Code variants first
  # #TODO: This function is invoked in an 'if' condition so set -e will be disabled. Invoke separately if failures should cause the script to exit.shellcheckSC2310
  # if launch_vscode "$@"; then
  #   return 0
  # fi

  # # Try Zed editor next
  # #TODO: This function is invoked in an 'if' condition so set -e will be disabled. Invoke separately if failures should cause the script to exit.shellcheckSC2310
  # if launch_zed "$@"; then
  #   return 0
  # fi

  # # Try Helix editor
  # #TODO: This function is invoked in an 'if' condition so set -e will be disabled. Invoke separately if failures should cause the script to exit.shellcheckSC2310
  # if launch_helix "$@"; then
  #   return 0
  # fi

  # # Try Neovim
  # #TODO: This function is invoked in an 'if' condition so set -e will be disabled. Invoke separately if failures should cause the script to exit.shellcheckSC2310
  # if launch_neovim "$@"; then
  #   return 0
  # fi
}

usage() {
  cat <<EOF >&2
Usage: $0 [option] [arguments...]

Options:
  -D, --dots     Launch using DOTS configuration (default: ${codeDOTS:-})
  -R, --rust     Launch using RUST configuration (default: ${codeRUST})
  -N, --nix      Launch using NIX configuration (default: ${codeNIX})
  -c, --code     Force using VS Code variants
  -z, --zed      Force using Zed editor
  -v, --vim      Force using Neovim
  -x, --helix    Force using Helix editor
  -h, --help     Show this help message
  -d, --debug    Show debugging information

Without options, launches first available editor in this order:
1. VS Code variants (code-insiders, code, code-oss, codium)
2. Zed editor (zed/zeditor)
3. Helix editor (hx)
4. Neovim (nvim)
5. \$EDITOR environment variable

On Nix systems, will try nix-shell before using flatpak.
EOF
  exit 1
}

main "$@"

#TODO: i've noticed that zed doesn't work on windows wsl. it installs with nixWSL but doesnt run and the command just sits in the terminal. we need to add a timeout and message for any editor that takes to loing too long to load.
