#!/bin/sh
# shellcheck enable=all

# TODO: Include neovim
# TODO: i've noticed that zed doesn't work on windows wsl. it installs with nixWSL but doesnt run and the command just sits in the terminal. we need to add a timeout and message for any editor that takes to loing too long to load.

main() {
  trap cleanup EXIT INT TERM
  set_defaults
  initialize_utilities
  initialize_pout
  parse_arguments "$@"
  execute_process
}

set_defaults() {
  #~@ Enable strict error handling.
  set -eu

  debug=0
  delimiter=" "

  editor="vscode"
  args=""
  # language=""
}

set_editor_cmd() {
  #~@ Define editor variables
  case "${editor:-}" in
  zed*) ;;
  helix*)
    editor_name="Helix Editor"
    editor_cmds="hx"
    ;;
  neovim*) ;;
  vscode)
    editor_name="Visual Studio Code"
    editor_cmds="code-insiders code code-oss codium"
    ;;
  *)
    editor_name="The System Default Editor"
    editor_cmds="${VISUAL:-"${EDITOR:-}"}"
    ;;
  esac
  pout_debug "Attempting to set editor command for" "${editor_name}"

  #~@ Check for the first available command
  for cmd in ${editor_cmds:-}; do
    pout_debug "Checking for" "${cmd:-}"
    if command -v "${cmd:-}" >/dev/null 2>&1; then
      editor_cmd="${cmd} ${args:-}"
      pout_debug "$(
        printf "Found '%s': %s" "${cmd}" "${editor_cmd}"
      )"
      return 0
    fi

    #~@ Define nix package and command variables
    #TODO: Define flatpak packages and commands
    case "${cmd:-}" in
    hx) nix_pkg="helix" nix_cmd="${cmd}" ;;
    code) nix_pkg="vscode-fhs" nix_cmd="${cmd}" ;;
    codium) nix_pkg="vscodium-fhs" nix_cmd="${cmd}" ;;
    *) nix_pkg="" nix_cmd="" ;;
    esac

    #~@ Try using nix to get the command
    case "$(nix_check)" in
    flake | develop | shell)
      echo "Pkgs: ${nix_pkg:-}"
      if [ -n "${nix_pkg:-}" ]; then
        #~@ Allow non-free packages
        export NIXPKGS_ALLOW_UNFREE=1

        #~@ Define commands for develop vs shell
        case "$(nix_check)" in
        flake | develop)
          nix_pkg="nixpkgs#${nix_pkg}"
          nix_dev="nix develop"
          ;;
        *)
          nix_dev="nix-shell"
          ;;
        esac

        printf "Trying '%s' for %s..." "${nix_dev}" "${cmd}"
        nix_check_cmd="$(
          nix_run "${nix_pkg}" "command -v ${nix_cmd}"
        )"
        if "${nix_check_cmd:-}" >/dev/null 2>&1; then
          editor_cmd="$(nix_run "${nix_pkg}" "${nix_cmd}" "${args:-}")"
          pout_debug "$(
            printf "Defining %s through %s: %s\n" \
              "${nix_cmd}" "${nix_dev}" "${editor_cmd}"
          )"
          return 0
        else
          pout_debug "$(
            printf "Failed to install '%s' through '%s'\n" "${nix_pkg}" "${nix_dev}"
          )"
        fi
      else
        pout_debug "$(
          printf "Nix doesn't seem to have '%s' in the normal packages" "${cmd}"
        )"
      fi
      ;;
    *)
      #~@ Try Flatpak if available.
      # pout_debug "Checking for VS Code in Flatpak"
      # if command -v flatpak >/dev/null 2>&1; then
      #   if flatpak info com.visualstudio.code >/dev/null 2>&1; then
      #     pout_debug "Found VS Code in Flatpak"
      #     eval "flatpak run com.visualstudio.code ${args}" &
      #     printf "Launched Flatpak version of Visual Studio Code with arguments: %s\n" "$*"
      #     return 0
      #   elif flatpak info com.vscodium.codium >/dev/null 2>&1; then
      #     pout_debug "Found VSCodium in Flatpak"
      #     eval "flatpak run com.vscodium.codium ${args}" &
      #     printf "Launched Flatpak version of VSCodium with arguments: %s\n" "$*"
      #     return 0
      #   fi
      # fi
      ;;
    esac
  done

  printf "Unable to find any variants of %s" "${editor_name}"
  return 1
}

initialize_utilities() {
  nix_check() {
    if
      nix config show |
        grep '^experimental-features.*flakes*' >/dev/null 2>&1
    then
      printf "flake"
    elif command -v nix-shell >/dev/null 2>&1; then
      printf "shell"
    else
      printf ""
    fi
  }

  nix_run() {
    nix_pkg="$1"
    shift

    case "$(nix_check)" in
    flake | develop)
      nix_run_cmd="$(
        printf "%s %s %s %s %s" \
          "nix run" "${nix_pkg}" "--impure" \
          "--" "${@:-}"
      )"
      ;;
    shell)
      echo shell
      nix_run_cmd="$(
        printf "%s %s %s %s %s" \
          "nix-shell" "--packages" "${nix_pkg}" \
          "--command" "${@:-}"
      )"
      ;;
    *) ;;
    esac

    pout_debug "nix_run command: ${nix_run_cmd}"
    "${nix_run_cmd}"
  }
}

initialize_pout() {
  pout_usage() {
    printf "Usage: edita [options] [path]\n"
    # TODO: Improve the help message to show everything including description, options, parameters, examples and notes
  }

  pout_debug() {
    case "${debug:-0}" in
    0 | '' | off | false) ;;
    *) printf "[DEBUG] %s\n" "$*" >&2 ;;
    esac
  }
}

parse_arguments() {
  #~@ Parse arguments
  while [ "$#" -gt 0 ]; do
    case "${1:-}" in
    -h | --help)
      usage
      ;;
    -d | --debug)
      debug=1
      ;;
    -D | --dots)
      args="${args}${args:+${delimiter}}${DOTS:-"${HOME}/.dots"}"
      ;;
    # --rust | --nix | --elixir | --go | --python | --zig)
    #   language="${1#--}"
    #   ;;
    -c | --code)
      editor="vscode"
      ;;
    -z | --zed)
      editor="zed"
      ;;
    -v | --vim)
      editor="neovim"
      ;;
    -x | --helix)
      editor="helix"
      ;;
    *)
      args="${args}${args:+${delimiter}}${1}"
      ;;
    esac
    shift
  done

  #~@ Set args to the current directory if no arguments are provided
  if [ -z "${args:-}" ]; then
    args="$(pwd)"
  fi
}

execute_process() {
  #~@ Set the editor command
  set_editor_cmd

  #~@ Launch the editor, if one was found
  if [ -n "${editor_cmd:-}" ]; then
    case "${debug:-0}" in
    0 | '' | off | false) eval "${editor_cmd}" ;;
    *) pout_debug "Editor command: ${editor_cmd}" ;;
    esac
  else
    printf "ðŸŸ¥ No suitable editor found. Install VS Code, Zed, Helix, Neovim, or set \$EDITOR.\n" >&2
    return 1
  fi
}

cleanup() {
  #~@ Unset all variables to prevent leakage
  unset editor editor_cmd args
}

main "$@"
