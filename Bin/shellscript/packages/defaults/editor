#!/bin/sh
# shellcheck enable=all

main() {
  set_defaults
  set_modes
  parse_arguments "$@"
  establish_environment
  execute_process
}

set_defaults() {
  #| Print Defaults
  delimiter="${DELIMITER:-"$(printf "\037")"}"
  tab_size=2

  #| Metadata
  app_path="${0:-}"
  app_name="$(basename "${app_path}")"
  app_version="1.0.0"
  app_description="Intelligent Code Editor Launcher"
  app_license="MIT"
  app_authors="Craig Cole <cc@craole.com>"
  app_source="https://github.com/craole-cc/dotDots.git"
  app_usage="${app_name} [OPTIONS] [ARGS...]"

  #| Set modes
  strict=true
  verbosity="${VERBOSITY:-3}"
  action="launch"

  #| Check environment variables before setting fallback
  fallback_tuis="${EDITOR_TUI:-"hx|nvim|nano"}"
  fallback_guis="${EDITOR_GUI:-"code|code-insiders|zeditor|zed.exe"}"
  fallback_args="$(pwd -P || printf ".")"
}

set_modes() {
  case "${strict:-}" in 1 | true | yes) set -e ;; *) set +e ;; esac

  verbosity_quiet="${VERBOSITY_QUIET:-0}"
  verbosity_error="${VERBOSITY_ERROR:-1}"
  verbosity_warn="${VERBOSITY_WARN:-2}"
  verbosity_info="${VERBOSITY_INFO:-3}"
  verbosity_debug="${VERBOSITY_DEBUG:-4}"
  verbosity_trace="${VERBOSITY_TRACE:-5}"

  case "${verbosity:-}" in
  0 | quiet) verbosity="${verbosity_quiet}" ;;
  1 | error) verbosity="${verbosity_error}" ;;
  2 | warn) verbosity="${verbosity_warn}" ;;
  3 | info) verbosity="${verbosity_info}" ;;
  4 | debug) verbosity="${verbosity_debug}" ;;
  5 | trace) verbosity="${verbosity_trace}" ;;
  *) verbosity=3 ;;
  esac
}

parse_arguments() {
  while [ "$#" -ge 1 ]; do
    case "$1" in
    -h | --help | -v | --version)
      editor__pout "$1"
      exit 0
      ;;
    -V | --info | --verbose) verbosity="${verbosity_info}" ;;
    -d | --dry-run | --debug | --trace) verbosity="${verbosity_debug}" ;;
    -q | --quiet) verbosity="${verbosity_quiet}" ;;
    -t | --tui)
      case "${2:-}" in
      '' | none) default_tuis="none" ;;
      *)
        default_tuis="${default_tuis:+${default_tuis}${DELIMITER}}$2"
        ;;
      esac
      shift
      ;;
    -g | --gui)
      case "${2:-}" in
      '' | none) default_guis="none" ;;
      *)
        default_guis="${default_guis:+${default_guis}${delimiter}}$2"
        ;;
      esac
      shift
      ;;
    -x | --set)
      action="set"
      ;;
    --*)
      unset fallback_args
      if [ "$#" -eq 1 ]; then :; else
        shift
        args="$*"
        break
      fi
      ;;
    *)
      from_args="${from_args:+${from_args}"${delimiter}"}$1"
      ;;
    esac
    shift
  done
}

establish_environment() {
  #@ Collect editor preferences
  tuis="${default_tuis:-"${from_args:-"${fallback_tuis}"}"}"
  guis="${default_guis:-"${from_args:-"${fallback_guis}"}"}"

  #@ Normalize variables
  tuis="$(normalize_vars "${tuis}")"
  guis="$(normalize_vars "${guis}")"
  # echo "tuis: ${tuis}"
  # echo "guis: ${guis}"

  #@ Determine environment
  if [ -n "${DISPLAY:-}" ] || [ -n "${WAYLAND_DISPLAY:-}" ]; then
    editors="${guis:-"${tuis:-}"}"
  else
    editors="${tuis:-}"
  fi
  # echo "editors: ${editors}"

  #@ Ensure there is at least one editor
  if [ -n "${editors}" ]; then :; else

    #@ Print an error message, if verbosity is high enough
    if [ "${verbosity}" -lt "${verbosity_error}" ]; then :; else
      printf "No editors were defined editor\n"
      editor__pout_help
    fi

    #@ Exit with error
    return 1
  fi

  #@ Check for the first available editor
  i=0 editor="" ifs="${IFS}" IFS="${delimiter}"
  for editor in ${editors:-}; do
    if [ -z "${editor:-}" ]; then continue; else
      i=$((i + 1))
    fi

    editor="$(command -v "${editor}" 2>/dev/null || true)"
    if [ -x "${editor:-}" ]; then
      break
    else
      continue
    fi
  done
  IFS="${ifs}"

  #@ Define arguments based on action
  case "${action:-}" in set) ;; *)
    #@ Append a space and the arguments to the editor
    editor="${editor:-} ${args:-"${fallback_args:-}"}"
    ;;
  esac
}

execute_process() {
  #@ Return the editor
  if [ -n "${editor:-}" ]; then
    case "${action:-}" in
    set)
      #@ Print the editor command
      printf "%s" "${editor:-}"
      ;;
    *)
      #@ Print the editor command, if verbosity is high enough
      if [ "${verbosity}" -lt "${verbosity_info}" ]; then :; else
        printf "%s" "${editor:-}"
      fi

      #@ Execute the editor command
      if [ "${verbosity}" -ge "${verbosity_debug}" ]; then :; else
        eval "${editor:-}"
      fi
      ;;
    esac
  else
    #@ Print an error message, if verbosity is high enough
    if [ "${verbosity}" -lt "${verbosity_error}" ]; then :; else
      printf "Unable to determine the path to an available editor\n"
    fi

    #@ Exit with error
    return 1
  fi
}

normalize_vars() {
  if [ -z "${1:-}" ]; then return; else
    delimiter="${2:-"${delimiter}"}"
    vars="$(
      printf "%s" "$1" | sed \
        -e "s/, /${delimiter}/g" -e "s/,/${delimiter}/g" \
        -e "s/ | /${delimiter}/g" -e "s/|/${delimiter}/g" \
        -e "s/:/${delimiter}/g" \
        -e "s/ /${delimiter}/g"
    )"
  fi

  case "${delimiter}${vars:-}${delimiter}" in
  *"none"*) return ;;
  *) printf "%s" "${vars}" ;;
  esac
}

get_source_or() {
  source="$(
    git rev-parse --show-toplevel 2>/dev/null ||
      printf "%s" "${1:-}"
  )"
  printf "%s" "${source:-}"
}

# editor__pout_help() {
#   editor__pout "${app_name} v.${app_version} - ${app_description}"
#   editor__pout "${app_usage}"
#   editor__pout --tab 1 "\n\n" "Options:"
#   editor__pout --tab 2 "\n" "-h, --help       Usage guide"
#   editor__pout --tab 2 "\n" "-v, --version    Version information"
#   editor__pout --tab 2 "\n" "-V, --verbose    Verbose output"
#   editor__pout --tab 2 "\n" "-q, --quiet      Suppress all output"
#   editor__pout --tab 2 "\n" "-d, --debug      Debug output"
#   editor__pout --tab 2 "\n" "-t, --tui        Define a terminal editor"
#   editor__pout --tab 2 "\n" "-g, --gui        Define a graphical use interface editor"
#   editor__pout --tab 2 "\n" "-x, --set        Print the editor path and exit"
#   editor__pout --tab 1 "\n\n" "Arguments:"
#   editor__pout --tab 2 "\n" "ARGS             Define a list of editor arguments"
#   editor__pout --tab 1 "\n\n" "Environment:"
#   editor__pout --tab 2 "\n" "Environment:"
#   editor__pout --tab 2 "\n" "EDITOR_TUI       Editors for terminal use, in order of preference"
#   editor__pout --tab 2 "\n" "EDITOR_GUI       Editors for graphical use, in order of preference"
#   editor__pout --tab 1 "\n\n" "Examples:"
#   editor__pout --tab 2 "\n" "${app_name} code nano hx nvim"
#   editor__pout --tab 2 "\n" "${app_name} -t nvim -t hx"
#   editor__pout --tab 2 "\n" "${app_name} -g code"
#   editor__pout --tab 2 "\n" "${app_name} -g code -t nano"
#   editor__pout --tab 1 "\n" "Notes:"
#   editor__pout --tab 2 "\n" "If no editor is defined, the first available editor will be used from a list of candidates"
#   editor__pout --tab 2 "\n" "If no editor is defined and no candidates are available, an error will be thrown"
#   editor__pout --tab 2 "\n" "Use '--' to pass arguments to the editor"
#   editor__pout --tab 1 "\n\n" "Authors: " "${app_authors}"
#   editor__pout --tab 1 "\n" "Version: " "${app_version}"
#   editor__pout --tab 1 "\n" "License: " "${app_license}"
#   editor__pout --tab 1 "\n" "Source: "
#   editor__pout --tab 2 "\n" "Remote => " "${app_source}"
#   editor__pout --tab 2 "\n" " Local => " "${app_path}"
# }
editor__pout() {
  #@ Set defaults
  msg="" tag="" pad_lvl=0
  pad_size=${tab_size:-0}

  #@ Parse arguments
  while [ "$#" -ge 1 ]; do
    case "$1" in
    -h | --help) editor__pout_help ;;
    -v | --version) msg="${2:-"${app_version}"}" ;;
    --error) tag="ERROR" ;;
    --warn) tag=" WARN" ;;
    --info) tag=" INFO" ;;
    --debug) tag="DEBUG" ;;
    --trace) tag="TRACE" ;;
    --tab)
      if [ -n "${2:-}" ] && [ "${2:-}" -eq "${2:-}" ] >/dev/null 2>&1; then
        pad_lvl="$2"
        shift
      else
        pad_lvl=1
      fi
      ;;
    --[p | t]ab*1) pad_lvl=1 ;;
    --pad-1) pad_lvl=1 ;;
    --pad-2) pad_lvl=2 ;;
    --pad-3) pad_lvl=3 ;;
    --pad-lvl | --pad-size)
      if [ -n "${2:-}" ] && [ "$2" -eq "$2" ] >/dev/null 2>&1; then
        var="$(printf "%s" "$1" | sed -e 's/--//' -e 's/-/_/')"
        eval "${var}=$2"
      else
        editor__pout --error "Invalid argument: $1"
        return 1
      fi
      ;;
    --padded)
      #TODO: This makes no sense
      if [ -n "${2:-}" ] && [ "$2" -eq "$2" ] >/dev/null 2>&1; then
        pad_lvl="$2"
        pad_size=${tab_size:-2}
        shift
      else
        pad_lvl=${pad_lvl:-1}
        pad_size=${tab_size:-2}
      fi
      ;;
    *) msg=${msg:+$msg${delimiter}}$1 ;;
    esac
    shift
  done

  # echo "MSG: ${msg}"
  # echo " PAD_SIZE" "$pad_size"
  # echo "PAD_LEVEL" "$pad_lvl"

  pad_lvl=${pad_lvl:-0}
  pad_size=${pad_size:-0}
  pad_size=$((pad_lvl * pad_size))
  pad="$(printf "%${pad_size}s" "")"
  # echo "LVL: $pad_lvl" "SIZE: $pad_size"

  #@ Return if there is no message
  if [ -z "${msg:-}" ]; then return; fi

  #@ Print the message
  if [ -z "${tag:-}" ]; then
    printf "%s%b" "${pad}" "${msg}"
    :
  else
    printf ">>- %s | %s ->> %b\n" "${tag}" "${app_name}" "${msg}"
  fi

  unset msg tag pad_size pad_lvl
}

editor__pout_help() {
  cat <<EOF
    ${app_name} v.${app_version} - ${app_description}
    ${app_usage}

    Options:
      -h, --help       Usage guide
      -v, --version    Version information
      -V, --verbose    Verbose output
      -q, --quiet      Suppress all output
      -d, --debug      Debug output
      -t, --tui        Define a terminal editor
      -g, --gui        Define a graphical user interface editor
      -x, --set        Print the editor path and exit

    Arguments:
      ARGS             Define a list of editor arguments

    Environment:
      EDITOR_TUI       Editors for terminal use, in order of preference
      EDITOR_GUI       Editors for graphical use, in order of preference

    Examples:
      ${app_name} code nano hx nvim
      ${app_name} -t nvim -t hx
      ${app_name} -g code
      ${app_name} -g code -t nano

    Notes:
      If no editor is defined, the first available editor will be used from a list of candidates
      If no editor is defined and no candidates are available, an error will be thrown
      Use '--' to pass arguments to the editor

    Authors | ${app_authors}
    Version | ${app_version}
    License | ${app_license}
    Source  | Remote => ${app_source}
            | Local  => ${app_path}

EOF
}

main "$@"
