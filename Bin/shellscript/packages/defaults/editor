#!/bin/sh
# shellcheck enable=all

main() {
  set_defaults
  set_modes
  parse_arguments "$@"
  establish_environment
  execute_process
}

set_defaults() {
  #| Print Defaults
  delimiter="${DELIMITER:-"$(printf "\037")"}"
  tab_size=2

  #| Metadata
  app_path="${0:-}"
  app_name="$(basename "${app_path}")"
  app_version="1.0.0"
  app_description="Intelligent Code Editor Launcher"
  app_license="MIT"
  app_authors="Craig Cole <cc@craole.com>"
  app_source="https://github.com/craole-cc/dotDots.git"
  app_usage="${app_name} [OPTIONS] [ARGS...]"

  #| Set modes
  strict=true
  verbosity="${VERBOSITY:-3}"
  action="launch"

  #| Check environment variables before setting fallback
  fallback_tuis="${EDITOR_TUI:-"hx|nvim|nano"}"
  fallback_guis="${EDITOR_GUI:-"code|code-insiders|zeditor|zed.exe"}"
  fallback_args="$(pwd -P || printf ".")"
}

set_modes() {
  case "${strict:-}" in 1 | true | yes) set -e ;; *) set +e ;; esac

  verbosity_quiet="${VERBOSITY_QUIET:-0}"
  verbosity_error="${VERBOSITY_ERROR:-1}"
  verbosity_warn="${VERBOSITY_WARN:-2}"
  verbosity_info="${VERBOSITY_INFO:-3}"
  verbosity_debug="${VERBOSITY_DEBUG:-4}"
  verbosity_trace="${VERBOSITY_TRACE:-5}"

  case "${verbosity:-}" in
  0 | quiet) verbosity="${verbosity_quiet}" ;;
  1 | error) verbosity="${verbosity_error}" ;;
  2 | warn) verbosity="${verbosity_warn}" ;;
  3 | info) verbosity="${verbosity_info}" ;;
  4 | debug) verbosity="${verbosity_debug}" ;;
  5 | trace) verbosity="${verbosity_trace}" ;;
  *) verbosity=3 ;;
  esac
}

parse_arguments() {
  while [ "$#" -ge 1 ]; do
    case "$1" in
    -h | --help | -v | --version)
      editor__pout "$1"
      exit 0
      ;;
    -V | --info | --verbose) verbosity="${verbosity_info}" ;;
    -d | --dry-run | --debug | --trace) verbosity="${verbosity_debug}" ;;
    -q | --quiet) verbosity="${verbosity_quiet}" ;;
    -t | --tui)
      case "${2:-}" in
      '' | none) default_tuis="none" ;;
      *)
        default_tuis="${default_tuis:+${default_tuis}${delimiter}}$2"
        ;;
      esac
      shift
      ;;
    -g | --gui)
      case "${2:-}" in
      '' | none) default_guis="none" ;;
      *)
        default_guis="${default_guis:+${default_guis}${delimiter}}$2"
        ;;
      esac
      shift
      ;;
    -x | --set)
      action="set"
      ;;
    --*)
      unset fallback_args
      if [ "$#" -eq 1 ]; then :; else
        shift
        args="$*"
        break
      fi
      ;;
    *)
      from_args="${from_args:+${from_args}"${delimiter}"}$1"
      ;;
    esac
    shift
  done
}

establish_environment() {
  #{ Collect editor preferences
  tuis="${default_tuis:-"${from_args:-"${fallback_tuis}"}"}"
  guis="${default_guis:-"${from_args:-"${fallback_guis}"}"}"

  #{ Normalize variables
  tuis="$(normalize_vars "${tuis}")"
  guis="$(normalize_vars "${guis}")"
  # echo "tuis: ${tuis}"
  # echo "guis: ${guis}"

  #{ Set editors to GUI editors if available, else fallback to TUI editors
  # shellcheck disable=SC2310
  if check_gui_env; then
    editors="${guis:-${tuis:-}}"
  else
    editors="${tuis:-}"
  fi
  : "${editors:=}"

  #{ Ensure there is at least one editor
  if [ -n "${editors}" ]; then :; else

    #{ Print an error message, if verbosity is high enough
    if [ "${verbosity}" -lt "${verbosity_error}" ]; then :; else
      printf "No editors were defined editor\n"
      editor__pout_help
    fi

    #{ Exit with error
    return 1
  fi

  #{ Check for the first available editor
  i=0 editor="" old_IFS="${IFS}" IFS="${delimiter}"
  for editor in ${editors:-}; do
    if [ -z "${editor:-}" ]; then continue; else
      i=$((i + 1))
    fi

    editor_path="$(command -v "${editor}" 2>/dev/null || true)"
    if [ -n "${editor_path}" ] && [ -x "${editor_path}" ]; then
      break
    fi
  done
  IFS="${old_IFS}"

  #{ Define arguments based on action
  case "${action:-}" in set) ;; *)
    #{ Append a space and the arguments to the editor
    editor_cmd="${editor:-} ${args:-"${fallback_args:-}"}"
    ;;
  esac
}

execute_process() {
  #{ Return the editor
  if [ -n "${editor:-}" ]; then
    case "${action:-}" in
    set)
      #{ Print the editor command
      printf "%s" "${editor_path:-}"
      ;;
    *)
      #{ Print the editor command, if verbosity is high enough
      if [ "${verbosity}" -lt "${verbosity_info}" ]; then :; else
        printf "%s" "${editor_cmd:-}"
      fi

      #{ Execute the editor command
      if [ "${verbosity}" -ge "${verbosity_debug}" ]; then :; else
        eval "${editor_cmd:-}"
      fi
      ;;
    esac
  else
    #{ Print an error message, if verbosity is high enough
    if [ "${verbosity}" -lt "${verbosity_error}" ]; then :; else
      printf "Unable to determine the path to an available editor\n"
    fi

    #{ Exit with error
    return 1
  fi
}

normalize_vars() {
  #DOC normalize_vars - Normalize a string of variables by replacing common delimiters with a single delimiter.
  #DOC
  #DOC Usage:
  #DOC   normalize_vars <string> [delimiter]
  #DOC
  #DOC Description:
  #DOC   Takes a string containing variables separated by various delimiters such as commas, pipes,
  #DOC   colons, or spaces, and normalizes all delimiters to a single specified delimiter.
  #DOC
  #DOC Arguments:
  #DOC   $1 - The input string to normalize.
  #DOC   $2 - Optional. The delimiter to normalize to. Defaults to the global variable 'delimiter' if set.
  #DOC
  #DOC Returns:
  #DOC   Prints the normalized string to stdout. If the normalized string contains the word 'none',
  #DOC   the function returns without printing anything.
  #DOC
  #DOC Example:
  #DOC   normalized=$(normalize_vars "foo, bar|baz:qux" ",")

  #{ Return early if input string is empty or unset
  if [ -z "${1:-}" ]; then
    return
  fi

  #{ Use provided delimiter or fallback to global 'delimiter' variable
  delimiter="${2:-${delimiter:-}}"
  vars=""

  #{ Normalize delimiters: commas, pipes, colons, spaces replaced by the delimiter
  vars="$(
    printf '%s' "$1" | sed \
      -e "s/, */${delimiter}/g" \
      -e "s/| */${delimiter}/g" \
      -e "s/: */${delimiter}/g" \
      -e "s/  */${delimiter}/g"
  )"

  #{ Surround with delimiter to simplify 'none' detection
  case "${delimiter}${vars}${delimiter}" in
  *"none"*) return ;; #? If 'none' is found, do not print anything
  *) printf "%s" "${vars:-}" ;;
  esac
}

#DOC git_source_or - Return the top-level directory of the current git repository, if it exists.
#DOC
#DOC Usage:
#DOC   git_source_or [default_value]
#DOC
#DOC Description:
#DOC   Attempts to determine the top-level directory of the current Git repository
#DOC   by invoking `git rev-parse --show-toplevel`.
#DOC
#DOC   If the current working directory is not inside a Git repository, or if Git is
#DOC   not available, the function returns the provided default value (first argument),
#DOC   or an empty string if no default is given.
#DOC
#DOC Arguments:
#DOC   $1 - Optional. Default value to return if not inside a Git repository.
#DOC
#DOC Returns:
#DOC   Prints the resolved directory path or the default value to stdout.
#DOC
#DOC Example:
#DOC   repo_root=$(git_source_or "/default/path")
git_source_or() {
  if src=$(git rev-parse --show-toplevel 2>/dev/null); then
    #? Successfully found Git top-level directory
    printf '%s' "${src:-}"
  else
    #? Not inside a Git repo or git command failed; print default or empty string
    printf '%s' "${1:-}"
  fi
}

#DOC Determine environment and GUI availability
#DOC
#DOC Details:
#DOC - On Windows-like environments (Cygwin, MSYS, MinGW), assume GUI is available
#DOC - On Unix/Linux, check if DISPLAY or WAYLAND_DISPLAY is set (X11 or Wayland GUI)
check_gui_env() {
  case "$(uname -s)" in
  CYGWIN* | MSYS* | MINGW*) return 0 ;;
  *) [ -n "${DISPLAY:-}" ] || [ -n "${WAYLAND_DISPLAY:-}" ] ;;
  esac
}

editor__pout() {
  #{ Set defaults
  msg="" tag="" pad_lvl=0
  pad_size=${tab_size:-0}

  #{ Parse arguments
  while [ "$#" -ge 1 ]; do
    case "$1" in
    -h | --help) editor__pout_help ;;
    -v | --version) msg="${2:-"${app_version}"}" ;;
    --error) tag="ERROR" ;;
    --warn) tag=" WARN" ;;
    --info) tag=" INFO" ;;
    --debug) tag="DEBUG" ;;
    --trace) tag="TRACE" ;;
    --tab)
      if [ -n "${2:-}" ] && [ "${2:-}" -eq "${2:-}" ] >/dev/null 2>&1; then
        pad_lvl="$2"
        shift
      else
        pad_lvl=1
      fi
      ;;
    --[p | t]ab*1) pad_lvl=1 ;;
    --pad-1) pad_lvl=1 ;;
    --pad-2) pad_lvl=2 ;;
    --pad-3) pad_lvl=3 ;;
    --pad-lvl | --pad-size)
      if [ -n "${2:-}" ] && [ "$2" -eq "$2" ] >/dev/null 2>&1; then
        var="$(printf "%s" "$1" | sed -e 's/--//' -e 's/-/_/')"
        eval "${var}=$2"
      else
        editor__pout --error "Invalid argument: $1"
        return 1
      fi
      ;;
    --padded)
      #TODO: This makes no sense
      if [ -n "${2:-}" ] && [ "$2" -eq "$2" ] >/dev/null 2>&1; then
        pad_lvl="$2"
        pad_size=${tab_size:-2}
        shift
      else
        pad_lvl=${pad_lvl:-1}
        pad_size=${tab_size:-2}
      fi
      ;;
    *) msg=${msg:+${msg}${delimiter}}$1 ;;
    esac
    shift
  done

  pad_lvl=${pad_lvl:-0}
  pad_size=${pad_size:-0}
  pad_size=$((pad_lvl * pad_size))
  pad="$(printf "%${pad_size}s" "")"
  # echo "LVL: $pad_lvl" "SIZE: $pad_size"

  #{ Return if there is no message
  if [ -z "${msg:-}" ]; then return; fi

  #{ Print the message
  if [ -z "${tag:-}" ]; then
    printf "%s%b" "${pad}" "${msg}"
    :
  else
    printf ">>- %s | %s ->> %b\n" "${tag}" "${app_name}" "${msg}"
  fi

  unset msg tag pad_size pad_lvl
}

editor__pout_help() {
  cat <<EOF
    ${app_name} v.${app_version} - ${app_description}
    ${app_usage}

    Options:
      -h, --help       Usage guide
      -v, --version    Version information
      -V, --verbose    Verbose output
      -q, --quiet      Suppress all output
      -d, --debug      Debug output
      -t, --tui        Define a terminal editor
      -g, --gui        Define a graphical user interface editor
      -x, --set        Print the editor path and exit

    Arguments:
      ARGS             Define a list of editor arguments

    Environment:
      EDITOR_TUI       Editors for terminal use, in order of preference
      EDITOR_GUI       Editors for graphical use, in order of preference

    Examples:
      ${app_name} code nano hx nvim
      ${app_name} -t nvim -t hx
      ${app_name} -g code
      ${app_name} -g code -t nano

    Notes:
      If no editor is defined, the first available editor will be used from a list of candidates
      If no editor is defined and no candidates are available, an error will be thrown
      Use '--' to pass arguments to the editor

    Authors | ${app_authors}
    Version | ${app_version}
    License | ${app_license}
    Source  | Remote => ${app_source}
            | Local  => ${app_path}

EOF
}

main "$@"
