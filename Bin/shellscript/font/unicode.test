#!/bin/sh

# POSIX-compliant Unicode code point viewer

print_usage() {
  echo "Usage: $0 [--test] [string]"
  echo "  If no string is given, input is read from stdin."
}

# Read input
if [ "$1" = "--test" ]; then
  run_test=true
elif [ "$1" = "--help" ]; then
  print_usage
  exit 0
elif [ -n "$1" ]; then
  input=$1
else
  input=$(cat)
fi

# Character code extractor
print_unicode_info() {
  printf '%s' "$1" | awk '
    BEGIN {
      ENVIRON["LC_ALL"] = "C.UTF-8"
    }

    {
      for (i = 1; i <= length($0); ) {
        c = substr($0, i, 1)
        byte = ord(c)
        len = 1
        if (byte >= 0xF0) len = 4
        else if (byte >= 0xE0) len = 3
        else if (byte >= 0xC0) len = 2

        ch = substr($0, i, len)
        printf "%s  %s\n", ucode(ch), ch
        i += len
      }
    }

    function ucode(str,    cmd, hex, n, code, byte1, byte2, byte3, byte4) {
      cmd = "printf \"" str "\" | od -An -tx1 -v | tr -d \" \\n\""
      cmd | getline hex
      close(cmd)
      n = length(hex)

      if (n == 2) {
        code = strtonum("0x" hex)
      } else if (n == 4) {
        byte1 = strtonum("0x" substr(hex, 1, 2)) - 0xC0
        byte2 = strtonum("0x" substr(hex, 3, 2)) - 0x80
        code = (byte1 << 6) + byte2
      } else if (n == 6) {
        byte1 = strtonum("0x" substr(hex, 1, 2)) - 0xE0
        byte2 = strtonum("0x" substr(hex, 3, 2)) - 0x80
        byte3 = strtonum("0x" substr(hex, 5, 2)) - 0x80
        code = (byte1 << 12) + (byte2 << 6) + byte3
      } else if (n == 8) {
        byte1 = strtonum("0x" substr(hex, 1, 2)) - 0xF0
        byte2 = strtonum("0x" substr(hex, 3, 2)) - 0x80
        byte3 = strtonum("0x" substr(hex, 5, 2)) - 0x80
        byte4 = strtonum("0x" substr(hex, 7, 2)) - 0x80
        code = (byte1 << 18) + (byte2 << 12) + (byte3 << 6) + byte4
      } else {
        code = -1
      }

      return sprintf("U+%04X", code)
    }

    function ord(c) {
      return index("\0\1\2\3\4\5\6\7\10\11\12\13\14\15\16\17\
\20\21\22\23\24\25\26\27\30\31\32\33\34\35\36\37 !\"#$%&'\''()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\177", c) - 1
    }
  '
}

# Run test suite
run_tests() {
  echo "Running tests..."
  echo "Test input: 'A ¬© ‚ÄØüëç'"
  echo "Expected output (code points):"
  echo "U+0041"
  echo "U+0020"
  echo "U+00A9"
  echo "U+0020"
  echo "U+202F"
  echo "U+1F44D"
  echo
  echo "Actual output:"
  print_unicode_info "A ¬© ‚ÄØüëç"
}
printf "\037"
# Run test if requested, else process input
if [ "${run_test}" = true ]; then
  run_tests
else
  print_unicode_info "${input}"
fi
