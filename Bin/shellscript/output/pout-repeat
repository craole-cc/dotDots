#!/bin/sh

main() {
  set_defaults
  init_utilities
  parse_arguments "$@"
  execute_process
}

set_defaults() {
  scr_path="$0"
  scr_name="$(basename "${scr_path}")"
  # scr_home="$(dirname -- "${scr_path}")"
  scr_version=0.2.0
  src_description="Prints a leading padding before the specified text"
  scr_usage="${scr_name} [OPTIONS] <REPS> <CHAR>"
  exit_code=0
  debug=1
  expected_args=1
  pad=2
  delimiter=" "
  pattern=""
  repetitions=1
}

parse_arguments() {
  #~@ Script Options
  for arg in "$@"; do
    case "${arg}" in
    -h) pout_usage 0 ;;
    --help) pout_guide ;;
    *) ;;
    esac
  done

  #~@ Process Options
  while [ "$#" -ge "${expected_args:-1}" ]; do
    case "$1" in
    -d | --verbose | --debug)
      debug=1
      ;;
    -n | --num* | -r | --rep*)
      is_positive_int "$2" || pout_usage --reps
      repetitions="$2"
      shift
      ;;
    -p | --pat* | -c | --char* | --str*)
      [ -n "$2" ] || pout_usage --args
      pattern="$2"
      shift
      ;;
    -l | --line)
      pattern="\n"
      repetitions="${2:-1}"
      break
      ;;
    -s | --space)
      pattern=" "
      repetitions="${2:-1}"
      break
      ;;
    *) pattern="${pattern:+${pattern}"${delimiter}"}$1" ;;
    esac
    shift
  done

  #~@ Debugging
  pout_debug "REPS:" "${repetitions}"
  pout_debug "CHAR:" "${pattern}"

  #~@ Ensure repetitions are provided and valid
  if [ -n "${repetitions}" ] && is_positive_int "${repetitions}"; then :; else
    pout_usage --reps
  fi

  #~@ Ensure pattern is provided
  if [ -n "${pattern}" ]; then :; else
    pout_usage --reps
  fi
}

execute_process() {
  pout_repeat "${repetitions}" "${pattern}"
}

init_utilities() {
  is_positive_int() {
    printf "%s" "$1" | grep -qE '^[1-9][0-9]*$'
  }

  pout_debug() {
    case "${debug:-}" in "" | off | false | 0) ;; *)
      _ctx="${ctx:-"${scr_name}"}"

      if [ -n "${_ctx}" ]; then
        printf "DEBUG /> %s /> %b\n" "${_ctx}" "$*"
      else
        printf "DEBUG /> %b\n" "$*"
      fi
      ;;
    esac
  }

  pout_repeat() {
    reps="$1"
    char="$2"
    i=0
    while [ "${i}" -lt "${reps}" ]; do
      #~@ Use %b to interpret escape sequences
      printf "%b" "${char}"
      i=$((i + 1))
    done
  }

  pout_section() {
    while [ "$#" -ge 1 ]; do
      case "$1" in
      --head*)
        str="$2"
        pad=0
        head_sep="<|"
        tail_sep="|>"
        printf "\n%*s%s\n" "${pad}" "" "${head_sep}${str}${tail_sep}"
        ;;
      --info*)
        pad=2
        printf "%*s%s\n" "${pad}" "" "$2"
        ;;
      *) ;;
      esac
      shift
    done
  }

  pout_usage() {
    while [ "$#" -ge 1 ]; do
      case "$1" in
      --args)
        msg="$(
          printf "Incorrect number of arguments. " >&2
          printf "Expected at least %s but got %s\n" "${expected_args}" "$2" >&2
        )"
        ;;
      --pos)
        msg="$(
          printf "Unable to distinguih the pattern from the number of repetitions\n" >&2
        )"
        ;;
      --reps)
        msg="$(printf "Number of repetitions not defined\n" >&2)"
        ;;
      *)
        exit_code="${1:-1}"
        ;;
      esac
      shift
    done

    if [ "${exit_code}" -gt 0 ] && [ -n "${msg}" ]; then
      printf "ERROR: %s\n%s" "${msg}" "${scr_usage}" >&2
    else
      printf "Usage: %s (use --help for detailed guide)" "${scr_usage}"
    fi

    exit "${exit_code}"
  }

  pout_guide() {
    printf "%s v.%s\n" "${scr_name}" "${scr_version}"
    pout_section --head "Description" --info "${src_description}"
    pout_section --head "Usage" --info "${scr_usage}"
    pout_section \
      --head "Arguments" \
      --info "-r --reps  <REPS>   Times to repeat the pattern" \
      --info "-p --char  <CHAR>   Character/pattern to repeat" \
      --info "-l --line  [REPS]   Template: blank lines (Default: 1)" \
      --info "-s --space [REPS]   Template: whitespaces (Default: 1)"

    pout_section \
      --head "Parameters" \
      --info "REPS    Positive integer (eg. 1, 2, 15, etc)" \
      --info 'CHAR    Any character or pattern (eg. *, -_, \n, \t, etc)'

    pout_section \
      --head "Examples" \
      --info "pout-repeat -r 2 -p '*'" \
      --info "pout-repeat -l 3" \
      --info "pout-repeat -s 4"

    exit 0
  }
}

main "$@"
