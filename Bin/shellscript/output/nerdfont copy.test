#!/bin/sh
#DOC Comprehensive Nerd Fonts, Ligatures, and Iconic Directory Listing Test Script

# === Helper Functions ===
print_header() {
  printf "\n=== %s ===\n" "$1"
  printf "%s\n" "$(seq -s= 40 | tr -d '[:digit:]' || true)"
}

# === Test Categories ===
print_header "Nerd Font Rendering Test"

printf "\nNumerals:\n"
printf "0123456789\n"

printf "\nSimilar Characters:\n"
printf "oO08 iIlL1 g9qCGQ 8%%& <([{}])> .,;: -_=\n"

printf "\nDiacritics:\n"
printf "â é ù ï ø ç Ã Ē Æ œ\n"

print_header "Nerd Font Icons"

#| Development icons
printf "Development:\n"
printf "dev:     \uf013  | "
printf "git:     \uf1d3  | "
printf "github:  \uf408  | "
printf "gitlab:  \uf296  | "
printf "branch:  \uf418  | "
printf "commit:  \uf417\n"

#| Files & Folders
printf "\nFiles & Folders:\n"
printf "folder:  \uf114  | "
printf "file:    \uf15b  | "
printf "config:  \ue615  | "
printf "lock:    \uf023\n"

#| Status & Notifications
printf "\nStatus & Notifications:\n"
printf "info: \uf05a \uf449 \udb81\ude4e  | "
printf "success: \uf058 \uf05d \uf00c  | "
printf "failure: \uf057 \uf52f \uf467  | "
printf "warning: \uf071 \uea6c \ue009 \n"

#| Programming Languages
printf "\nProgramming Languages:\n"
printf "bash: \udb84\udd83 \uf489  | "
printf "go: \ue627 \ue626 \udb81\udfd3  | "
printf "javascript: \ue60c  | "
printf "nix: \uf313  | "
printf "python: \ue606  | "
printf "rust: \ue7a8  | "
printf "shell: \uf489  | "
printf "zig: \ue8ef  | "
printf "typescript: \ue628  \n"

#| Editors & Tools
printf "\nEditors & Tools:\n"
printf "vscode: \ue70c  | "
printf "vim: \ue62b  | "
printf "terminal: \uf120  | "
printf "powershell: \ue795  \n"

#| System & Hardware
printf "\nSystem & Hardware:\n"
printf "windows: \ue70f  | "
printf "linux: \uf31a  | "
printf "apple: \uf302  | "
printf "cpu: \uf4bc  | "
printf "ram: \uefc5  \n"

#| Media & Communication
printf "\nMedia & Communication:\n"
printf "music:  \uf001  | "
printf "video:  \uf03d  | "
printf "email:  \uf0e0  | "
printf "wifi:   \uf1eb  \n"

print_header "Programming Ligatures Test"
printf "!= !== == === <= >= -> => || && ++ -- ** // /* */ := :: ;; =>= \n"
printf "if (a != b && c >= d) { foo->bar(); arr[i]++; }\n"
printf "const lambda = (x) => x * x; // Arrow function\n"
printf "a === b && b !== c || d <= e && f >= g\n"

print_header "Extended Ligatures Test"
printf ">>> <<= >>= <== ==> <=> <||> <&&> <**> <++> <--> <~~> <==>\n"
printf "foo <<= 1; bar >>= 2; baz <== qux; quux ==> corge;\n"

print_header "Italic Text Test"
printf "Normal vs \e[3mItalic\e[0m text\n"
printf "\e[3mFull italic sentence to check rendering\e[0m\n"
printf "Mixed \e[3mitalic\e[0m and \e[1mbold\e[0m text\n"
printf "\e[3mItalic \e[1;3mbold-italic\e[0m\e[3m back to italic\e[0m\n"
printf "Code comments: \e[3m// This is an italic comment\e[0m\n"

print_header "Directory Listing Test"
if command -v lsd >/dev/null 2>&1; then
  printf "Using lsd for directory listing with icons:\n"
  lsd --almost-all --group-directories-first
elif command -v eza >/dev/null 2>&1; then
  printf "Using eza for directory listing with icons:\n"
  eza --almost-all --icons --group-directories-first
else
  printf "Neither lsd nor eza found. Falling back to ls (no icons):\n"
  ls -lA --color=always --group-directories-first
fi

print_header "Test Complete"
printf "If you see:\n"
printf "1. Nerd Font glyphs rendered properly above\n"
printf "2. Ligatures combined into single symbols\n"
printf "3. Icons displayed correctly\n"
printf "Then your font and terminal support Nerd Fonts and ligatures properly.\n"

printf "\nPress q to exit...\n"
