#!/bin/sh

main() {
  init_utilities
  set_defaults
  # parse_arguments "$@"
  execute_process "$@"
}

set_defaults() {
  scr_path="$(pathof "$0" 2>/dev/null || echo "$0")"
  scr_name="$(basename "${scr_path}")"
  scr_home="$(dirname -- "${scr_path}")"
  scr_version=0.2
  src_description="Prints a character or pattern a specified number of times"
  scr_usage="Usage: ${scr_name} <REPS> <CHAR> (use --help for detailed guide)"
  # scr_guide="$(print_guide)"
  exit_code=0
  expected_args=2
  pad=2
  msg=""
  newlines=1
}

parse_arguments() {
  #@ Script Options
  for arg in "$@"; do
    case "${arg}" in
    -h) print_usage 0 ;;
    --help) print_guide ;;
    *)
      # Add other options
      ;;
    esac
  done

  #@ Ensure a valid number of args is providied
  [ "$#" -ge "${expected_args}" ] || print_usage --args "$#"

  #@ Process Options
  while [ "$#" -ge 1 ]; do
    case "$1" in
    --head*)
      pad=2
      sep=":-"
      msg="$(
        padded_print="$(pout_padded "$2" "${pad}" || true)"
        printf "\n%s%s" "${padded_print}" "${sep}"
      )"
      printf "%s\n" "${msg}"
      ;;
    --info*)
      pad=4
      msg="$(
        padded_print="$(pout_padded "$2" "${pad}" || true)"
        printf "%s" "${padded_print}"
      )"
      printf "%s\n" "${msg}"
      ;;
    --blank | --new-lines)
      if is_positive_int "$2" >/dev/null 2>&1; then
        newline="$2"
        shift
      else
        newline=2
      fi
      ;;
    *) ;;
    esac
    shift
  done
}

init_utilities() {
  is_positive_int() {
    printf "%s" "$1" | grep -qE '^[1-9][0-9]*$'
  }

  pout_repeat() {
    CMD_POUT_REPEAT="${CMD_POUT_REPEAT:-"$(
      command -v pout-repeat || printf "%s" "${scr_home}/pout-repeat"
    )"}"
    if [ -x "${CMD_POUT_REPEAT}" ]; then
      "${CMD_POUT_REPEAT}" "$@"
    else
      repetitions="$1"
      pattern="$2"
      i=0
      while [ "${i}" -lt "${repetitions}" ]; do
        #@ Use %b to interpret escape sequences
        printf "%b" "${pattern}"
        i=$((i + 1))
      done
    fi
  }

  pout_section() {
    CMD_POUT_SECTION="${CMD_POUT_SECTION:-"$(
      command -v pout-section || printf "%s" "${scr_home}/pout-section"
    )"}"
    echo "${CMD_POUT_SECTION}"
    if [ -x "${CMD_POUT_SECTION}" ]; then
      "${CMD_POUT_SECTION}" "$@"
    else
      while [ "$#" -ge 1 ]; do
        case "$1" in
        --head*)
          pad=2
          sep=":-"
          msg="$(pout_padded "$2" "${pad}" || printf "%s" "$2")"
          padded_print="$(pout_padded "$2" "${pad}" || printf "%s" "$2")"
          printf "\n%s%s\n" "${padded_print}" "${sep}"
          ;;
        --info*)
          pad=4
          printf "%*s%s\n" "${pad}" "" "$2"
          ;;
        *) ;;
        esac
        shift
      done
    fi
  }

  pout_padded() {
    if is_positive_int "$2" >/dev/null 2>&1; then
      pad="$2"
    else
      pad=4
    fi

    printf "%*s%s" "${pad}" "" "$1"
  }
}

# print_section() {
#   while [ "$#" -ge 1 ]; do
#     case "$1" in
#     --head*)
#       pad=2
#       sep=":-"
#       msg="$(pout_padded "$2" "${pad}" || printf "%s" "$2")"
#       padded_print="$(pout_padded "$2" "${pad}" || printf "%s" "$2")"
#       printf "\n%s%s\n" "${padded_print}" "${sep}"
#       ;;
#     --info*)
#       pad=4
#       printf "%*s%s\n" "${pad}" "" "$2"
#       ;;
#     *) ;;
#     esac
#     shift
#   done
# }

print_guide() {
  printf "%s [ v.%s]\n" "${scr_name}" "${scr_version}"
  print_section \
    --head "Description" \
    --info "${src_description}"
  print_section \
    --head "Arguments" \
    --info "-r --reps  <REPS>    Times to repeat the pattern" \
    --info "-p --char  <CHAR>    Character/pattern to repeat" \
    --info "-l --line  [REPS]    Template: blank lines (Default: 1)" \
    --info "-s --space [REPS]    Template: whitespaces (Default: 1)"

  print_section \
    --head "Parameters" \
    --info "REPS  Positive integer (eg. 1, 2, 15, etc)" \
    --info 'CHAR  Any character or pattern (eg. *, -_, \n, \t, etc)'
  exit 0
}

print_usage() {
  exit_code=1

  while [ "$#" -ge 1 ]; do
    case "$1" in
    --args)
      msg="$(
        printf "Incorrect number of arguments. " >&2
        printf "Expected at least %s but got %s\n" "${expected_args}" "$2" >&2
      )"
      ;;
    --pos)
      msg="$(
        printf "Unable to distinguih the pattern from the number of repetitions\n" >&2
      )"
      ;;
    --reps)
      msg="$(printf "Number of repetitions not defined\n" >&2)"
      ;;
    *) exit_code="$1" ;;
    esac
    shift
  done

  if [ "${exit_code}" -gt 0 ] && [ -n "${msg}" ]; then
    printf "ERROR: %s\n%s" "${msg}" "${scr_usage}" >&2
  else
    printf "%s" "${scr_usage}"
  fi

  exit "${exit_code}"
}

execute_process() {
  # printf "%s\n" "${msg}"
  # pout_repeat 1 "${msg}"
  # pout_repeat --line "${newline:-1}"
  while [ "$#" -ge 1 ]; do
    case "$1" in
    --head)
      str="$2"
      pad=2
      sep=":-"
      printf "\n%*s%s%s\n" "${pad}" "" "${str}" "${sep}"
      ;;
    --info)
      pad=4
      printf "%*s%s\n" "${pad}" "" "$2"
      ;;
    *) ;;
    esac
    shift
  done
}

main "$@"
