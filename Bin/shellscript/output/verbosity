#!/bin/sh

#~@ Main function
main() {
  set_defaults
  parse_arguments "$@"
  validate_default
  set_input_default
  convert_to_lowercase
  handle_verbosity_patterns
}

#~@ Set all defaults and initialize variables
set_defaults() {
  #~@ Environment variable defaults
  : "${VERBOSITY:="3"}"
  : "${VERBOSITY_QUIET:="0"}"
  : "${VERBOSITY_ERROR:="1"}"
  : "${VERBOSITY_WARN:="2"}"
  : "${VERBOSITY_INFO:="3"}"
  : "${VERBOSITY_DEBUG:="4"}"
  : "${VERBOSITY_TRACE:="5"}"

  #~@ Check for lowercase override (in-script override takes precedence)
  if [ -n "${verbosity:-}" ]; then
    VERBOSITY="${verbosity}"
  fi

  #~@ Script variables
  input=""
  default="3"
  operation=""
}

#DOC Utility function to check if a value is truthy
#~@ Returns 0 (true) for truthy values, 1 (false) for falsy values
is_truthy() {
  case "${1:-}" in
  1 | [Tt][Rr][Uu][Ee] | [Yy][Ee][Ss] | [Oo][Nn] | [Ee][Nn][Aa][Bb][Ll][Ee][Dd]) return 0 ;;
  *) return 1 ;;
  esac
}

#DOC Check for implicit verbosity environment variables
#~@ Scans for common verbosity-related environment variables (lowercase takes priority)
check_implicit_verbosity() {
  #~@ Check for various verbosity indicators in order of priority
  #~@ Always check lowercase first, then uppercase
  if is_truthy "${silent:-${SILENT:-}}"; then
    printf "0"
  elif is_truthy "${quiet:-${QUIET:-}}"; then
    printf "0"
  elif is_truthy "${error:-${ERROR:-}}"; then
    printf "1"
  elif is_truthy "${err:-${ERR:-}}"; then
    printf "1"
  elif is_truthy "${warn:-${WARN:-}}"; then
    printf "2"
  elif is_truthy "${warning:-${WARNING:-}}"; then
    printf "2"
  elif is_truthy "${info:-${INFO:-}}"; then
    printf "3"
  elif is_truthy "${normal:-${NORMAL:-}}"; then
    printf "3"
  elif is_truthy "${debug:-${DEBUG:-}}"; then
    printf "4"
  elif is_truthy "${verbose:-${VERBOSE:-}}"; then
    printf "4"
  elif is_truthy "${trace:-${TRACE:-}}"; then
    printf "5"
  elif is_truthy "${high:-${HIGH:-}}"; then
    printf "5"
  else
    printf ""
  fi
}

#~@ Parse command line arguments
parse_arguments() {
  while [ ${#} -gt 0 ]; do
    case "${1}" in
    -q | --quiet)
      input="0"
      shift
      ;;
    -1 | --dec | --decrement)
      operation="decrement"
      shift
      ;;
    +1 | --inc | --increment)
      operation="increment"
      shift
      ;;
    +[0-9]*)
      operation="increment"
      input="${1#+}"
      shift
      ;;
    -[0-9]*)
      operation="decrement"
      input="${1#-}"
      shift
      ;;
    -l | --level)
      if [ -n "${2}" ] && [ "${2#-}" = "${2}" ]; then
        input="${2}"
        shift 2
      else
        printf "Error: --level requires a value\n" >&2
        exit 1
      fi
      ;;
    -d | --default)
      if [ -n "${2}" ] && [ "${2#-}" = "${2}" ]; then
        default="${2}"
        shift 2
      else
        printf "Error: --default requires a value\n" >&2
        exit 1
      fi
      ;;
    -h | --help)
      show_usage
      exit 0
      ;;
    --version)
      printf "verbosity 1.1.0\n"
      exit 0
      ;;
    --level=*)
      input="${1#*=}"
      shift
      ;;
    --default=*)
      default="${1#*=}"
      shift
      ;;
    -*)
      printf "Error: Unknown option %s\n" "${1}" >&2
      exit 1
      ;;
    *)
      #~@ Positional arguments (backwards compatibility)
      if [ -z "${input}" ] && [ -z "${operation}" ]; then
        input="${1}"
      elif [ "${default}" = "3" ]; then
        default="${1}"
      fi
      shift
      ;;
    esac
  done
}

#~@ Validate default parameter
validate_default() {
  case "${default}" in
  '' | *[!0-9]*)
    printf "Error: Default must be numeric (0-5), got: %s\n" "${default}" >&2
    exit 1
    ;;
  *)
    if [ "${default}" -lt 0 ]; then
      default="0"
    elif [ "${default}" -gt 5 ]; then
      default="5"
    fi
    ;;
  esac
}

#~@ Set input default if not provided
set_input_default() {
  #~@ If no input provided and no operation, use environment variables with proper precedence
  if [ -z "${input}" ] && [ -z "${operation}" ]; then
    #~@ Check implicit verbosity environment variables first
    implicit_level="$(check_implicit_verbosity)"
    if [ -n "${implicit_level}" ]; then
      input="${implicit_level}"
    else
      #~@ Use explicit verbosity with lowercase override taking precedence
      #~@ Note: verbosity needs to be exported to be seen by child processes
      input="${verbosity:-${VERBOSITY:-3}}"
    fi
  fi
}

#~@ Convert input to lowercase using only shell builtins
convert_to_lowercase() {
  case "${input}" in
  *[ABCDEFGHIJKLMNOPQRSTUVWXYZ]*)
    #~@ Convert manually on the most common patterns first
    case "${input}" in
    ERROR | ERR | RED) input="error" ;;
    WARN* | ORANGE | YELLOW) input="warn" ;;
    INFO* | BLUE) input="info" ;;
    DEBUG | GREEN) input="debug" ;;
    TRACE | MAGENTA) input="trace" ;;
    QUIET | SILENT | OFF | FALSE | GRAY | GREY) input="quiet" ;;
    *) input="$(printf '%s' "${input}" | tr '[:upper:]' '[:lower:]')" ;;
    esac
    ;;
  *) ;;
  esac
}

#DOC Handle increment/decrement operations
#~@ Performs mathematical operations on current verbosity level
handle_operation() {
  #~@ Get current level with proper precedence (lowercase override first)
  current_level="${verbosity:-${VERBOSITY:-3}}"

  #~@ Convert current level to numeric if it's named
  case "${current_level}" in
  [0-5]) numeric_current="${current_level}" ;;
  *)
    #~@ Handle named levels
    case "${current_level}" in
    ERROR | ERR | RED | error | err | red) numeric_current="1" ;;
    WARN* | ORANGE | YELLOW | warn* | orange | yellow) numeric_current="2" ;;
    INFO* | BLUE | info* | blue) numeric_current="3" ;;
    DEBUG | GREEN | debug | green) numeric_current="4" ;;
    TRACE | MAGENTA | trace | magenta) numeric_current="5" ;;
    QUIET | SILENT | OFF | FALSE | GRAY | GREY | quiet | silent | off | false | gray | grey) numeric_current="0" ;;
    *) numeric_current="3" ;; #~@ Default to INFO level
    esac
    ;;
  esac

  #~@ Apply operation
  case "${operation}" in
  increment)
    if [ -n "${input}" ]; then
      #~@ Increment by specified amount
      result="$((numeric_current + input))"
    else
      #~@ Increment by 1
      result="$((numeric_current + 1))"
    fi
    ;;
  decrement)
    if [ -n "${input}" ]; then
      #~@ Decrement by specified amount
      result="$((numeric_current - input))"
    else
      #~@ Decrement by 1
      result="$((numeric_current - 1))"
    fi
    ;;
  *)
    result="${numeric_current}"
    ;;
  esac

  #~@ Clamp to valid range (0-5)
  if [ "${result}" -lt 0 ]; then
    result="0"
  elif [ "${result}" -gt 5 ]; then
    result="5"
  fi

  printf "%d" "${result}"
}

#~@ Handle verbosity patterns and output result
handle_verbosity_patterns() {
  #~@ Handle increment/decrement operations first
  if [ -n "${operation}" ]; then
    handle_operation
    return
  fi

  case "${input}" in
  0 | none | off | quiet | silent | false | gray | grey) printf "0" ;;
  1 | err* | low | red) printf "1" ;;
  2 | warn* | medium | orange | yellow) printf "2" ;;
  3 | info* | normal | blue) printf "3" ;;
  4 | debug | verbose | on | green) printf "4" ;;
  5 | trace | high | magenta) printf "5" ;;
  -) printf "0" ;;
  -[0-9]* | [0-9]*)
    #~@ Extract numeric part and validate
    case "${input}" in
    *[!0-9-]* | --*) printf "%d" "${default}" ;;
    *)
      if [ "${input}" -lt 0 ]; then
        printf "0"
      elif [ "${input}" -gt 5 ]; then
        printf "5"
      else
        printf "%d" "${input}"
      fi
      ;;
    esac
    ;;
  *)
    #~@ Return default for any unrecognized input
    printf "%d" "${default}"
    ;;
  esac
}

#~@ Show usage information
show_usage() {
  cat <<'EOF'
Usage: verbosity [OPTIONS] [LEVEL] [DEFAULT_LEVEL]

Parse and normalize verbosity levels to numeric values (0-5).

OPTIONS:
  -l, --level LEVEL       Set verbosity level
  -d, --default LEVEL     Set default level (default: 3)
  -q, --quiet             Set level to quiet (0)
  -1, --dec, --decrement  Decrement current verbosity level by 1
  +1, --inc, --increment  Increment current verbosity level by 1
  +N                      Increment current level by N steps
  -N                      Decrement current level by N steps
  --version               Show version information
  -h, --help             Show this help message

LEVEL can be:
  - Numeric: 0-5 (clamped to range)
  - Named: quiet/silent/off, error/err, warn, info/normal, debug/verbose, trace/high
  - Colors: gray/grey=quiet, red=error, orange/yellow=warn, blue=info, green=debug, magenta=trace
  - Case insensitive

ENVIRONMENT VARIABLES:
  VERBOSITY           Global verbosity level (default: 3)
  verbosity           In-script override (takes precedence over VERBOSITY)
                      Note: Must be exported or set inline: export verbosity=2 OR verbosity=2 ./script
  VERBOSITY_*         Level definitions (QUIET=0, ERROR=1, etc.)

  Implicit verbosity variables (lowercase takes priority over uppercase):
  silent/SILENT, quiet/QUIET           Set level to 0 (quiet)
  error/ERROR, err/ERR                 Set level to 1 (error)
  warn/WARN, warning/WARNING           Set level to 2 (warn)
  info/INFO, normal/NORMAL             Set level to 3 (info)
  debug/DEBUG, verbose/VERBOSE         Set level to 4 (debug)
  trace/TRACE, high/HIGH               Set level to 5 (trace)

EXAMPLES:
  verbosity                         # Use environment variable or default (3)
  verbosity 4                       # Set to level 4
  verbosity --level debug --default 2
  verbosity -l red -d blue
  verbosity --level=green
  verbosity -q                      # Set to quiet
  verbosity -1                      # Decrement current level by 1
  verbosity +2                      # Increment current level by 2 steps

  # Environment variable examples:
  VERBOSITY=debug verbosity -1                    # Decrement from debug (4) to info (3)
  export verbosity=2; verbosity +1               # Increment from 2 to 3 (exported lowercase)
  verbosity=2 verbosity +1                       # Inline: Increment from 2 to 3
  debug=1 verbosity                              # Use implicit debug variable (level 4)
  export quiet=true; verbosity                   # Use implicit quiet variable (level 0)
  DEBUG=1 debug=0 verbosity                      # lowercase debug=0 overrides DEBUG=1 (level 0)

EXIT CODES:
  0 - Success
  1 - Invalid argument or option
EOF
}

#~@ Execute main function with all arguments
main "$@"
