#!/bin/sh

#DOC Print tagged output with context, tag, and message formatting.
#DOC
#DOC Description:
#DOC   Outputs formatted messages with context and tag information.
#DOC   Handles multi-line messages and provides consistent formatting.
#DOC
#DOC Arguments:
#DOC   --ctx CONTEXT    The context/function name for the message
#DOC   --tag TAG        The message tag (ERROR, WARN, INFO, DEBUG, etc.)
#DOC   --msg MESSAGE    The message content to display
#DOC
#DOC Examples:
#DOC   pout-tagged --ctx "locate_dots" --tag "DEBUG" --msg "Found RC file: /path/to/file"
#DOC   pout-tagged --ctx "manage_env" --tag "ERROR" --msg "Variable name is required"

#{ Initialize with defaults }
scr_path="$0"                #? Script path
scr_name="${scr_path##*/}"   #? Filename without path
delimiter="$(printf "\037")" #? ASCII Unit Separator
tag="[DEBUG]" msg="" ctx=""
: "${ctx_head_sep:=" >>= "}"
: "${ctx_tail_sep:=" =<< "}"

#{ Parse named arguments }
while [ $# -gt 0 ]; do
  case "${1}" in
  --ctx=*) ctx="${1#--ctx=}" ;;
  --ctx)
    if [ "$#" -gt 1 ]; then
      ctx="$2"
      shift
    else
      printf "Error: Missing value for %s\n" "$1" >&2
      return 1
    fi
    ;;
  --tag=*) tag="${1#--tag=}" ;;
  --tag)
    if [ "$#" -gt 1 ]; then
      tag="$2"
      shift
    else
      printf "Error: Missing value for %s\n" "$1" >&2
      return 1
    fi
    ;;
  --tag-head-sep=*) ctx_head_sep="${1#--ctx_head_sep=}" ;;
  --tag-head-sep)
    if [ $# -gt 1 ]; then
      ctx_head_sep="$2"
      shift
    else
      printf "Error: Missing value for %s\n" "$1" >&2
      return 1
    fi
    ;;
  --tag-tail-sep=*) ctx_tail_sep="${1#--ctx_tail_sep=}" ;;
  --tag-tail-sep)
    if [ $# -gt 1 ]; then
      ctx_tail_sep="$2"
      shift
    else
      printf "Error: Missing value for %s\n" "$1" >&2
      return 1
    fi
    ;;
  --msg=*) msg="${1#--msg=}" ;;
  --msg)
    if [ $# -gt 1 ]; then
      msg="${msg}${msg:+${delimiter}}$(printf "%b" "$2")"
      shift
    else
      printf "[Error] Missing value for --msg\n" >&2
      return 1
    fi
    ;;
  --)
    #{ End of options, remaining args become message }
    shift
    msg="$*"
    break
    ;;
  --*) ;; #? Unknown option, ignore
  *)
    msg="${msg}${msg:+${delimiter}}$(printf "%b" "$1")"
    ;;
  esac
  shift
done

#{ Return early if no message is provided
if [ -z "${msg}" ]; then
  exit 1
fi

#{ Update the context
ctx="${ctx_head_sep}${ctx-"${scr_name}"}${ctx_tail_sep}"

#{ Return early if verbosity is too low }
case "${tag}" in
*TRACE*) if [ "${VERBOSITY:-0}" -lt "${VERBOSITY_TRACE:-5}" ]; then exit 0; fi ;;
*DEBUG*) if [ "${VERBOSITY:-0}" -lt "${VERBOSITY_DEBUG:-4}" ]; then exit 0; fi ;;
*INFO*) if [ "${VERBOSITY:-0}" -lt "${VERBOSITY_INFO:-3}" ]; then exit 0; fi ;;
*WARN*) if [ "${VERBOSITY:-0}" -lt "${VERBOSITY_WARN:-2}" ]; then exit 0; fi ;;
*ERROR*) if [ "${VERBOSITY:-0}" -lt "${VERBOSITY_ERROR:-1}" ]; then exit 0; fi ;;
*) if [ "${VERBOSITY:-0}" -lt "${VERBOSITY_QUIET:-0}" ]; then exit 0; fi ;;
esac

#{ Bound the tag in square brackets, if not already }
case "${tag}" in \[*\]) ;; *) tag="[${tag}]" ;; esac
tag="$(printf "%s" "${tag}" | tr '[:lower:]' '[:upper:]')"

#{ Format and print the message }
ifs="${IFS}"
IFS="${delimiter}"
# shellcheck disable=SC2086
set -- ${msg}
printf "%s%s%b\n" "${tag}" "${ctx}" "$@"
IFS="${ifs}"
