#!/bin/sh
# shellcheck disable=SC2249
app_path="${0}"
app_name="${app_path##*/}"

#DOC >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>-
#DOC delim - Standardize delimiter-separated strings
#DOC >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>-
#DOC
#DOC Description:
#DOC   A POSIX-compliant utility that normalizes strings containing mixed delimiters
#DOC   into a consistently formatted string with a single delimiter. It handles
#DOC   various input formats, removes comments, invisible/control characters, and cleans whitespace.
#DOC
#DOC Usage:
#DOC   delim [OPTIONS] <INPUT_STRING>
#DOC
#DOC Options:
#DOC   -h, --help           Show this help message
#DOC   -i, --in-delimiter   Set input delimiter for parsing (auto-detected if omitted)
#DOC   -o, --out-delimiter  Set output delimiter (default: ASCII Unit Separator \037)
#DOC   -t, --trim           Remove leading/trailing delimiters from output
#DOC   -n, --no-empty       Remove empty elements from output
#DOC
#DOC Arguments:
#DOC   INPUT_STRING         The string to normalize and delimit
#DOC
#DOC Input Format Support:
#DOC   - Space-separated:   "item1 item2  item3"
#DOC   - Comma-separated:   "item1,item2, item3"
#DOC   - Pipe-separated:    "item1|item2 | item3"
#DOC   - Colon-separated:   "item1:item2 : item3"
#DOC   - Mixed delimiters:  "item1,item2|item3:item4 item5"
#DOC   - Multi-line:        "item1\nitem2\nitem3"
#DOC
#DOC Comment Handling:
#DOC   - Full-line comments:     "# This is ignored"
#DOC   - Inline comments:        "item1 #comment"
#DOC   - Documentation comments: "#? This is ignored"
#DOC
#DOC Cleaning Features:
#DOC   - Strips carriage returns (CR)
#DOC   - Normalizes all whitespace (spaces, tabs, newlines) to a standard delimiter
#DOC   - Removes invisible Unicode characters (e.g., ZERO WIDTH SPACE, LRM, RLM, etc.)
#DOC   - Replaces all ASCII control characters (except newline) with the output delimiter
#DOC
#DOC Examples:
#DOC   # Basic usage with auto-detection
#DOC   delim "a, b | c:d"                   # Output: a${delimiter}b${delimiter}c${delimiter}d
#DOC
#DOC   # Custom output delimiter
#DOC   delim -o "," "a b c"                 # Output: a,b,c
#DOC
#DOC   # Specify input and output delimiters
#DOC   delim -i "|" -o ";" "a|b|c"          # Output: a;b;c
#DOC
#DOC   # Multi-line with comments
#DOC   delim "
#DOC     item1
#DOC     item2 #? Comment
#DOC     # Ignored line
#DOC     item3
#DOC   "                                    # Output: item1${delimiter}item2${delimiter}item3
#DOC
#DOC   # Remove empty elements and trim
#DOC   delim -n -t -o "|" "|a||b|c|"        # Output: a|b|c
#DOC
#DOC   # Clean invisible characters
#DOC   delim "a​b​c​"                        # Output: a${delimiter}b${delimiter}c
#DOC
#DOC Environment Variables:
#DOC   IN_DELIMITER         Default input delimiter (auto-detected if unset)
#DOC   OUT_DELIMITER        Default output delimiter (falls back to \037)
#DOC
#DOC Exit Status:
#DOC   0  Success
#DOC   1  Invalid arguments or processing error
#DOC
#DOC Notes:
#DOC   - The default output delimiter is ASCII Unit Separator (037) which is rarely
#DOC     used in normal text, making it ideal for safe separation
#DOC   - Input delimiter is auto-detected in order: newlines, spaces, commas, pipes, colons
#DOC   - Empty elements are preserved by default (use -n to remove)
#DOC   - Leading/trailing whitespace is always removed from individual elements
#DOC   - Inline and full-line comments are removed before parsing
#DOC   - Invisible Unicode and ASCII control characters are stripped or replaced
#DOC
#DOC Authors:
#DOC   Craig 'Craole' Cole <cc@craole.com>
#DOC
#DOC License:
#DOC   MIT License
#DOC
#DOC Repository:
#DOC   https://github.com/craole-cc/dotfiles
#DOC
#DOC >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>-

main() {
  set_defaults
  parse_arguments "$@"

  case "${simulate}" in
  1 | true | yes | on) execute_tests ;;
  *) execute_process ;;
  esac
}

set_defaults() {
  : "${IN_DELIMITER:=""}"
  : "${OUT_DELIMITER:="$(printf '\037')"}"
  simulation_delimiter="$(printf '+')"
  trim=false
  no_empty=false
  human=true
  simulate=false
  debug=false
  input=""
}

parse_arguments() {
  while [ $# -gt 0 ]; do
    case "$1" in
    -h | --help) usage ;;
    --simulate | --test) simulate=true ;;
    -D | --debug) debug=true ;;
    -H | --human) human=true ;;
    -i | --in-delimiter)
      IN_DELIMITER=$2
      shift
      ;;
    -o | --out-delimiter)
      OUT_DELIMITER=$2
      human=false
      shift
      ;;
    -t | --trim) trim=true ;;
    -n | --no-empty) no_empty=true ;;
    *) input="${input}${input:+ }$1" ;;
    esac
    shift
  done

  #{ Auto-detect delimiter }
  if [ -z "${IN_DELIMITER}" ]; then
    case "${input}" in
    *"
  "*) IN_DELIMITER="$(printf '\n')" ;;
    *[![:space:]][[:space:]][![:space:]]*) IN_DELIMITER=" " ;;
    *,*) IN_DELIMITER="," ;;
    *\|*) IN_DELIMITER="|" ;;
    *:*) IN_DELIMITER=":" ;;
    *) IN_DELIMITER="${OUT_DELIMITER}" ;;
    esac
  fi

  #{ Update delimiter if we're simulating }
  case "${human:-}" in
  1 | true | yes | on) OUT_DELIMITER="$(printf ' ')" ;;
  esac
}

execute_process() {
  #{ Define an intermediate delimiter }
  tmp_delim="$(printf '\034')" #? ASCII FS (File Separator)

  #{ Clean comments, normalize whitespace, convert all delimiters to the intermediate one }
  cleaned="$(
    printf '%s\n' "${input}" |
      sed -e '
      #{ Step 1: Remove full-line comments (lines starting with # and optional whitespace) }
      /^[[:space:]]*#/d

      #{ Step 2: Remove inline comments (everything after #) }
      s/#.*$//

      #{ Step 3: Trim leading/trailing whitespace }
      s/^[[:space:]]*//; s/[[:space:]]*$//

      #{ Step 4: Remove empty lines }
      /^[[:space:]]*$/d

      #{ Step 5: Remove carriage returns (CR) }
      s/\x0D//g

      #{ Step 6: Replace ASCII control characters (excluding LF) with the intermediate delimiter }
      s/[\x00-\x09\x0B-\x0C\x0E-\x1F\x7F]/'"${tmp_delim}"'/g

      #{ Step 7: Normalize delimiters (space, comma, pipe, colon) }
      s/[[:space:],|:][[:space:]]*/'"${tmp_delim}"'/g
    ' |

      #{ Step 8: Remove Unicode invisibles encoded directly (copy-paste-safe) }
      awk -v d="${tmp_delim}" '
        BEGIN {
          #? zero-width space, non-joiner, joiner, LRM, RLM, NBSP, soft hyphen
          split("​‌‍‎‏ ­", invis)
        }
        {
          line = $0
          for (i in invis) {
            gsub(invis[i], d, line)
          }
          printf "%s\n", line
        }
      ' |

      #{ Step 7: Flatten lines by converting newlines to temporary delimiter }
      #? Ensures line-separated values are treated like delimited ones
      tr '\n' "${tmp_delim}" |

      #{ Step 9: Trim trailing delimiters }
      sed 's/'"${tmp_delim}"'\+$//'
  )"

  #{ Convert to final output delimiter }
  result="$(
    printf '%s' "${cleaned}" | sed "s/${tmp_delim}/${OUT_DELIMITER}/g"
  )"

  #{ Trim delimiters }
  case "${trim:-}" in
  true | 1 | yes | on)
    result="$(
      printf '%s' "${result}" |
        sed 's/^'"${OUT_DELIMITER}"'\+//; s/'"${OUT_DELIMITER}"'\+$//'
    )" || return 1
    ;;
  *) ;;
  esac

  #{ Remove empty elements }
  case "${no_empty:-}" in
  true | 1 | yes | on)
    result="$(
      printf '%s' "${result}" |
        sed 's/'"${OUT_DELIMITER}"'\{2,\}/'"${OUT_DELIMITER}"'/g'
    )" || return 1
    ;;
  *) ;;
  esac

  #{ Return the processed list }
  printf '%s\n' "${result}"
}

execute_tests() {
  printf "Running tests...\n\n"

  test_case() {
    #{ Initialize variables}
    IN_CAPTURED="" OUT_CAPTURED="" expected="" actual=""
    desc=$1
    expected=$2
    shift 2

    #{ Inject a dry-run to capture delimiter values if simulate/debug is not already on }
    actual=$(${app_path} "$@" 2>&1)

    #{ Set defaults and parse args }
    set_defaults || true
    parse_arguments "$@" || true

    #{ Show delimiter values }
    show_delim() {
      case "$1" in
      " ") printf "' '" ;;
      "\n") printf "'\\n'" ;;
      "\037") printf "'\\037'" ;; # US (default)
      "${simulation_delimiter}") printf "'%s' (sim)" "${simulation_delimiter}" ;;
      "") printf "(auto)" ;;
      *) printf "'%s'" "$1" ;;
      esac
    }

    #{ Capture IN and OUT delimiter interpretation }
    IN_CAPTURED="$(show_delim "${IN_DELIMITER}")"
    OUT_CAPTURED="$(show_delim "${OUT_DELIMITER}")"

    #{ Print results }
    printf "TEST        |=> %s\n" "${desc}"
    printf "CMD         |=> %s %s\n" "${app_name}" "$*"
    printf "IN_DELIM    |=> %s\n" "${IN_CAPTURED}"
    printf "OUT_DELIM   |=> %s\n" "${OUT_CAPTURED}"
    printf "EXPECTED    |=> %s\n" "${expected}"
    printf "ACTUAL      |=> %s\n" "${actual}"
    if [ "${expected}" = "${actual}" ]; then
      test_status="[MARK]"
    else
      test_status="[FATAL]"
    fi
    printf "STATUS      |=> %s\n\n" "${test_status}"

    #{ Cleanup }
    unset desc expected actual status
    unset IN_CAPTURED OUT_CAPTURED
  }

  #{ Basic auto-detection tests }
  test_case "Space-separated input" "a b c" "a b  c"
  test_case "Comma-separated input" "a b c" "a,b, c"
  test_case "Pipe-separated input" "a b c" "a b c"
  test_case "Colon-separated input" "a:b:c" --out-delimiter ":" " a    b c"
  test_case "Mixed delimiters" "a b c d" "a, b | c:d"
  test_case "Newline-separated input" "a b c" "a\nb\nc"

  #{ Comment handling }
  test_case "Ignore full-line comments" "a b c" -H "a\n# comment\nb\nc"
  test_case "Ignore inline comments" "a b c" -H "a # inline\nb #x\nc"
  test_case "Ignore doc-comments" "a b" -H "a\n#? doc\nb"

  #{ Trimming and empty element removal }
  test_case "Trim leading/trailing delimiters" "a b c" -H -t "  a b c  "
  test_case "No empty elements" "a b c" -H -n "a  b   c"
  test_case "Trim + no-empty with pipes" "a b c" -H -t -n "|a||b|c|"

  #{ Custom delimiters }
  test_case "Custom output delimiter (;)" "a;b;c" -i "," -o ";" "a,b,c"
  test_case "Custom input & output delimiter" "a.b.c" -i "|" -o "." "a|b|c"

  #{ Human-friendly output }
  test_case "Human output spacing" "a b c" -H "a,b|c"
  test_case "Human + trimmed" "a b c" -H -t " a  b   c  "

  #{ Unicode and invisible chars }
  test_case "Remove non-visible Unicode" "a b c" -H "$(printf 'a\u200Bb\u2060c')"
  test_case "Control chars cleaned" "a b c" -H "$(printf 'a\001b\002c')"

  #{ Multi-line & complex input }
  test_case "Complex multi-line input" "x y z w" -H "
    x
    # ignore
    y # inline
    #? doc
    z
    w
  "

  #{ Error/edge cases }
  test_case "Only comments" "" -H "# test\n#?"
  test_case "Empty input string" "" ""
  test_case "Whitespace-only input" "" -H "    "
}

#{ Allow script to be sourced without executing it }
case "${app_name}" in
delim)
  # shellcheck disable=SC2249
  case "${1:-}" in
  -h | --help)
    sed -n 's/^#DOC[[:space:]]*//p' "${app_path}"
    exit 0
    ;;
  esac

  #{ Run the main function }
  case "${TEST:-}" in
  1 | true | yes | on) execute_tests ;;
  *) main "$@" ;;
  esac
  ;;
*) return 0 ;;
esac
