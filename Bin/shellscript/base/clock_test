#!/bin/sh
#
# Clock Utility Test Suite
# Comprehensive tests for the Clock POSIX Duration and Timestamp Utility
#
# Author: Craig 'Craole' Cole
# Copyright: (c) Craig 'Craole' Cole, 2025. All rights reserved.
# License: MIT License
#
# Usage: ./test_clock.sh [test_pattern]

#region Configuration

#| Test configuration
TEST_SCRIPT="clock_test"
TEST_TARGET="${TEST_TARGET:-"$(dirname "$0")/clock"}"
TEST_VERBOSE="${TEST_VERBOSE:-0}"
TEST_PATTERN="${1:-.*}"

#| Colors for output (if terminal supports it)
if [ -t 1 ] && command -v tput >/dev/null 2>&1; then
  RED="$(tput setaf 1)"
  GREEN="$(tput setaf 2)"
  YELLOW="$(tput setaf 3)"
  BLUE="$(tput setaf 4)"
  RESET="$(tput sgr0)"
else
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  RESET=""
fi

#| Test counters
TESTS_RUN=0
TESTS_PASSED=0
TESTS_FAILED=0
TESTS_SKIPPED=0

main() {
  printf "%sClock Utility Test Suite%s\n" "${BLUE}" "${RESET}"
  printf "Testing script: %s\n" "${TEST_TARGET}"
  if [ -n "${TEST_PATTERN}" ] && [ "${TEST_PATTERN}" != ".*" ]; then
    printf "Test pattern: %s\n" "${TEST_PATTERN}"
  fi
  printf "\n"

  #~@ Setup
  setup_test_environment

  #~@ Run all tests
  # run_test "help_option" test_help_option
  # run_test "help_short_option" test_help_short_option
  # run_test "timestamp_default" test_timestamp_default
  # run_test "timestamp_iso" test_timestamp_iso
  # run_test "timestamp_custom_format" test_timestamp_custom_format

  # run_test "duration_simple_command" test_duration_simple_command
  # run_test "duration_compact_format" test_duration_compact_format
  # run_test "duration_verbose_format" test_duration_verbose_format
  # run_test "duration_with_label" test_duration_with_label
  # run_test "duration_command_exit_code" test_duration_command_exit_code

  # run_test "invalid_option" test_invalid_option
  # run_test "missing_format_value" test_missing_format_value
  # run_test "missing_label_value" test_missing_label_value
  # run_test "conflicting_options_compact_verbose" test_conflicting_options_compact_verbose
  # run_test "conflicting_options_timestamp_duration" test_conflicting_options_timestamp_duration
  # run_test "duration_without_command" test_duration_without_command

  # run_test "custom_duration_units" test_custom_duration_units
  # run_test "custom_verbose_language" test_custom_verbose_language
  # run_test "custom_timestamp_format" test_custom_timestamp_format
  run_test "show_icon_env" test_show_icon_env

  run_test "dry_run" test_dry_run
  run_test "icon_option" test_icon_option
  run_test "show_icon_option" test_show_icon_option
  run_test "command_with_arguments" test_command_with_arguments
  run_test "command_with_pipes" test_command_with_pipes

  run_test "very_fast_command" test_very_fast_command
  run_test "command_with_spaces" test_command_with_spaces
  run_test "empty_command_argument" test_empty_command_argument
  run_test "multiple_timestamp_calls" test_multiple_timestamp_calls

  run_test "real_world_scenario_1" test_real_world_scenario_1
  run_test "real_world_scenario_2" test_real_world_scenario_2
  run_test "real_world_scenario_3" test_real_world_scenario_3

  #~@ Cleanup
  cleanup_test_environment

  #~@ Print summary and exit with appropriate code
  print_test_summary
}

#endregion

#region Test Framework

print_status() {
  status="$1"
  test_name="$2"
  message="${3:-}"

  case "${status}" in
  PASS)
    printf "%s[PASS]%s %s\n" "${GREEN}" "${RESET}" "${test_name}"
    TESTS_PASSED=$((TESTS_PASSED + 1))
    ;;
  FAIL)
    printf "%s[FAIL]%s %s" "${RED}" "${RESET}" "${test_name}"
    if [ -n "${message}" ]; then
      printf " - %s" "${message}"
    fi
    printf "\n"
    TESTS_FAILED=$((TESTS_FAILED + 1))
    ;;
  SKIP)
    printf "%s[SKIP]%s %s" "${YELLOW}" "${RESET}" "${test_name}"
    if [ -n "${message}" ]; then
      printf " - %s" "${message}"
    fi
    printf "\n"
    TESTS_SKIPPED=$((TESTS_SKIPPED + 1))
    ;;
  INFO | *)
    printf "%s[INFO]%s %s\n" "${BLUE}" "${RESET}" "${test_name}"
    ;;
  esac
}

run_test() {
  test_name="$1"
  test_func="$2"

  #~@ Check if test matches pattern
  if ! printf "%s" "${test_name}" | grep -E "${TEST_PATTERN}" >/dev/null 2>&1; then
    print_status "SKIP" "${test_name}" "doesn't match pattern"
    return 0
  fi

  TESTS_RUN=$((TESTS_RUN + 1))

  if [ "${TEST_VERBOSE}" -eq 1 ]; then
    print_status "INFO" "Running ${test_name}"
  fi

  #~@ Run the test function
  if "${test_func}"; then
    print_status "PASS" "${test_name}"
  else
    print_status "FAIL" "${test_name}"
  fi
}

#endregion

#region Assert functions
assert_equals() {
  expected="$1"
  actual="$2"
  message="${3:-}"

  if [ "${expected}" = "${actual}" ]; then
    return 0
  else
    if [ "${TEST_VERBOSE}" -eq 1 ]; then
      printf "  Expected: '%s'\n" "${expected}"
      printf "  Actual:   '%s'\n" "${actual}"
      if [ -n "${message}" ]; then
        printf "  Message:  %s\n" "${message}"
      fi
    fi
    return 1
  fi
}

assert_contains() {
  haystack="$1"
  needle="$2"
  message="${3:-}"

  case "${haystack}" in
  *"${needle}"*)
    return 0
    ;;
  *)
    if [ "${TEST_VERBOSE}" -eq 1 ]; then
      printf "  Haystack: '%s'\n" "${haystack}"
      printf "  Needle:   '%s'\n" "${needle}"
      if [ -n "${message}" ]; then
        printf "  Message:  %s\n" "${message}"
      fi
    fi
    return 1
    ;;
  esac
}

assert_matches() {
  text="$1"
  pattern="$2"
  message="${3:-}"

  if printf "%s" "${text}" | grep -E "${pattern}" >/dev/null 2>&1; then
    return 0
  else
    if [ "${TEST_VERBOSE}" -eq 1 ]; then
      printf "  Text:     '%s'\n" "${text}"
      printf "  Pattern:  '%s'\n" "${pattern}"
      if [ -n "${message}" ]; then
        printf "  Message:  %s\n" "${message}"
      fi
    fi
    return 1
  fi
}

assert_exit_code() {
  expected_code="$1"
  command="$2"

  eval "${command}" >/dev/null 2>&1
  actual_code=$?

  if [ "${expected_code}" -eq "${actual_code}" ]; then
    return 0
  else
    if [ "${TEST_VERBOSE}" -eq 1 ]; then
      printf "  Expected exit code: %d\n" "${expected_code}"
      printf "  Actual exit code:   %d\n" "${actual_code}"
    fi
    return 1
  fi
}

#endregion

#region Setup and Teardown

setup_test_environment() {
  # Check if clock script exists
  if [ ! -f "${TEST_TARGET}" ]; then
    printf "%sERROR:%s Clock script not found at: %s\n" "${RED}" "${RESET}" "${TEST_TARGET}" >&2
    printf "Please ensure the clock script is in the current directory or set TEST_TARGET environment variable.\n" >&2
    exit 1
  fi

  #~@ Make sure it's executable
  if [ ! -x "${TEST_TARGET}" ]; then
    printf "%sERROR:%s Clock script is not executable: %s\n" "${RED}" "${RESET}" "${TEST_TARGET}" >&2
    exit 1
  fi

  #~@ Create temporary directory for test files
  TEST_TEMP_DIR="$(mktemp -d)"
  export TEST_TEMP_DIR

  #~@ Export clean environment for tests
  unset DURATION_COMPACT_MINUTES DURATION_COMPACT_SECONDS DURATION_COMPACT_MILLISECONDS
  unset DURATION_COMPACT_SEPARATOR DURATION_COMPACT_ICON
  unset DURATION_VERBOSE_MINUTE_SINGULAR DURATION_VERBOSE_MINUTE_PLURAL
  unset DURATION_VERBOSE_SECOND_SINGULAR DURATION_VERBOSE_SECOND_PLURAL
  unset DURATION_VERBOSE_MILLISECOND_SINGULAR DURATION_VERBOSE_MILLISECOND_PLURAL
  unset DURATION_VERBOSE_CONNECTOR DURATION_VERBOSE_LIST_SEPARATOR
  unset TIMESTAMP_DEFAULT TIMESTAMP_SHORT TIMESTAMP_ISO TIMESTAMP_COMPACT TIMESTAMP_FILENAME
  unset CLOCK_DURATION_FORMAT CLOCK_TIMESTAMP_FORMAT CLOCK_SHOW_ICON CLOCK_ICON
}

cleanup_test_environment() {
  #~@ Clean up temporary directory
  if [ -n "${TEST_TEMP_DIR}" ] && [ -d "${TEST_TEMP_DIR}" ]; then
    rm -rf "${TEST_TEMP_DIR}"
  fi
}

#endregion

#region Basic Functionality Tests

test_help_option() {
  output=$("${TEST_TARGET}" --help 2>&1)
  exit_code=$?

  assert_exit_code 0 "${TEST_TARGET} --help" &&
    assert_contains "${output}" "Clock - POSIX Duration and Timestamp Utility" &&
    assert_contains "${output}" "USAGE:" &&
    assert_contains "${output}" "OPTIONS:" &&
    assert_contains "${output}" "EXAMPLES:"
}

test_help_short_option() {
  output=$("${TEST_TARGET}" -h 2>&1)
  exit_code=$?

  assert_exit_code 0 "${TEST_TARGET} -h" &&
    assert_contains "${output}" "Clock - POSIX Duration and Timestamp Utility"
}

test_timestamp_default() {
  output=$("${TEST_TARGET}" --timestamp 2>&1)

  #~@ Should match format: [YYYY-MM-DD HH:MM:SS]
  assert_matches "${output}" '^\[[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}\]$'
}

test_timestamp_iso() {
  output=$("${TEST_TARGET}" --iso 2>&1)

  #~@ Should match ISO format: YYYY-MM-DDTHH:MM:SS
  assert_matches "${output}" '^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}$'
}

test_timestamp_custom_format() {
  output=$("${TEST_TARGET}" --format "%Y-%m-%d" 2>&1)

  #~@ Should match YYYY-MM-DD
  assert_matches "${output}" '^[0-9]{4}-[0-9]{2}-[0-9]{2}$'
}

#endregion

#region Duration Tests

test_duration_simple_command() {
  output=$("${TEST_TARGET}" --duration echo "hello" 2>&1)

  #~@ Should contain some duration format (ms, s, etc.)
  assert_matches "${output}" '[0-9]+ms|[0-9]+s'
}

test_duration_compact_format() {
  output=$("${TEST_TARGET}" --duration --compact sleep 0.1 2>&1)

  #~@ Should be in compact format (numbers followed by units)
  assert_matches "${output}" '[0-9]+(ms|s|m)'
}

test_duration_verbose_format() {
  output=$("${TEST_TARGET}" --duration --verbose sleep 0.1 2>&1)

  #~@ Should contain "completed in" and words like "milliseconds" or "seconds"
  assert_contains "${output}" "completed in" &&
    assert_matches "${output}" '(millisecond|second|minute)'
}

test_duration_with_label() {
  output=$("${TEST_TARGET}" --duration --verbose --label "TestCommand" echo "test" 2>&1)

  assert_contains "${output}" "TestCommand completed in"
}

test_duration_command_exit_code() {
  #~@ Test that clock preserves the exit code of the command
  "${TEST_TARGET}" --duration false >/dev/null 2>&1
  exit_code=$?

  #~@ 'false' command should return exit code 1
  assert_equals 1 "${exit_code}" "Should preserve command exit code"
}

#endregion

#region Error Handling Tests

test_invalid_option() {
  output=$("${TEST_TARGET}" --invalid-option 2>&1)
  exit_code=$?

  assert_contains "${output}" "ERROR: Unknown option" &&
    [ "${exit_code}" -ne 0 ]
}

test_missing_format_value() {
  output=$("${TEST_TARGET}" --format 2>&1)
  exit_code=$?

  assert_contains "${output}" "ERROR: --format requires a value" &&
    [ "${exit_code}" -ne 0 ]
}

test_missing_label_value() {
  output=$("${TEST_TARGET}" --label 2>&1)
  exit_code=$?

  assert_contains "${output}" "ERROR: --label requires a value" &&
    [ "${exit_code}" -ne 0 ]
}

test_conflicting_options_compact_verbose() {
  output=$("${TEST_TARGET}" --compact --verbose 2>&1)
  exit_code=$?

  assert_contains "${output}" "ERROR: Cannot use both --compact and --verbose" &&
    [ "${exit_code}" -ne 0 ]
}

test_conflicting_options_timestamp_duration() {
  output=$("${TEST_TARGET}" --timestamp --duration echo test 2>&1)
  exit_code=$?

  assert_contains "${output}" "ERROR: Cannot use both --timestamp and --duration" &&
    [ "${exit_code}" -ne 0 ]
}

test_duration_without_command() {
  output=$("${TEST_TARGET}" --duration 2>&1)
  exit_code=$?

  assert_contains "${output}" "ERROR: --duration requires a command to execute" &&
    [ "${exit_code}" -ne 0 ]
}

#endregion

#region Environment Variable Tests

test_custom_duration_units() {
  DURATION_COMPACT_MINUTES="min" DURATION_COMPACT_SECONDS="sec" \
    output=$("${TEST_TARGET}" --duration --compact sleep 0.1 2>&1)

  #~@ Should use custom units if duration is long enough
  #~@ For short durations, we'll just check it doesn't error
  [ $? -eq 0 ]
}

test_custom_verbose_language() {
  DURATION_VERBOSE_SECOND_SINGULAR="segundo" \
    DURATION_VERBOSE_SECOND_PLURAL="segundos" \
    DURATION_VERBOSE_CONNECTOR="y" \
    output=$("${TEST_TARGET}" --duration --verbose sleep 0.1 2>&1)

  #~@ Should work without error (actual language test would need longer duration)
  [ $? -eq 0 ]
}

test_custom_timestamp_format() {
  output=$("${TEST_TARGET}" --timestamp --format "%Y" 2>&1)

  #~@ Should output just the year
  assert_matches "${output}" '^[0-9]{4}$'
}

test_show_icon_env() {
  output=$("${TEST_TARGET}" --show-icon --icon '⏰' 2>&1)

  #~@ Should include the icon character
  assert_matches "${output}" '⏰'
}

#endregion

#region Advanced Features Tests

test_dry_run() {
  output=$("${TEST_TARGET}" --dry-run --duration echo "test" 2>&1)

  assert_contains "${output}" "Would execute: echo test" &&
    assert_contains "${output}" "Duration format:" &&
    assert_contains "${output}" "Label:" &&
    assert_contains "${output}" "Icon:"
}

test_icon_option() {
  output=$("${TEST_TARGET}" --duration --icon "⏱️" echo "test" 2>&1)

  assert_contains "${output}" "⏱️"
}

test_show_icon_option() {
  output=$("${TEST_TARGET}" --show-icon echo "test" 2>&1)

  #~@ Should contain the default icon
  assert_matches "${output}" '󱇻'
}

test_command_with_arguments() {
  output=$("${TEST_TARGET}" --duration ls /nonexistent 2>/dev/null)
  exit_code=$?

  #~@ Should preserve the exit code from ls (should be non-zero for nonexistent path)
  [ "${exit_code}" -ne 0 ]
}

test_command_with_pipes() {
  output=$("${TEST_TARGET}" --duration "echo hello | wc -c" 2>&1)

  #~@ Should work with shell constructs
  assert_matches "${output}" '[0-9]+(ms|s)'
}

#endregion

#region Performance and Edge Cases

test_very_fast_command() {
  output=$("${TEST_TARGET}" --duration true 2>&1)

  #~@ Even very fast commands should show some duration
  assert_matches "${output}" '[0-9]+(ms|s)'
}

test_command_with_spaces() {
  output=$("${TEST_TARGET}" --duration echo "hello world" 2>&1)

  #~@ Should handle commands with spaces properly
  assert_matches "${output}" '[0-9]+(ms|s)'
}

test_empty_command_argument() {
  #~@ Test with just -- (empty command)
  output=$("${TEST_TARGET}" --duration -- 2>&1)
  exit_code=$?

  #~@ Should fail gracefully
  [ "${exit_code}" -ne 0 ]
}

test_multiple_timestamp_calls() {
  #~@ Test that multiple calls produce valid timestamps
  output1=$("${TEST_TARGET}" --timestamp 2>&1)
  sleep 1
  output2=$("${TEST_TARGET}" --timestamp 2>&1)

  #~@ Both should be valid timestamps and different
  assert_matches "${output1}" '^\[[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}\]$' &&
    assert_matches "${output2}" '^\[[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}\]$' &&
    [ "${output1}" != "${output2}" ]
}

#endregion

#region Integration Tests

test_real_world_scenario_1() {
  #~@ Test timing a directory listing with custom label
  output=$("${TEST_TARGET}" --duration --verbose --label "Directory Scan" ls . 2>&1)

  assert_contains "${output}" "Directory Scan completed in" &&
    assert_matches "${output}" '(millisecond|second)'
}

test_real_world_scenario_2() {
  #~@ Test compact timing of a sleep command
  output=$("${TEST_TARGET}" --duration --compact sleep 0.5 2>&1)

  #~@ Should show around 500ms
  assert_matches "${output}" '[4-6][0-9][0-9]ms|1s'
}

test_real_world_scenario_3() {
  #~@ Test ISO timestamp for logging
  output=$("${TEST_TARGET}" --iso 2>&1)

  #~@ Should be valid ISO format
  assert_matches "${output}" '^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}$'
}

#endregion

#region Main Test Runner

print_test_summary() {
  printf "\n%s=== Test Summary ===%s\n" "${BLUE}" "${RESET}"
  printf "Tests Run:    %d\n" "${TESTS_RUN}"
  printf "%sPassed:%s       %d\n" "${GREEN}" "${RESET}" "${TESTS_PASSED}"

  if [ "${TESTS_FAILED}" -gt 0 ]; then
    printf "%sFailed:%s       %d\n" "${RED}" "${RESET}" "${TESTS_FAILED}"
  fi

  if [ "${TESTS_SKIPPED}" -gt 0 ]; then
    printf "%sSkipped:%s      %d\n" "${YELLOW}" "${RESET}" "${TESTS_SKIPPED}"
  fi

  printf "\n"

  if [ "${TESTS_FAILED}" -gt 0 ]; then
    printf "%sOverall: FAILED%s\n" "${RED}" "${RESET}"
    return 1
  else
    printf "%sOverall: PASSED%s\n" "${GREEN}" "${RESET}"
    return 0
  fi
}

#~@ Run tests only if the script is executed directly
case "${0}" in *${TEST_SCRIPT}) main "$@" ;; *) ;; esac

#endregion
