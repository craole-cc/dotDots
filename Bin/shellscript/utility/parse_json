#!/bin/sh

main() {
	json="$1"
	key="$2"

	via_jq || via_awk || {
		printf "Error: Failed to parse JSON.\n"
		return 1
	}
}

via_jq() {
	command -v jq >/dev/null 2>&1 || return 1
	printf "%s" "$json" | jq -r ".[0].$key"
}

via_awk() {
	#@ Fallback to POSIX-compliant parsing with awk. Howeever it doersn't handle lists well and only returns the first item.
	command -v awk >/dev/null 2>&1 || return 1

	printf "%s" "$json" | awk -v key="$key" '
    BEGIN { RS="[{},]" }
    {
      gsub(/^[ \n\t]+|[ \n\t]+$/, "")  # Trim whitespace
      if ($0 ~ "\"" key "\":") {        # Find key
        split($0, arr, ":")             # Split on colon
        rest = arr[2]                   # Get value portion

        # Handle array values
        if (rest ~ /^\s*\[/) {
          print "["                     # Print opening bracket

          # Extract array content
          gsub(/^\s*\[|\]\s*$/, "", rest)  # Remove brackets
          n = split(rest, elements, ",")    # Split into elements

          # Print each element with proper formatting
          for (i = 1; i <= n; i++) {
            gsub(/^[ \t]+|[ \t]+$/, "", elements[i])  # Trim each element
            print "  " elements[i]
          }
          print "]"                     # Print closing bracket
        } else {
          gsub(/^[ \n\t"]+|[ \n\t",]+$/, "", rest)  # Clean regular value
          print rest
        }
        exit 0
      }
    }
  '
}

main "$@"
