#!/bin/sh

#DOC is_non-empty-dir - Checks if a directory is non-empty.
#DOC
#DOC Usage:
#DOC   is_non-empty-dir <directory>
#DOC
#DOC Arguments:
#DOC   <directory>  The path to the directory to check.
#DOC
#DOC Behavior:
#DOC   - Exits with status 0 if the directory is non-empty (contains files or subdirectories).
#DOC   - Exits with status 1 if the directory is completely empty (no files and no subdirectories).
#DOC
#DOC Example:
#DOC   is_non-empty-dir /path/to/directory

#@ Set defaults
unset verbose quiet non_empty msg
code=0

#@ Parse arguments
while [ "$#" -gt 0 ]; do
  case "$1" in
    -d | --verbose)
      verbose=true
      ;;
    -q | --quiet)
      quiet=true
      ;;
    -*)
      printf "Unknown option: %s\n" "$1" >&2
      exit 2
      ;;
    *)
      dir="$1"
      ;;
  esac
  shift
done

#@ Ensure a directory argument is provided
if [ -z "$dir" ]; then
  [ "$quiet" ] \
    || printf "%s\n" "Usage: non_empty_dir <directory>" >&2
  exit 2
fi

#@ Check if the directory exists
[ -d "$dir" ] || {
  [ "$verbose" ] \
    && printf "Error: '%s' is not a valid directory\n" "$dir"
  exit 1
}

#@ Get the absolute path of the directory
abs="$(
  realpath "$dir" 2> /dev/null \
    || { cd "$dir" 2> /dev/null && pwd; } \
    || "$dir"
)"

#@ Loop and check for any entry other than . or ..
for file in "$abs"/* "$abs"/.[!.]* "$abs"/..?*; do
  case "$file" in
    "$abs/." | "$abs/..") ;; #? Skip "." and ".."
    "$abs") ;;               #? Skip the directory itself
    *)
      non_empty=true
      break
      ;; #? Found a non-empty entry, so exit the loop
  esac
done

#@ Set exit status
if [ -n "$non_empty" ]; then
  [ "$verbose" ] \
    && printf "Non-empty directory: %s\n" "$abs"
  exit 0
else
  [ "$verbose" ] \
    && printf "Empty directory: %s\n" "$abs"
  exit 1
fi
