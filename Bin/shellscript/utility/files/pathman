#!/bin/sh
# shellcheck disable=SC2031

main() {
	initialize_env
	parse_arguments "$@" || return 1
	perform_action
}

initialize_env() {
	#@ set defaults
	verbosity=0
	action="show"
	bins=""
	debug=""
	delimiter="$(printf '\037')"

	#@ Cache command checks at startup
	HAS_REALPATH=0
	HAS_FD=0
	command -v realpath >/dev/null 2>&1 && HAS_REALPATH=1
	command -v fd >/dev/null 2>&1 && HAS_FD=1
	command -v bat >/dev/null 2>&1 && HAS_BAT=1
}
parse_arguments() {
	while [ "$#" -gt 0 ]; do
		case "$1" in
		--debug)
			debug="debug"
			;;
		--error) verbosity=1 ;;
		--quiet) verbosity=0 ;;
		--show)
			action="show"
			;;
		--clean)
			action="clean"
			;;
		--action)
			if [ "$2" ]; then
				action="$2"
				shift
			else
				printf "'%s' requires an argument [ append | prepend | show ]\n" "$1"
				return 1
			fi
			;;
		--append)
			action="append"
			;;
		--prepend)
			action="prepend"
			;;
		--dir*)
			if [ "$2" ]; then
				shift
				if [ "$bins" ]; then
					bins="$(printf '%s%s%s' "$bins" "$delimiter" "$(resolved_path "$1")")"
				else
					bins="$(resolved_path "$1")"
				fi
			else
				printf "'%s' requires an argument\n" "$1"
				return 1
			fi
			;;
		*)
			if [ -f "$1" ]; then
				make_exec "$1"
				return 0
			elif [ "$bins" ]; then
				bins="$(printf '%s%s%s' "$bins" "$delimiter" "$(resolved_path "$1")")"
			else
				bins="$(resolved_path "$1")"
			fi
			;;
		esac
		shift
	done
}

perform_action() {
	case "$action" in
	append | prepend)
		#@ Validate that a directory was provided
		if [ -z "$bins" ]; then
			printf "ERROR: No path provided\n"
			return 1
		fi

		add_to_path
		;;
	clean)
		clean_path
		;;
	show)
		show_bins "$PATH"
		;;
	esac
}

resolved_path() {
	[ "$HAS_REALPATH" = 1 ] && realpath "$1" && return

	if [ -d "$1" ]; then
		(cd -- "$1" && pwd)
	else
		dir="$(cd "$(dirname "$1")" && pwd)"
		printf '%s/%s\n' "$dir" "$(basename "$1")"
	fi
}

recursive_paths() {
	dirs="$(printf '%s' "$*" | tr "$delimiter" '\n')"

	for dir in $dirs; do
		if [ "$HAS_FD" = 1 ]; then
			#@ Add the results from fd
			fd . "$dir"

			#@ Include the lookup directory
			printf "%s\n" "$dir"
		else
			#@ Fallback to find
			find "$dir"
		fi
	done | sort
}

os_type() {
	case "$(uname -a | tr '[:upper:]' '[:lower:]')" in
	*linux*) os_type="linux" ;;
	*darwin*) os_type="mac" ;;
	*) os_type="windows" ;;
	esac

	#TODO This is utterly inadequete, just temporary
	printf "%s" "$os_type"
}
add_to_path_ORIG() {
	[ "$debug" ] && {
		counter=1
		recursive_paths "$bins" | while IFS= read -r bin_path; do
			printf "  %4d %s\n" "$counter" "$bin_path"
			#@ Increment the counter
			counter=$((counter + 1))
		done
		return 0
	}

	#@ Update PATH directories recursively
	recursive_paths "$bins" | while IFS= read -r bin_path; do
		[ -d "$bin_path" ] &&
			case ":${PATH}:" in
			*:"$bin_path":*) ;;
			*)
				case "$action" in
				prepend)
					PATH="${bin_path}${PATH:+:$PATH}"
					_action="Appended"
					;;
				append)
					PATH="${PATH:+$PATH:}${bin_path}"
					_action="Perpended"
					;;
				esac

				[ "$verbosity" -gt 1 ] &&
					printf "    %s to PATH: %s\n" "$_action" "${bin_path}"
				;;
			esac

		#@ Make scripts executable
		[ -f "$bin_path" ] &&
			case "$(os_type)" in windows) ;;
			*)
				chmod_status=0
				chmod +x "$bin_path" >/dev/null 2>&1
				chmod_status=$?

				[ "$verbosity" -gt 1 ] && {
					if [ "$chmod_status" -eq 0 ]; then
						printf "    Script initialized: %s\n" "${bin_path}"
					else
						printf "    Failed to make %s executable: %s\n" "${bin_path}" "$chmod_status"
					fi
				}
				;;
			esac

	done

	#@ Return the new PATH
	printf "%s\n" "$PATH"
}

show_bins() {
	printf "%s\n" "${1:-"$PATH"}" | tr ':' '\n' |
		eval "$(if [ "$HAS_BAT" ]; then
			printf "bat --color=always --style=grid --plain --number"
		else
			printf "nl -s '  ' | less"
		fi)"
}

is_absolute_path() {
	case "$1" in
	/*) return 0 ;; # Path starts with /, so it's absolute
	*) return 1 ;;  # Otherwise, it's not absolute
	esac
}

clean_path() {
	#DOC 1. printf '%s\n' "${PATH-}"
	#DOC   - Prints PATH safely
	#DOC   - Handles empty PATH with - modifier
	#DOC
	#DOC 2. tr ':' '\n'
	#DOC   - Converts PATH separators to newlines
	#DOC   - Creates one path per line
	#DOC
	#DOC 3. grep '^/'
	#DOC   - Filters for absolute paths only
	#DOC   - ^/ matches paths starting with /
	#DOC   - Automatically removes invalid paths
	#DOC
	#DOC 4. paste -s -d ':'
	#DOC   - -s serializes input into single line
	#DOC   - -d ':' joins with : delimiter
	#DOC   - Reconstructs PATH format

	printf '%s\n' "${PATH-}" | tr ':' '\n' | grep '^/' | paste -s -d ':'
}

make_exec() {
	_file=$1
	chmod_status=0
	chmod +x "$_file" >/dev/null 2>&1
	chmod_status=$?
	[ "$verbosity" -gt 1 ] && {
		if [ "$chmod_status" -eq 0 ]; then
			printf "    Script initialized: %s\n" "${_file}"
		else
			printf "    Failed to make %s executable: %s\n" "${_file}" "$chmod_status"
		fi
	}
}

add_to_path() {
	tmp_path=$(mktemp) || return 1
	recursive_paths "$bins" >"$tmp_path"

	if [ "$debug" ]; then
		counter=1
		while IFS= read -r bin_path; do
			printf "  %4d %s\n" "$counter" "$bin_path"
			counter=$((counter + 1))
		done <"$tmp_path"
		rm "$tmp_path"
		return 0
	fi

	while IFS= read -r bin_path; do
		[ -d "$bin_path" ] &&
			case ":${PATH}:" in
			*:"$bin_path":*) ;;
			*)
				case "$action" in
				prepend)
					PATH="${bin_path}${PATH:+:$PATH}"
					_action="Appended"
					;;
				append)
					PATH="${PATH:+$PATH:}${bin_path}"
					_action="Perpended"
					;;
				esac
				[ -d "$bin_path" ] && umask 022 && chmod 755 "$bin_path" #TODO: This is not working. Files created after running the script are not automatically executable.
				[ "$verbosity" -gt 1 ] &&
					printf "    %s to PATH: %s\n" "$_action" "${bin_path}"
				;;
			esac

		[ -f "$bin_path" ] &&
			case "$(os_type)" in windows) ;;
			*) make_exec "$bin_path" ;;
			esac
	done <"$tmp_path"

	rm "$tmp_path"
	[ "$verbosity" -gt 1 ] && show_bins
	export PATH
}

#@ Execute the main function with the provided argument
main "$@"
