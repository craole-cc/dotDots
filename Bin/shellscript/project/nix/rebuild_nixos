#! /bin/sh
# shellcheck enable=all

main() {
  set_defaults
  parse_arguments "$@"
  validate_environment
  execute_process
}

set_defaults() {
  #@ Enable strict mode
  # set -e

  #@ Set defaults
  flake_root=""
  action="switch"
  upgrade=""
  trace=""
  args=""
  build_target=""
  debug=""

  #| Command cache
  CMD_GIT="${CMD_GIT:-"$(command -v git 2>/dev/null)"}"
  cmd_gyt_path="$(command -v gyt 2>/dev/null)"
  cmd_gyt_dots="${CMD_GYT:-"${DOTS:-"${HOME}/.dots"}/Bin/shellscript/project/git/gyt"}"
  if [ -n "${cmd_gyt_path}" ]; then
    CMD_GYT="${cmd_gyt_path}"
  elif [ -x "${cmd_gyt_dots}" ]; then
    CMD_GYT="${cmd_gyt_dots}"
  else
    CMD_GYT=""
  fi
}

parse_arguments() {
  while [ "$#" -gt 0 ]; do
    case "$1" in
    --debug | --dry-run)
      action="dry-build"
      debug=true
      ;;
    --flake)
      if [ -n "$2" ]; then
        flake_root="$2"
        shift
      else
        exit 1
      fi
      ;;
    --host | --*target)
      if [ -n "$2" ]; then
        build_target="$2"
        shift
      else
        exit 1
      fi
      ;;
    switch | boot | test | build | dry-build | dry-activate | edit | repl | build-vm | build-vm-with-bootloader | build-image | list-generations) action="$1" ;;
    --upgrade) upgrade=true ;;
    -u | --up*) upgrade=true ;;
    -t | --trace) trace=true ;;
    --no-trace) trace="" ;;
    --no-up*) upgrade="" ;;
    *)
      if [ -d "$1" ]; then
        flake_root="$1"
      else
        args="${args:-}${args:+${delimiter:- }}${1}"
      fi
      ;;
    esac
    shift
  done
}

check_flake_status() {
  #@ Initialize variables
  _flake=""

  #@ Skip if the flake directory not specified
  if [ -z "${1:-}" ]; then
    return 1
  fi

  #@ Get the absolute path to the flake directory
  if command -v realpath >/dev/null 2>&1; then
    _flake="$(realpath "${1}")"
  elif readlink -f >/dev/null 2>&1; then
    _flake="$(readlink -f "${1}")"
  else
    _flake="$(cd "${1}" 2>/dev/null && pwd)"
  fi

  #@ Return the flake directory, if the flake exists
  if [ -f "${_flake}/flake.nix" ]; then
    printf "%s" "${_flake}"
    return 0
  else
    printf "Flake directory does not exist: %s\n" "${_flake}"
    return 2
  fi
}

check_git_status() {
  #@ Initialize variables
  _git_dir="${1:-}"

  #@ Run git status check
  if [ -n "${CMD_GYT}" ]; then
    echo "git dir: ${_git_dir}"
    #@ Use gyt
    "${CMD_GYT}" --dir "${_git_dir}"

    #@ Return the git status
    status="$?"
    case "${status}" in
    130) printf "Operation cancelleled but the user" ;;
    *) ;;
    esac
    return "${status}"
  else
    #@ Check the repository status
    if \cd "${_git_dir}"; then
      #@ Check git status and encourage commit, fail if there are changes
      git_changes_to_commit="$(${CMD_GIT} status --porcelain 2>/dev/null)"

      #@ Update the nothing_to_commit flag if there are no changes
      if [ -n "${git_changes_to_commit}" ]; then
        printf "Please commit the following changes first:\n"
        git status --short
        return 1
      fi
    else
      printf "Failed to navigate to flake directory: %s\n" "${_git_dir}"
      return 0
    fi
  fi
}

validate_environment() {
  #@ Retrieve the absolute path to the flake, if it exists
  flake_status_check="$(check_flake_status "${flake_root}")"
  if ! flake_root="${flake_status_check}"; then
    return "$?"
  fi
  echo "ROOT: ${flake_root}"

  #@ Retrieve the absolute path to the flake, if it exists
  check_git_status "${flake_root}"
  git_status="$?"

  case "${git_status}" in
  0) ;;
  *) return "${git_status}" ;;
  esac

  echo "STAT: $?"
  exit 0
  # if [ "${git_status}" -ne 0 ]; then return "${git_status}"; fi

  #@ Check the flake status
  echo "STATUS ${git_status}"
  exit 0
  # flake_status="$?"
  # case "${flake_status}" in
  # 0) flake_root="${flake_status_check}" ;;
  # *) return "${flake_status}" ;;
  # esac
}

execute_process() {
  #@ Update the arguments
  case "${upgrade}" in
  true | 1 | yes | on) args="${args:-}${args:+${delimiter:- }}--upgrade" ;;
  *) ;;
  esac
  case "${trace}" in
  true | 1 | yes | on) args="${args:-}${args:+${delimiter:- }}--show-trace" ;;
  *) ;;
  esac

  #@ Update target
  if [ -n "${flake_root}" ] && [ -n "${build_target}" ]; then
    build_target="--flake ${flake_root}#${build_target}"
  elif [ -n "${flake_root}" ]; then
    build_target="--flake ${flake_root}#$(hostname)"
  else
    :
  fi

  #@ Update the command
  cmd="sudo nixos-rebuild ${action} ${build_target} ${args:-}"

  #@ Print the command
  case "${debug}" in
  true | 1 | yes | on) printf "%s\n" "${cmd}" ;; *) ;;
  esac

  #@ Execute the command
  printf "%s" "${args:-}"
  # eval "${cmd}"
  # return "$?"
}

main "$@"
