#!/usr/bin/env bash
# SSH Git Setup Script
# Automatically configure SSH for Git profiles based on dotfiles

set -e

# Application info
APP_NAME="ssh-git-setup"
APP_VERSION="1.0"

# Default paths
DOTS="${DOTS:-$HOME/dotfiles}"
GIT_PROFILES_DIR="${DOTS}/Configuration/git/home"
SSH_DIR="$HOME/.ssh"
SSH_CONFIG="$SSH_DIR/config"

# Colors and formatting
RED="\033[0;31m"
GREEN="\033[0;32m"
YELLOW="\033[0;33m"
BLUE="\033[0;34m"
BOLD="\033[1m"
RESET="\033[0m"

# Function to display help information
show_help() {
  cat <<EOF
${BOLD}${APP_NAME}${RESET} v${APP_VERSION}

Usage: ${APP_NAME} [OPTIONS]

Automatically configures SSH for Git based on your dotfiles.

Options:
  -h, --help      Show this help message and exit
  -v, --version   Show version information and exit
  -d, --dir DIR   Set custom dotfiles directory (default: $DOTS)
  -f, --force     Force regeneration of existing keys
  -l, --list      List available profiles

Examples:
  ${APP_NAME}
  ${APP_NAME} --dir ~/my-dotfiles
  ${APP_NAME} --force
EOF
}

# Function to display version information
show_version() {
  echo "${APP_NAME} v${APP_VERSION}"
}

# Function to display error messages
show_error() {
  echo -e "${RED}ðŸš© Error:${RESET} $1" >&2
}

# Function to display success messages
show_success() {
  echo -e "${GREEN}âœ“ Success:${RESET} $1"
}

# Function to display information messages
show_info() {
  echo -e "${BLUE}â„¹ Info:${RESET} $1"
}

# Function to display warning messages
show_warning() {
  echo -e "${YELLOW}âš  Warning:${RESET} $1"
}

# Function to parse Git config file and extract SSH information
parse_git_config() {
  local config_file="$1"
  local filename
  filename=$(basename "$config_file")

  # Extract host and username from filename (format: host_username.gitconfig)
  local parts
  parts=(${filename//./ })  # Remove extension
  parts=(${parts[0]//_/ })  # Split by underscore

  local host="${parts[0]}"
  local username="${parts[1]}"

  # Read git user information from config
  local git_name
  local git_email
  local ssh_path

  git_name=$(grep -A 1 "\[user\]" "$config_file" | grep "name" | cut -d= -f2 | tr -d ' "')
  git_email=$(grep -A 2 "\[user\]" "$config_file" | grep "email" | cut -d= -f2 | tr -d ' "')
  ssh_path=$(grep "sshCommand" "$config_file" | grep -o '"ssh -i [^"]*"' | cut -d' ' -f3 | tr -d '"')

  # Normalize host (add .com if missing)
  if ! echo "$host" | grep -q '\.'; then
    host="${host}.com"
  fi

  echo "HOST=$host"
  echo "USERNAME=$username"
  echo "GIT_NAME=$git_name"
  echo "GIT_EMAIL=$git_email"
  echo "SSH_PATH=$ssh_path"
}

# Function to generate SSH key
generate_ssh_key() {
  local host="$1"
  local username="$2"
  local email="$3"
  local key_path="$4"
  local force="$5"

  # Create directory for key if it doesn't exist
  local key_dir
  key_dir=$(dirname "$key_path")
  mkdir -p "$key_dir"

  # Check if key already exists
  if [[ -f "$key_path" && "$force" != "true" ]]; then
    show_warning "SSH key already exists at $key_path. Use --force to regenerate."
    return 0
  elif [[ -f "$key_path" && "$force" == "true" ]]; then
    # Archive existing key
    local archive_dir="${key_dir}/archive"
    mkdir -p "$archive_dir"
    local timestamp
    timestamp=$(date +"%Y%m%d%H%M%S")
    mv "$key_path" "${archive_dir}/$(basename "$key_path").${timestamp}"
    if [[ -f "${key_path}.pub" ]]; then
      mv "${key_path}.pub" "${archive_dir}/$(basename "$key_path").pub.${timestamp}"
    fi
    show_info "Archived existing key to ${archive_dir}"
  fi

  # Generate SSH key
  show_info "Generating SSH key for $username@$host"
  ssh-keygen -t ed25519 -a 100 -f "$key_path" -C "$email" -N ""

  # Add to SSH config
  echo -e "\nHost $host\n  User $username\n  HostName $host\n  IdentityFile $key_path" >> "$SSH_CONFIG"

  # Add key to SSH agent
  eval "$(ssh-agent -s)" > /dev/null
  ssh-add "$key_path" > /dev/null

  show_success "SSH key generated for $username@$host"

  # Copy public key to clipboard if available
  if command -v xclip > /dev/null; then
    xclip -selection clipboard < "${key_path}.pub"
    show_info "Public key copied to clipboard"
  elif command -v pbcopy > /dev/null; then
    pbcopy < "${key_path}.pub"
    show_info "Public key copied to clipboard"
  else
    show_info "Public key available at: ${key_path}.pub"
  fi

  # Display the public key
  echo -e "${YELLOW}Public Key:${RESET}"
  cat "${key_path}.pub"
}

# Function to list available profiles
list_profiles() {
  if [[ ! -d "$GIT_PROFILES_DIR" ]]; then
    show_error "Git profiles directory not found: $GIT_PROFILES_DIR"
    exit 1
  fi

  echo -e "${BOLD}Available Git Profiles:${RESET}"

  local count=0
  while IFS= read -r config_file; do
    local filename
    filename=$(basename "$config_file")
    echo "  - $filename"
    count=$((count + 1))
  done < <(find "$GIT_PROFILES_DIR" -name "*.gitconfig" -type f)

  if [[ $count -eq 0 ]]; then
    echo "  No profiles found"
  fi
}

# Function to setup SSH for all profiles
setup_ssh_for_profiles() {
  local force="$1"

  # Ensure SSH directory exists
  mkdir -p "$SSH_DIR"
  touch "$SSH_CONFIG"

  # Check if git profiles directory exists
  if [[ ! -d "$GIT_PROFILES_DIR" ]]; then
    show_error "Git profiles directory not found: $GIT_PROFILES_DIR"
    exit 1
  fi

  # Find all gitconfig files
  local configs
  configs=$(find "$GIT_PROFILES_DIR" -name "*.gitconfig" -type f)

  if [[ -z "$configs" ]]; then
    show_error "No Git configurations found in $GIT_PROFILES_DIR"
    exit 1
  fi

  # Process each gitconfig file
  while IFS= read -r config_file; do
    echo -e "\n${BOLD}Processing:${RESET} $(basename "$config_file")"

    # Parse git config to get ssh information
    local profile_info
    profile_info=$(parse_git_config "$config_file")

    # Source the profile info to create variables
    eval "$profile_info"

    # Use parsed SSH_PATH or generate one based on host and username
    if [[ -z "$SSH_PATH" ]]; then
      SSH_PATH="$SSH_DIR/$HOST/$USERNAME"
    fi

    # Generate SSH key
    generate_ssh_key "$HOST" "$USERNAME" "$GIT_EMAIL" "$SSH_PATH" "$force"

  done < <(echo "$configs")

  show_success "SSH configuration complete. You may need to add the public keys to your Git provider."
}

# Main function
main() {
  local force="false"

  # Parse command line arguments
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -h|--help)
        show_help
        exit 0
        ;;
      -v|--version)
        show_version
        exit 0
        ;;
      -d|--dir)
        DOTS="$2"
        GIT_PROFILES_DIR="${DOTS}/Configuration/git/home"
        shift 2
        ;;
      -f|--force)
        force="true"
        shift
        ;;
      -l|--list)
        list_profiles
        exit 0
        ;;
      *)
        show_error "Unknown option: $1"
        show_help
        exit 1
        ;;
    esac
  done

  # Display header
  echo -e "${BOLD}${APP_NAME}${RESET} v${APP_VERSION}\n"

  # Setup SSH for profiles
  setup_ssh_for_profiles "$force"
}

# Run the script
main "$@"
