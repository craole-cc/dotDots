#!/bin/sh

main() {
  trap 'cleanup; terminate' EXIT HUP INT TERM
  cleanup
  set_defaults
  parse_arguments "$@"
  execute_process
}

#@ Set up environment
cleanup() {
  unset fn_name start_time end_time duration
}

terminate() {
  echo exiting
  exit "${exit_code}"
}

set_defaults() {
  #| Script variables
  duration=0
  start_time=0
  end_time=0
  exit_code=0
  args=""

  #| Output variables
  verbosity="${verbosity:-"${VERBOSITY:-0}"}"
  verbosity_quiet="${verbosity_quiet:-"${VERBOSITY_QUIET:-0}"}"
  verbosity_error="${verbosity_error:-"${VERBOSITY_ERROR:-1}"}"
  verbosity_warn="${verbosity_warn:-"${VERBOSITY_WARN:-2}"}"
  verbosity_info="${verbosity_info:-"${VERBOSITY_INFO:-3}"}"
  verbosity_debug="${verbosity_debug:-"${VERBOSITY_DEBUG:-4}"}"
  verbosity_trace="${verbosity_trace:-"${VERBOSITY_TRACE:-5}"}"
  delimiter="${delimiter:-"${DELIMITER:-"$(printf "\037")"}"}"
  ctx_sep="${ctx_sep:-"-|-"}"
  ctx_head="${ctx_head:-">>- "}"
  ctx_tail="${ctx_tail:-"->> "}"
  ctx_name="${ctx_name:-"${CTX_NAME:-"DOTS"}"}"
  ctx_tag="${ctx_tag:-"${CTX_TAG:-""}"}"
  msg=""
}

parse_arguments() {
  [ "$#" -lt 1 ] && pout_guide && exit 1

  while [ "$#" -ge 1 ]; do
    case "$1" in
    --help | -h)
      pout_guide
      exit 0
      ;;
    --name | -n)
      cmd_name="$2"
      ;;
    *)
      args="${args}${args:+${delimiter}}${1}"
      ;;
    esac
    shift
  done

  cmd="$(printf "%s\n" "${args}" | tr "${delimiter}" ' ')"
  if [ -n "${cmd_name}" ]; then :; else
    ctx_name="$(printf "%s\n" "${cmd}" | cut -d ' ' -f 1)"
  fi
}

execute_process() {
  #@ Record start time in nanoseconds
  start_time=$(date +%s%N)

  #@ Execute the function with its arguments
  eval "${cmd}"
  exit_code=$?

  #@ Record end time and calculate duration in milliseconds
  end_time=$(date +%s%N)
  duration=$(((end_time - start_time) / 1000000))

  #@ Call the output function
  pout_info
}

pout_info() {
  #@ Define the tag based on the verbosity level
  case "${verbosity}" in
  5) ctx_tag="TRACE" ;;
  4) ctx_tag="DEBUG" ;;
  3) ctx_tag="INFO" ;;
  2) ctx_tag="WARN" ;;
  1) ctx_tag="ERROR" ;;
  *) ctx_tag="" ;;
  esac

  #@ Update the tag to include the target name
  if [ -n "${ctx_tag}" ]; then
    ctx_tag="${ctx_head}${ctx_tag}${ctx_sep}${ctx_name}${ctx_tail}"
  fi

  #@ Define the message based on the verbosity level
  if [ "${verbosity}" -ge "${verbosity_trace}" ]; then
    msg="$(
      printf "%sExecution completed in %s milliseconds" \
        "${ctx_tag}" "${duration}"
    )"
    if [ "${exit_code}" -ne 0 ]; then
      msg="${msg}, but failed with an error code of ${exit_code}"
    fi
  elif [ "${verbosity}" -ge "${verbosity_debug}" ]; then
    msg="$(
      printf "%sCommand: %s | Duration: %s ms | Exit Code: %s" \
        "${ctx_tag}" "${cmd}" "${duration}" "${exit_code}"
    )"
  elif [ "${verbosity}" -ge "${verbosity_error}" ]; then
    msg="$(
      printf "%sOperation took %s ms to complete" \
        "${ctx_tag}" "${duration}"
    )"
    if [ "${exit_code}" -ne 0 ]; then
      msg="${msg}, but failed with an error code of ${exit_code}"
    else
      msg="${msg} successfully"
    fi
  # else
  #   msg=$(printf "%s ms" "${duration}")
  fi

  #@ Print the complete message with newlines
  printf "%s\n" "${msg}"
}

pout_guide() {
  printf "Usage: %s [OPTIONS] <COMMAND> [ARGUMENTS...]\n\n" "${0}"
  printf "Options:\n"
  printf "  -h, --help       Print this help message\n"
  printf "  -n, --name NAME  Set the function name\n"
  printf "\n"
  printf "Example:\n"
  printf "  %s --name 'my_function' 'echo' 'Hello, world!'\n" "${0}"
  printf "\n"
}

main "$@"
