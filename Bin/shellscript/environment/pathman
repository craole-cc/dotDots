#!/bin/sh
# shellcheck enable=all
# shellcheck disable=SC2031,SC2312
#TODO: Remove unused variables and replace get_absolute_path

main() {
  echo pathman
  set_defaults
  parse_arguments "$@"
  perform_action
}

set_defaults() {
  #| Script Metadata
  cmd_PATH="$0"
  cmd_NAME="$(basename "${cmd_PATH}")"
  # cmd_HOME="$(dirname "${cmd_PATH}")"
  cmd_VERSION=0.1.0

  #| Operational Modes
  verbosity=error #? [quiet|error|warn|info|debug|trace]
  strict=true     #? [true|false]
  set_modes

  #| Operational Variables
  debug_pad=20 #? Positive integer
  delimiter="$(printf '\037')"
  IFS="${delimiter}"

  #| Process Variables
  # action="show"
  print_raw=0
  paths=""

  #| Commands
  cache_commands pathof bat fd realpath readlink rg
}

set_modes() {
  #| Verbosity
  case "${verbosity:-}" in
    0 | off | false | quiet) verbosity=0 ;;
    1 | err*) verbosity=1 ;;
    2 | warn*) verbosity=2 ;;
    3 | info*) verbosity=3 ;;
    4 | debug) verbosity=4 ;;
    5 | trace) verbosity=5 ;;
    *) verbosity=3 ;;
  esac

  #| Error Strictness
  case "${strict:-}" in
    1 | on | yes | true)
      set -e
      set -u
      ;;
    0 | off | no | false) return ;;
    *)
      pout --error "Invalid 'strict' mode" ": [${strict}]" \
        "\nAvailable modes are: 0, true, 1, false"
      exit 1
      ;;
  esac

}

cache_commands() {
  for cmd in $(list --build "$@"); do
    #@ Initialize variables
    cmd_key="" cmd_val="" cmd_env=""

    #@ Define the key in uppercase, prefixed with "CMD_"
    cmd_key="$(printf "CMD_%s" "${cmd}" | tr '[:lower:]' '[:upper:]')"
    pout --debug --key "[${cmd}] CMD_KEY" --val "${cmd_key}"

    #@ Retrieve the path, otherwise return empty string
    cmd_val="$(command -v "${cmd}" 2> /dev/null || printf '')"
    pout --debug --key "[${cmd}] CMD_VAL" --val "${cmd_val}"

    #@ Create the environment variable of the command's location
    eval export "$(printf "%s=%s" "${cmd_key}" "${cmd_val}")"
    cmd_env="$(env | grep --color "${cmd_key}")"
    pout --debug --key "[${cmd}] CMD_ENV" --val "${cmd_env}"
  done
}

parse_arguments() {
  while [ "$#" -gt 0 ]; do
    case "$1" in
      --debug)
        debug="debug"
        ;;
      --error) verbosity=1 ;;
      --quiet) verbosity=0 ;;
      --action)
        if [ -n "$2" ]; then
          action="$2"
          shift
        else
          pout --error "Missing argument for '$1'" \
            "\nAvailable modes are: append, prepend, show"
          return 1
        fi
        ;;
      --path-show)
        action="show"
        ;;
      --path-clean)
        action="clean"
        ;;
      --path-check)
        action="check"
        ;;
      --path-append)
        action="append"
        ;;
      --path-prepend)
        action="prepend"
        ;;
      --path-print)
        print_raw=1
        ;;
      --dir*)
        if [ -n "${2:-}" ]; then
          shift
          if [ -n "${paths}" ]; then
            paths="$(printf '%s%s%s' "${paths}" "${delimiter}" "$(get_absolute_path "$1")")"
          else
            paths="$(get_absolute_path "$1")"
          fi
        else
          printf "'%s' requires an argument\n" "$1"
          return 1
        fi
        ;;
      *)
        if [ -f "$1" ]; then
          make_exec "$1"
          return 0
        elif [ -n "${paths}" ]; then
          paths="$(printf '%s%s%s' "${paths}" "${delimiter}" "$(get_absolute_path "$1")")"
        else
          paths="$(get_absolute_path "$1")"
        fi
        ;;
    esac
    shift
  done

  if [ -n "${paths}" ] && [ -z "${action:-}" ]; then
    action="check"
  else
    action="${action:-"show"}"
  fi
  echo "perform_action: ${action:-} on ${paths:-}"

}

perform_action() {
  for path in ${paths}; do
    case "${action:-}" in
      append | prepend)
        #@ Validate that a directory was provided
        if [ -z "${paths}" ]; then
          printf "ERROR: No path provided\n"
          return 1
        fi

        #@ Define the directories [DIRES] and files [FILES] to process
        set_paths

        #@ Perform the actions
        update_path
        # update_exec "$paths"
        ;;
      clean)
        clean_path
        ;;
      show) show_bins ;;
      check | *)
        check_for_path() {
          case "${PATH}" in
            "${path}:"* | *":${1:-}:"* | *":${1:-}")
              printf '%s is in PATH\n' "${1:-}"
              ;;
            *)
              printf '%s is not in PATH\n' "${1:-}"
              ;;
          esac
        }

        check_for_path "${path}"
        ;;
    esac
  done
}

get_absolute_path() {
  #@ Initialize variables
  _path="$1"
  _dir=""

  #@ Retrieve the absolute path location
  if [ -z "${_path:-}" ]; then
    return 2
  elif [ -n "${CMD_REALPATH}" ]; then
    "${CMD_REALPATH}" -- "${_path}"
  elif [ -n "${CMD_REALPATH}" ]; then
    "${CMD_REALPATH}" -- "${_path}"
  else
    real_path "${_path}"
  # elif [ -d "${_path}" ]; then
  #   (cd -- "${_path}" && pwd)
  # else
  #   _dir="$(cd "$(dirname "${_path}")" && pwd)"
  #   printf '%s/%s\n' "${_dir}" "$(basename "${_path}")"
  fi
}

set_paths() {

  set_paths__cleanup() {
    # rm -f "$DIRES" "$FILES"
    unset exclude_args pattern EXCLUDE_PATTERNS
  }

  set_paths__process() {
    #@ Define exclusion patterns and temporary files
    paths="$(printf '%s' "${paths}" | tr "${delimiter}" '\n')"
    DIRES="$(mktemp)" FILES="$(mktemp)"

    #@ Define exclusion patterns at the top level for reusability
    EXCLUDE_PATTERNS="review temp tmp archive backup"

    #@ Collect paths
    for find_path in $paths; do

      #@ Skip non-existent paths
      [ -e "${find_path}" ] || continue

      #@ Define the find command, prioritizing fd
      if [ -z "${CMD_FD}" ]; then #TODO: Testing find. Reset to 1 when fixed

        #@ Define the base command
        find_cmd="fd ."

        #@ Convert patterns to fd --exclude args
        for pattern in ${EXCLUDE_PATTERNS}; do
          find_omit="${find_omit} --exclude '${pattern}'"
        done

        if [ -d "${find_path}" ]; then
          #@ Include the lookup path
          printf "%s\n" "${find_path}" | tee -a "${DIRES}" > /dev/null

          #@ Define the find options
          find_files="--type file ${find_omit}"
          find_dires="--type directory ${find_omit}"
        else
          #@ Include the lookup path
          printf "%s\n" "${find_path}" | tee -a "${FILES}" > /dev/null
        fi

        #@ Update the directories file
        eval "${find_cmd}" "${find_path}" "${find_dires}" \
          | tee -a "${DIRES}" > /dev/null

        #@ Update the files file
        eval "${find_cmd}" "${find_path}" "${find_files}" \
          | tee -a "${FILES}" > /dev/null
      else
        #@ Define the base command
        find_cmd="find"

        #@ Convert patterns to find -iname args
        for pattern in ${EXCLUDE_PATTERNS}; do
          [ -n "${find_omit}" ] && find_omit="${find_omit} -o"
          find_omit="${find_omit} -iname '${pattern}'"
        done

        #@ Define the find options
        find_dires="\( ${find_omit} \) -prune -o -type d -print"
        find_files="\( ${find_omit} \) -prune -o -type f -print"
      fi

      #@ Update the directories file
      eval "${find_cmd}" "${find_path}" "${find_dires}" | tee -a "${DIRES}" > /dev/null

      #@ Update the files file
      eval "${find_cmd} ${find_path} ${find_files}" | tee -a "${FILES}" > /dev/null
    done

    cat "${FILES}"
  }

  set_paths__main() {
    trap 'set_paths__cleanup' EXIT
    set_paths__cleanup
    set_paths__process
    # bat "$DIRES"
    # bat "$FILES"
  }

  set_paths__main
}

os_type() {
  case "$(uname -a | tr '[:upper:]' '[:lower:]')" in
    *linux*) os_type="linux" ;;
    *darwin*) os_type="mac" ;;
    *) os_type="windows" ;;
  esac

  #TODO This is utterly inadequate, just temporary
  printf "%s" "$os_type"
}

show_bins() {
  if [ "${print_raw}" -eq 1 ]; then
    printf "%s\n" "${PATH}"
    return
  else
    printf "%s\n" "${PATH}" | tr ':' '\n' \
      | eval "$(
        if [ -n "${CMD_BAT}" ]; then
          printf "%s" "${CMD_BAT} --color=always --style=grid --plain --number"
        else
          printf "nl -s '  ' | less"
        fi
      )"
  fi
}

is_absolute_path() {
  case "$1" in
    /*) return 0 ;; # Path starts with /, so it's absolute
    *) return 1 ;;  # Otherwise, it's not absolute
  esac
}

clean_path() {
  #DOC 1. printf '%s\n' "${PATH-}"
  #DOC   - Prints PATH safely
  #DOC   - Handles empty PATH with - modifier
  #DOC
  #DOC 2. tr ':' '\n'
  #DOC   - Converts PATH separators to newlines
  #DOC   - Creates one path per line
  #DOC
  #DOC 3. grep '^/'
  #DOC   - Filters for absolute paths only
  #DOC   - ^/ matches paths starting with /
  #DOC   - Automatically removes invalid paths
  #DOC
  #DOC 4. paste -s -d ':'
  #DOC   - -s serializes input into single line
  #DOC   - -d ':' joins with : delimiter
  #DOC   - Reconstructs PATH format

  printf '%s\n' "${PATH-}" | tr ':' '\n' | grep '^/' | paste -s -d ':'
}

make_exec() {
  _file=$1
  chmod_status=0
  chmod +x "$_file" > /dev/null 2>&1
  chmod_status=$?
  [ "$verbosity" -gt 1 ] && {
    if [ "$chmod_status" -eq 0 ]; then
      printf "    Script initialized: %s\n" "${_file}"
    else
      printf "    Failed to make %s executable: %s\n" "${_file}" "$chmod_status"
    fi
  }
}

add_to_path_ORIG() {
  [ "${debug}" ] && {
    counter=1
    recursive_paths "$paths" | while IFS= read -r bin_path; do
      printf "  %4d %s\n" "$counter" "$bin_path"
      #@ Increment the counter
      counter=$((counter + 1))
    done
    return 0
  }

  #@ Update PATH directories recursively
  recursive_paths "${paths}" | while IFS= read -r bin_path; do
    [ -d "${bin_path}" ] \
      && case ":${PATH}:" in
        *:"${bin_path}":*) ;;
        *)
          case "${action:-}" in
            prepend)
              NEW_PATH="${bin_path}${PATH:+:${PATH}}"
              _action="Appended"
              ;;
            append | *)
              NEW_PATH="${PATH:+${PATH}:}${bin_path}"
              _action="Perpended"
              ;;
          esac

          [ "${verbosity}" -gt 1 ] \
            && printf "    %s to PATH: %s\n" "$_action" "${bin_path}"
          ;;
      esac

    #@ Make scripts executable
    [ -f "${bin_path}" ] \
      && case "$(os_type)" in windows) ;;
      *)
        chmod_status=0
        chmod +x "${bin_path}" > /dev/null 2>&1
        chmod_status=$?

        [ "$verbosity" -gt 1 ] && {
          if [ "${chmod_status}" -eq 0 ]; then
            printf "    Script initialized: %s\n" "${bin_path}"
          else
            printf "    Failed to make %s executable: %s\n" "${bin_path}" "${chmod_status}"
          fi
        }
        ;;
      esac

  done

  #@ Return the new PATH
  printf "%s\n" "${NEW_PATH}"
}

add_to_path() {
  tmp_path=$(mktemp) || return 1 #TODO: Use tempgen
  recursive_paths "${paths}" > "${tmp_path}"

  if [ "${debug}" ]; then
    counter=1
    while IFS= read -r bin_path; do
      printf "  %4d %s\n" "${counter}" "${bin_path}"
      counter=$((counter + 1))
    done < "${tmp_path}"
    rm "${tmp_path}"
    return 0
  fi

  while IFS= read -r bin_path; do
    [ -d "${bin_path}" ] \
      && case ":${PATH}:" in
        *:"${bin_path}":*) ;;
        *)
          case "${action}" in
            prepend)
              PATH="${bin_path}${PATH:+:${PATH}}"
              action_str="Appended"
              ;;
            append | *)
              PATH="${PATH:+${PATH}:}${bin_path}"
              action_str="Perpended"
              ;;
          esac
          [ -d "$bin_path" ] && umask 022 && chmod 755 "$bin_path" #TODO: This is not working. Files created after running the script are not automatically executable.
          [ "${verbosity}" -gt 1 ] \
            && printf "    %s to PATH: %s\n" "${action_str}" "${bin_path}"
          ;;
      esac

    [ -f "${bin_path}" ] \
      && case "$(os_type)" in windows) ;;
      *) make_exec "${bin_path}" ;;
      esac
  done < "${tmp_path}"

  rm "${tmp_path}"
  [ "${verbosity}" -gt 1 ] && show_bins
  export PATH
}

update_path() {
  #@ Copy the PATH variable
  TMP_PATH="${PATH}"

  #@ Build updated path
  while IFS= read -r dir; do
    case "$TMP_PATH" in
      *":$dir:"* | *":$dir:"* | *"$dir:"* | *"$dir"*) ;;
      *)
        case "$action" in
          prepend) TMP_PATH="${dir}${TMP_PATH:+:$TMP_PATH}" ;;
          append | *) TMP_PATH="${TMP_PATH:+${TMP_PATH}:}${dir}" ;;
        esac
        ;;
    esac
  done < "$DIRES"
  unset IFS

  #@ Print or export the PATH variable
  if [ "$print_raw" -eq 1 ]; then
    printf "%s" "$TMP_PATH"
  else
    #@ Update and make the PATH persistent
    PATH="$TMP_PATH"
    export PATH
  fi
}

list() {
  while [ "$#" -ge 1 ]; do
    case "$1" in
      --create | --make | --build)
        action=build
        ;;
      *) item="${item:+${item}${delimiter}}$1" ;;
    esac
    shift
  done

  case "${action}" in
    build) printf "%s" "${item}" ;;
    parse) ;;
    *) ;;
  esac
}

trim() {
  printf "%s" "${1}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'
}

pout() {
  #@ Initialize variables
  key="" val="" tag="" pad="" msg="" trim=true

  #@ Parse message type and content
  while [ "$#" -gt 0 ]; do
    case "$1" in
      -k | --key) key="$2" shift ;;
      -v | --val) val="$2" shift ;;
      -d | --debug)
        if [ "${verbosity:-0}" -ge 4 ]; then
          tag="DEBUG"
        else
          return
        fi
        ;;
      -e | --error) tag="ERROR" ;;
      -w | --warn) tag=" WARN" ;;
      --no-trim) unset trim ;;
      --usage)
        usage_guide
        exit 0
        ;;
      --version)
        printf "%s\n" "${cmd_VERSION}"
        exit 0
        ;;
      *)
        msg="${msg:-}${msg:+${delimiter}}${1}"
        ;;
    esac
    shift
  done

  #@ Format the message
  if [ -n "${key}" ]; then

    #@ Tag missing values
    val="${val:-"${msg:-"{undefined}"}"}"

    #@ Trim leading and trailing whitespace
    if [ -n "${trim:-}" ]; then
      key="$(trim "${key}")"
      val="$(trim "${val}")"
    fi

    case "${tag}" in
      *DEBUG* | *ERROR* | *WARN* | *INFO*)
        #@ Define the separator
        sep=" | "

        #@ Calculate padding for label alignment
        debug_pad="${debug_pad:-18}"
        pad="$(printf "%*s" "$((debug_pad - ${#key}))" "")"

        #@ Format the tagged key-value pair
        msg="$(
          printf "[%s] /> %s <\ %s%s%s%s\n" \
            "${tag}" "${cmd_NAME}" "${pad}" "${key}" "${sep}" "${val}"
        )"
        ;;
      *)
        #@ Define the separator
        sep=": "

        #@ Print the key-value pair
        msg="$(
          printf "%s%s%s\n" "${key}" "${sep}" "${val}"
        )"
        ;;
    esac
  else
    case "${tag}" in
      *DEBUG* | *ERROR* | *WARN* | *INFO*)
        #@ Format the tagged message
        msg="$(
          printf "[%s] /> %s <\ %b\n" \
            "${tag}" "${cmd_NAME}" "${msg}"
        )"
        ;;
      *) msg="$(trim "${msg}")" ;;
    esac
  fi

  #@ Print the message
  case "${tag}" in
    ERROR | WARN) printf "%s\n" "${msg}" >&2 ;;
    *) printf "%s\n" "${msg}" ;;
  esac
}

main "$@"
