#!/bin/sh
# shellcheck disable=SC2317,SC2310
#DOC buildir: Recursively list all directories under a target, honoring .ignore in the target and all parent directories,
#DOC and output a colon-delimited, Unix-style path list for use in PATH.
#DOC Uses fd if available, falls back to POSIX find.

set -e

#{ Default: no target yet
TARGET_DIR=""

#{ Parse options
while [ $# -gt 0 ]; do
  case "$1" in
  --target)
    shift
    TARGET_DIR="$1"
    ;;
  --help | -h)
    printf 'Usage: %s [--target DIR]\n' "$0" >&2
    printf '   or: BUILDIR_TARGET=DIR . %s\n' "$0" >&2
    exit 0
    ;;
  --) # end of options
    shift
    break
    ;;
  -*)
    printf 'Unknown option: %s\n' "$1" >&2
    exit 1
    ;;
  *)
    #? Positional argument (if not already set by --target)
    if [ -z "${TARGET_DIR}" ]; then
      TARGET_DIR="$1"
    fi
    ;;
  esac
  shift
done

#{ Accept input from BUILDIR_TARGET env var (for sourcing)
if [ -z "${TARGET_DIR}" ]; then
  if [ -n "${BUILDIR_TARGET:-}" ]; then
    TARGET_DIR="${BUILDIR_TARGET}"
  else
    printf 'Usage: %s [--target DIR]\n' "$0" >&2
    printf '   or: BUILDIR_TARGET=DIR . %s\n' "$0" >&2
    return 1 2>/dev/null || exit 1
  fi
fi

#{ Remove trailing slash from TARGET_DIR if present
case "${TARGET_DIR}" in
*/) TARGET_DIR=${TARGET_DIR%/} ;;
*) : ;;
esac

#{ Function: Convert Windows path to Unix style using POSIX tools
win2unix_posix() {
  sed -e 's#^\([A-Za-z]\):/#/\1/#' | awk '{print tolower($0)}'
}

#{ Function: Collect all .ignore files from TARGET_DIR up to /
collect_ignore_files() {
  dir="$1"
  while [ "${dir}" != "/" ] && [ -n "${dir}" ]; do
    if [ -f "${dir}/.ignore" ]; then
      printf '%s\n' "${dir}/.ignore"
    fi
    dir=$(dirname "${dir}")
  done
}

#{ Use fd if available for .ignore support and performance
if command -v fd >/dev/null 2>&1; then
  fd . "${TARGET_DIR}" --type d --absolute-path |
    win2unix_posix |
    awk -v t="$(printf '%s' "${TARGET_DIR}" | win2unix_posix || true)" '
            BEGIN { paths = t }
            $0 != t { paths = paths ":" $0 }
            END { printf "%s\n", paths }
        '
  return 0 2>/dev/null || exit 0
fi

#{ ---- POSIX fallback using find and .ignore (from all parent dirs) ----

TMP_PRUNE_FILE=$(mktemp "${TMPDIR:-/tmp}/buildir_prune.XXXXXX")
trap 'rm -f "${TMP_PRUNE_FILE}"' EXIT HUP INT TERM

#{ Gather all ignore patterns from .ignore files up the directory tree
for ignore in $(collect_ignore_files "${TARGET_DIR}"); do
  # shellcheck disable=SC2013
  while IFS= read -r pattern; do
    case "${pattern}" in
    '' | \#*) continue ;;
    *) : ;;
    esac
    pattern_no_slash=${pattern%/}
    # Use find -exec to safely gather matches
    find "${TARGET_DIR}" -type d -name "${pattern_no_slash}" -exec sh -c '
            for match; do
                printf " -path '\''%s'\'' -prune -o" "$match"
            done
        ' sh {} + >>"${TMP_PRUNE_FILE}"
  done <"${ignore}"
done

PRUNE_ARGS=""
if [ -s "${TMP_PRUNE_FILE}" ]; then
  PRUNE_ARGS=$(cat "${TMP_PRUNE_FILE}")
fi
rm -f "${TMP_PRUNE_FILE}"
trap - EXIT HUP INT TERM

#{ Build the find command as a string
FIND_CMD="find '${TARGET_DIR}'${PRUNE_ARGS} -type d -print"

#{ Evaluate the find command, convert Windows paths, and join with colons
eval "${FIND_CMD}" |
  win2unix_posix |
  awk -v t="$(printf '%s' "${TARGET_DIR}" | win2unix_posix || true)" '
        BEGIN { paths = t }
        $0 != t { paths = paths ":" $0 }
        END { printf "%s\n", paths }
    '

#{ If sourced, do not exit the shell
return 0 2>/dev/null || exit 0
