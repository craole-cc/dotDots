#!/bin/sh

#DOC: Build a colon-separated list of directories from a target root,
#DOC: excluding specified patterns, using fd or find as available.
#DOC: Results are sorted and include the root directory.
#DOC: Supports hierarchical .ignore files, depth control, and multiple sort types.

main() {
  set_defaults
  parse_arguments "${@}"
  validate_arguments
  execute_process
}

#DOC: Set default values for all variables
set_defaults() {
  target_root=""
  exclude_patterns=""
  ignore_file=""
  use_fd=""
  sort_type="alphabetical"
  max_depth=""
  output_format="colon"
  show_stats=""
  dry_run=""
  verbose=""
  follow_symlinks=""
  relative_paths=""
}

#DOC: Print usage information
print_usage() {
  printf "Usage: %s --target <directory> [OPTIONS]\n" "${0}"
  printf "\n"
  printf "Required:\n"
  printf "  -t, --target <dir>      Root directory to search\n"
  printf "\n"
  printf "Filtering:\n"
  printf "  -e, --exclude <pattern> Pattern to exclude (can be used multiple times)\n"
  printf "  -i, --ignore-file <file> Path to ignore file for additional patterns\n"
  printf "  -d, --depth <num>       Maximum recursion depth (0 = unlimited)\n"
  printf "\n"
  printf "Sorting:\n"
  printf "  -s, --sort <type>       Sort method: alphabetical, size, modified, depth, none\n"
  printf "                          Add '-reverse' suffix for reverse order\n"
  printf "\n"
  printf "Output:\n"
  printf "  -o, --output <format>   Output format: colon, newline, json\n"
  printf "      --relative          Output relative paths\n"
  printf "      --absolute          Output absolute paths (default)\n"
  printf "\n"
  printf "Behavior:\n"
  printf "      --follow-symlinks   Follow symbolic links\n"
  printf "      --dry-run           Show what would be excluded without output\n"
  printf "      --stats             Show performance statistics\n"
  printf "      --verbose           Verbose output\n"
  printf "\n"
  printf "General:\n"
  printf "  -h, --help              Show this help message\n"
  printf "  -V, --version           Show version information\n"
}

#DOC: Print version information
print_version() {
  printf "pathbuilder 2.0.0\n"
  printf "High-performance directory path builder with hierarchical ignore support\n"
}

#DOC: Parse command line arguments using POSIX-compliant while/case loop
parse_arguments() {
  while [ "${#}" -gt 0 ]; do
    case "${1}" in
    -t | --target)
      [ "${#}" -lt 2 ] && {
        printf "Error: --target requires a value\n" >&2
        exit 2
      }
      target_root="${2}"
      shift
      ;;
    -e | --exclude)
      [ "${#}" -lt 2 ] && {
        printf "Error: --exclude requires a value\n" >&2
        exit 2
      }
      case "${exclude_patterns}" in
      "") exclude_patterns="${2}" ;;
      *) exclude_patterns="${exclude_patterns} ${2}" ;;
      esac
      shift
      ;;
    -i | --ignore-file)
      [ "${#}" -lt 2 ] && {
        printf "Error: --ignore-file requires a value\n" >&2
        exit 2
      }
      ignore_file="${2}"
      shift
      ;;
    -s | --sort)
      [ "${#}" -lt 2 ] && {
        printf "Error: --sort requires a value\n" >&2
        exit 2
      }
      sort_type="${2}"
      shift
      ;;
    -d | --depth)
      [ "${#}" -lt 2 ] && {
        printf "Error: --depth requires a value\n" >&2
        exit 2
      }
      max_depth="${2}"
      shift
      ;;
    -o | --output)
      [ "${#}" -lt 2 ] && {
        printf "Error: --output requires a value\n" >&2
        exit 2
      }
      output_format="${2}"
      shift
      ;;
    --relative)
      relative_paths="1"
      ;;
    --absolute)
      relative_paths=""
      ;;
    --follow-symlinks)
      follow_symlinks="1"
      ;;
    --dry-run)
      dry_run="1"
      ;;
    --stats)
      show_stats="1"
      ;;
    --verbose)
      verbose="1"
      ;;
    -h | --help)
      print_usage
      exit 0
      ;;
    -V | --version)
      print_version
      exit 0
      ;;
    *)
      printf "Error: Unknown argument: %s\n" "${1}" >&2
      print_usage >&2
      exit 2
      ;;
    esac
    shift
  done
}

#DOC: Validate parsed arguments
validate_arguments() {
  #@ Validate required arguments
  case "${target_root}" in
  "")
    printf "Error: --target is required\n" >&2
    print_usage >&2
    exit 2
    ;;
  *) ;;
  esac

  #@ Check if target directory exists
  [ ! -d "${target_root}" ] && {
    printf "Error: Target directory does not exist: %s\n" "${target_root}" >&2
    exit 3
  }

  #@ Validate sort type
  case "${sort_type}" in
  alphabetical | alphabetical-reverse | size | size-reverse | modified | modified-reverse | depth | depth-reverse | none) ;;
  *)
    printf "Error: Invalid sort type: %s\n" "${sort_type}" >&2
    printf "Valid options: alphabetical, size, modified, depth, none (add -reverse for reverse order)\n" >&2
    exit 2
    ;;
  esac

  #@ Validate output format
  case "${output_format}" in
  colon | newline | json) ;;
  *)
    printf "Error: Invalid output format: %s\n" "${output_format}" >&2
    printf "Valid options: colon, newline, json\n" >&2
    exit 2
    ;;
  esac

  #@ Validate depth if specified
  case "${max_depth}" in
  "" | *[!0-9]*)
    case "${max_depth}" in
    "") ;;
    *)
      printf "Error: Depth must be a non-negative integer: %s\n" "${max_depth}" >&2
      exit 2
      ;;
    *) ;;
    esac
    ;;
  *) ;;
  esac

  #@ Convert target to absolute path if needed
  case "${relative_paths}" in
  "")
    #@ Make target_root absolute
    case "${target_root}" in
    /*) ;;
    *) target_root="$(cd "${target_root}" && pwd)" ;; *) ;;
    esac
    ;;
  *) ;;
  esac
}

#DOC: Check if fd command is available
check_fd_available() {
  command -v fd >/dev/null 2>&1 && use_fd="1"
}

#DOC: Read patterns from a single ignore file and store with context
read_single_ignore_file() {
  ignore_file_path="${1}"
  ignore_dir="${ignore_file_path%/*}"

  [ -f "${ignore_file_path}" ] && {
    [ -n "${verbose}" ] && printf "Reading ignore file: %s\n" "${ignore_file_path}" >&2

    while IFS= read -r line || [ -n "${line}" ]; do
      #@ Skip empty lines and comments
      case "${line}" in
      "" | \#*) continue ;;
      *)
        #@ Store pattern with its directory context
        case "${ignore_patterns}" in
        "") ignore_patterns="${ignore_dir}:${line}" ;;
        *) ignore_patterns="${ignore_patterns}|${ignore_dir}:${line}" ;;
        esac
        ;;
      esac
    done <"${ignore_file_path}"
  }
}

#DOC: Read exclude patterns from specified ignore file and discover .ignore files
read_ignore_files() {
  ignore_patterns=""

  #@ Read from explicitly specified ignore file (affects entire tree)
  [ -n "${ignore_file}" ] && {
    [ -f "${ignore_file}" ] || {
      printf "Warning: Ignore file not found: %s\n" "${ignore_file}" >&2
    }
    [ -f "${ignore_file}" ] && {
      while IFS= read -r line || [ -n "${line}" ]; do
        case "${line}" in
        "" | \#*) continue ;;
        *)
          case "${exclude_patterns}" in
          "") exclude_patterns="${line}" ;;
          *) exclude_patterns="${exclude_patterns} ${line}" ;;
          esac
          ;;
        esac
      done <"${ignore_file}"
    }
  }

  #@ Find and read all .ignore files in the directory tree
  find "${target_root}" -name ".ignore" -type f 2>/dev/null | while IFS= read -r ignore_path; do
    read_single_ignore_file "${ignore_path}"
  done
}

#DOC: Update ignore file with CLI exclude patterns if specified
update_ignore_file() {
  [ -n "${ignore_file}" ] && {
    #@ Create ignore file directory if it doesn't exist
    ignore_dir="${ignore_file%/*}"
    case "${ignore_dir}" in
    "${ignore_file}") ignore_dir="." ;; *) ;;
    esac
    [ ! -d "${ignore_dir}" ] && mkdir -p "${ignore_dir}"

    #@ Get CLI-only patterns (exclude patterns that came from CLI args)
    cli_patterns=""
    #@ This is a simplified approach - in practice, you might want to track
    #@ which patterns came from CLI vs files more precisely
    for pattern in ${exclude_patterns}; do
      #@ Add pattern to ignore file if not already present
      if [ -f "${ignore_file}" ]; then
        grep -Fxq "${pattern}" "${ignore_file}" || {
          case "${cli_patterns}" in
          "") cli_patterns="${pattern}" ;;
          *) cli_patterns="${cli_patterns} ${pattern}" ;;
          esac
        }
      else
        case "${cli_patterns}" in
        "") cli_patterns="${pattern}" ;;
        *) cli_patterns="${cli_patterns} ${pattern}" ;;
        esac
      fi
    done

    #@ Write new patterns to ignore file
    for pattern in ${cli_patterns}; do
      [ -n "${verbose}" ] && printf "Adding pattern to ignore file: %s\n" "${pattern}" >&2
      printf "%s\n" "${pattern}" >>"${ignore_file}"
    done
  }
}

#DOC: Check if a directory should be excluded based on hierarchical ignore patterns
should_exclude_directory() {
  dir_to_check="${1}"

  #@ Check CLI exclude patterns (apply globally)
  for pattern in ${exclude_patterns}; do
    case "${dir_to_check}" in
    *"${pattern}"*)
      [ -n "${verbose}" ] && printf "Excluded by CLI pattern '%s': %s\n" "${pattern}" "${dir_to_check}" >&2
      return 0
      ;;
    *) ;;
    esac
  done

  #@ Check hierarchical ignore patterns
  case "${ignore_patterns}" in
  "") return 1 ;; *) ;;
  esac

  #@ Parse ignore patterns (format: dir:pattern|dir:pattern|...)
  old_ifs="${IFS}"
  IFS="|"
  for ignore_entry in ${ignore_patterns}; do
    IFS=":"
    # shellcheck disable=SC2086
    set -- ${ignore_entry}
    ignore_dir="${1}"
    pattern="${2}"
    IFS="${old_ifs}"

    #@ Check if directory is under the ignore file's influence
    case "${dir_to_check}" in
    "${ignore_dir}"/* | "${ignore_dir}")
      case "${dir_to_check}" in
      *"${pattern}"*)
        [ -n "${verbose}" ] && printf "Excluded by hierarchical pattern '%s' from %s: %s\n" "${pattern}" "${ignore_dir}" "${dir_to_check}" >&2
        return 0
        ;;
      *) ;;
      esac
      ;;
    *) ;;
    esac
    IFS="|"
  done
  IFS="${old_ifs}"

  return 1
}

#DOC: Get directory depth relative to target root
get_directory_depth() {
  dir_path="${1}"
  #@ Remove target root from path and count remaining slashes
  relative_path="${dir_path#"${target_root}"}"
  case "${relative_path}" in
  "") printf "0\n" ;;
  /*)
    #@ Count slashes in relative path
    depth=0
    remaining="${relative_path#/}"
    while [ "${remaining}" != "${remaining%/*}" ]; do
      depth=$((depth + 1))
      remaining="${remaining#*/}"
    done
    case "${remaining}" in
    "") ;;
    *) depth=$((depth + 1)) ;;
    esac
    printf "%d\n" "${depth}"
    ;;
  *) printf "0\n" ;;
  esac
}

#DOC: Get directory size (number of files and subdirectories)
get_directory_size() {
  dir_path="${1}"
  [ -d "${dir_path}" ] && find "${dir_path}" -mindepth 1 2>/dev/null | wc -l || printf "0\n"
}

#DOC: Get directory modification time as timestamp
get_directory_mtime() {
  dir_path="${1}"
  [ -d "${dir_path}" ] && stat -c %Y "${dir_path}" 2>/dev/null || printf "0\n"
}

#DOC: Sort directories according to specified sort type
sort_directories() {
  sort_method="${1}"
  temp_file="/tmp/pathbuilder_sort_$$"

  case "${sort_method}" in
  alphabetical)
    sort
    ;;
  alphabetical-reverse)
    sort -r
    ;;
  none)
    cat
    ;;
  size | size-reverse | modified | modified-reverse | depth | depth-reverse)
    #@ Create temporary file with sort keys
    while IFS= read -r dir; do
      case "${sort_method}" in
      size | size-reverse)
        size=$(get_directory_size "${dir}")
        printf "%010d %s\n" "${size}" "${dir}"
        ;;
      modified | modified-reverse)
        mtime=$(get_directory_mtime "${dir}")
        printf "%010d %s\n" "${mtime}" "${dir}"
        ;;
      depth | depth-reverse)
        depth=$(get_directory_depth "${dir}")
        printf "%03d %s\n" "${depth}" "${dir}"
        ;;
      esac
    done >"${temp_file}"

    #@ Sort and extract directory paths
    case "${sort_method}" in
    *-reverse) sort_flags="-rn" ;;
    *) sort_flags="-n" ;;
    esac

    sort ${sort_flags} "${temp_file}" | while IFS= read -r line; do
      printf "%s\n" "${line#* }"
    done

    rm -f "${temp_file}"
    ;;
  *) ;;
  esac
}

#DOC: Build exclude arguments for fd command (CLI patterns only)
build_fd_excludes() {
  fd_excludes=""
  for pattern in ${exclude_patterns}; do
    fd_excludes="${fd_excludes} --exclude ${pattern}"
  done

  #@ Add depth limit if specified
  case "${max_depth}" in
  "") ;;
  *) fd_excludes="${fd_excludes} --max-depth ${max_depth}" ;;
  esac

  #@ Add symlink handling
  case "${follow_symlinks}" in
  "1") fd_excludes="${fd_excludes} --follow" ;; *) ;;
  esac
}

#DOC: Build exclude arguments for find command (CLI patterns only)
build_find_excludes() {
  find_excludes=""
  for pattern in ${exclude_patterns}; do
    case "${find_excludes}" in
    "") find_excludes="-name ${pattern} -prune -o" ;;
    *) find_excludes="${find_excludes} -name ${pattern} -prune -o" ;;
    esac
  done

  #@ Add depth limit if specified
  case "${max_depth}" in
  "") find_depth="" ;;
  *) find_depth="-maxdepth ${max_depth}" ;;
  esac

  #@ Add symlink handling
  case "${follow_symlinks}" in
  "1") find_symlinks="-follow" ;;
  *) find_symlinks="" ;;
  esac
}

#DOC: Convert path to relative format if requested
format_path() {
  path="${1}"
  case "${relative_paths}" in
  "1")
    case "${path}" in
    "${target_root}") printf ".\n" ;;
    "${target_root}/"*) printf "%s\n" "${path#"${target_root}"/}" ;;
    *) printf "%s\n" "${path}" ;;
    esac
    ;;
  *) printf "%s\n" "${path}" ;;
  esac
}

#DOC: Output results in specified format
output_results() {
  case "${output_format}" in
  colon)
    first="1"
    while IFS= read -r dir; do
      formatted_path=$(format_path "${dir}")
      case "${first}" in
      "1")
        printf "%s" "${formatted_path}"
        first=""
        ;;
      *) printf ":%s" "${formatted_path}" ;;
      esac
    done
    printf "\n"
    ;;
  newline)
    while IFS= read -r dir; do
      format_path "${dir}"
    done
    ;;
  json)
    printf "{\n"
    printf "  \"target\": \"%s\",\n" "${target_root}"
    printf "  \"paths\": [\n"
    first="1"
    while IFS= read -r dir; do
      formatted_path=$(format_path "${dir}")
      case "${first}" in
      "1")
        printf "    \"%s\"" "${formatted_path}"
        first=""
        ;;
      *) printf ",\n    \"%s\"" "${formatted_path}" ;;
      esac
    done
    printf "\n  ]\n}\n"
    ;;
  *) ;;
  esac
}

#DOC: Execute the main process to find directories and build path string
execute_process() {
  start_time=$(date +%s 2>/dev/null || echo "0")
  dir_count=0
  excluded_count=0

  check_fd_available
  read_ignore_files
  update_ignore_file

  #@ Create temporary file for directory list
  temp_dirs="/tmp/pathbuilder_dirs_$$"

  if [ -n "${use_fd}" ]; then
    #@ Use fd for initial directory discovery (CLI excludes only)
    build_fd_excludes
    case "${fd_excludes}" in
    "") eval "fd --type d . '${target_root}'" >"${temp_dirs}" ;;
    *) eval "fd --type d ${fd_excludes} . '${target_root}'" >"${temp_dirs}" ;;
    esac
  else
    #@ Use find as fallback (CLI excludes only)
    build_find_excludes
    case "${find_excludes}" in
    "")
      #@ No CLI excludes, simple find
      eval "find '${target_root}' ${find_symlinks} ${find_depth} -type d" >"${temp_dirs}"
      ;;
    *)
      #@ With CLI excludes
      eval "find '${target_root}' ${find_symlinks} ${find_depth} ${find_excludes} -type d -print" >"${temp_dirs}"
      ;;
    esac
  fi

  #@ Process results
  if [ -n "${dry_run}" ]; then
    printf "Dry run mode - showing what would be excluded:\n" >&2
    while IFS= read -r dir; do
      if should_exclude_directory "${dir}"; then
        printf "EXCLUDE: %s\n" "${dir}" >&2
        excluded_count=$((excluded_count + 1))
      else
        printf "INCLUDE: %s\n" "${dir}" >&2
        dir_count=$((dir_count + 1))
      fi
    done <"${temp_dirs}"
  else
    #@ Filter and collect results
    final_dirs="/tmp/pathbuilder_final_$$"

    while IFS= read -r dir; do
      if ! should_exclude_directory "${dir}"; then
        printf "%s\n" "${dir}" >>"${final_dirs}"
        dir_count=$((dir_count + 1))
      else
        excluded_count=$((excluded_count + 1))
      fi
    done <"${temp_dirs}"

    #@ Sort and output results
    [ -f "${final_dirs}" ] && {
      sort_directories "${sort_type}" <"${final_dirs}" | output_results
    }

    rm -f "${final_dirs}"
  fi

  rm -f "${temp_dirs}"

  #@ Show statistics if requested
  if [ -n "${show_stats}" ]; then
    end_time=$(date +%s 2>/dev/null || echo "0")
    duration=$((end_time - start_time))

    printf "\nStatistics:\n" >&2
    printf "  Directories found: %d\n" "${dir_count}" >&2
    printf "  Directories excluded: %d\n" "${excluded_count}" >&2
    printf "  Total processing time: %ds\n" "${duration}" >&2
    printf "  Sort method: %s\n" "${sort_type}" >&2
    printf "  Output format: %s\n" "${output_format}" >&2
    case "${max_depth}" in
    "") printf "  Max depth: unlimited\n" >&2 ;;
    *) printf "  Max depth: %s\n" "${max_depth}" >&2 ;;
    esac
  fi
}

#@ Execute main function with all arguments
main "${@}"
