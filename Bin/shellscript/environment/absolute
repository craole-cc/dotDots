#!/bin/sh
# shellcheck enable=all

main() {
  #| Initialization
  trap sanitize_environment EXIT INT TERM
  set_defaults
  # parse_arguments "$@"
  # cache_commands
  # verbosity=4
  pout --debug --key "Output Mode" --val "${verbosity}"
  pout --debug --key "Script Mode" --val "${fail_on_error}"

  echo pop
  exit 0
  #| Validation
  validate_environment

  #| Termination
  # execute_process
}

set_defaults() {
  #| Script Metadata
  # cmd_PATH="$0"
  cmd_NAME="absolute"
  # cmd_NAME="$(basename "${cmd_PATH}")"
  # cmd_HOME="$(dirname "${cmd_PATH}")"
  cmd_VERSION="1.1.0"
  cmd_AUTHOR="Craole"
  cmd_USAGE="${cmd_NAME} [OPTIONS] <target_path>"
  cmd_DESCRIPTION="normalizes a given target path by resolving symbolic links and removing redundant elements such as '.' and '..', essentially returning the absolute path."

  #| Operational Variables
  debug_pad=20 #? Positive integer
  delimiter="$(printf '\037')"
  # delimiter="|"
  IFS="${delimiter}"

  #| Operational Modes
  set_modes --verbosity debuga
  set_modes --fail-on-error true

  #| Process Variables
  action="show"
  print_raw=0
  paths=""

  #| Commands
  cmd_list="$(list --build realpath readlink)"
}

set_modes() {
  case "$1" in
  --verbosity)
    options="$(
      list \
        0 quiet off false \
        1 error \
        2 warn \
        3 info on true \
        4 debug \
        5 trace \
        --delimiter '|' \
        --build
    )"
    default=3

    #| Verbosity Level
    case "${2:-}" in
    0 | off | false | quiet | " ") verbosity=0 ;;
    1 | err*) verbosity=1 ;;
    2 | warn*) verbosity=2 ;;
    3 | info*) verbosity=3 ;;
    4 | debug) verbosity=4 ;;
    5 | trace) verbosity=5 ;;
    *)
      pout --warn --key "Invalid verbosity level" "${2}"
      pout "Valid options: " "${options}"
      pout "Default option: " "${default}"
      ;;
    esac
    ;;
  --fail-on-error)
    #| Script Operation Mode
    options="$(
      list \
        --build 1 on true enabled 0 off false disabled \
        --delimiter ', '
    )"
    default=1

    case "${2:-}" in
    1 | true | on | enabled) fail_on_error=1 ;;
    0 | false | off | disabled) fail_on_error=0 ;;
    *)
      pout --error "Invalid 'fail_on_error' mode" ": [${2}]" \
        "\nValid options: " "${options}"
      exit 1
      ;;
    esac
    ;;
  esac
}

cache_commands() {
  for cmd in $(list --build "$@"); do
    #@ Initialize variables
    cmd_key="" cmd_val="" cmd_env=""

    #@ Define the key in uppercase, prefixed with "CMD_"
    cmd_key="$(printf "CMD_%s" "${cmd}" | tr '[:lower:]' '[:upper:]')"
    pout --debug --key "[${cmd}] CMD_KEY" --val "${cmd_key}"

    #@ Retrieve the path, otherwise return empty string
    cmd_val="$(command -v "${cmd}" 2>/dev/null || printf '')"
    pout --debug --key "[${cmd}] CMD_VAL" --val "${cmd_val}"

    #@ Create the environment variable of the command's location
    eval export "$(printf "%s=%s" "${cmd_key}" "${cmd_val}")"
    cmd_env="$(env | grep --color "${cmd_key}")"
    pout --debug --key "[${cmd}] CMD_ENV" --val "${cmd_env}"
  done
}

parse_arguments() {
  while [ $# -gt 0 ]; do
    case $1 in
    -h | --help) display_info --usage ;;
    -v | --version) display_info --version ;;
    -q | --quiet) verbosity=quiet ;;
    -d=* | --verbose=*) verbosity="${1#*=}" ;;
    -d | --verbose)
      case "$2" in
      */*) verbosity="debug" ;;
      *)
        if [ -n "${2:-}" ]; then
          verbosity="$2"
          shift
        else
          verbosity="debug"
        fi
        ;;
      esac
      ;;
    -*) terminate_process --error opt "$1" ;;
    *) target_path="$1" ;;
    esac
    shift
  done

  #@ Normalize the verbosity level
  case "${verbosity:-}" in
  0 | quiet | off | false) verbosity=0 ;;
  1 | error) verbosity=1 ;;
  2 | warn*) verbosity=2 ;;
  5 | trace) verbosity=5 ;;
  4 | debug) verbosity=4 ;;
  3 | info | on | *) verbosity=3'' ;;
  esac

  #@Set the current directory as the default path
  target_path="${target_path:-"$(pwd -P)"}"
}

normalize_path() {
  #@ Initialize variables
  input_path="$1"
  abs_path=""
  result=""

  #@ Handle absolute vs. relative paths
  case "${input_path}" in
  /*) abs_path="${input_path}" ;;
  *) abs_path="$(pwd)/${input_path}" ;;
  esac

  #@ Set initial slash for absolute paths
  case "${abs_path}" in
  /*) result="/" ;;
  *) ;;
  esac

  #@ Save IFS and set new one for path splitting
  OLDIFS="${IFS}"
  IFS="/"

  #@ Process each component
  for component in ${abs_path}; do
    #@ Skip empty components and current directory
    if [ -z "${component}" ] || [ "${component}" = "." ]; then
      continue
    fi

    if [ "${component}" = ".." ]; then
      #@ Go up one directory level
      if [ "${result}" = "/" ]; then
        #@ Stay at root if already there
        continue
      elif [ -z "${result}" ]; then
        #@ For relative paths starting with ..
        result="../"
      else
        #@ Remove trailing slash if present
        result="${result%/}"

        #@ Go up one level
        result="$(dirname "${result}")"

        #@ Handle empty result (happens when we're at the top of a relative path)
        [ "${result}" = "." ] && result=""
      fi
    else
      #@ Add component to result
      if [ "${result}" = "/" ]; then
        result="/${component}"
      elif [ -z "${result}" ]; then
        result="${component}"
      else
        result="${result}/${component}"
      fi
    fi
  done

  #@ Restore IFS
  IFS="${OLDIFS}"

  #@ Ensure we return at least "/" for root directory or "." for empty
  if [ -z "${result}" ]; then
    result="."
  fi

  #@ Return the normalized path
  printf "%s" "${result}"
}

resolve_path() {
  [ -n "${1:-}" ] || {
    terminate_process --error "resolve_path" "missing target path to resolve"
    exit 2
  }

  target="$1"
  max_depth=50 #? Prevent infinite recursion
  current_depth=${2:-0}

  #@ Check recursion depth to prevent infinite loops
  if [ "${current_depth}" -ge "${max_depth}" ]; then
    printf "Error: Maximum symlink recursion depth reached (%s)\n" "${max_depth}" >&2
    return 1
  fi

  #@ Resolve the target directory and get its physical path
  if ! physical_dir="$(cd -P "$(dirname "${target}")" 2>/dev/null && pwd -P)"; then
    #@ Return original if directory doesn't exist
    printf "%s" "${target}"
    return 1
  fi

  physical_base="$(basename "${target}")"
  physical_path="${physical_dir}/${physical_base}"

  #@ Check if the basename is a symlink and resolve it
  if [ -L "${physical_path}" ]; then
    link_target="$(readlink "${physical_path}")"

    #@ Handle relative vs. absolute links
    case "${link_target}" in
    /*) resolved_link="${link_target}" ;;
    *) resolved_link="${physical_dir}/${link_target}" ;;
    esac

    #@ Recursively resolve the link target with incremented depth
    next_depth=$((current_depth + 1))
    resolve_path "${resolved_link}" "${next_depth}"
  else
    #@ Return the fully normalized physical path
    printf "%s" "${physical_path}"
  fi
}

execute_process() {
  #@ Use realpath if available as it is more efficient
  if command -v realpathf >/dev/null 2>&1; then
    normalized_path="$(realpath -- "${target_path}")"
  else
    normalized_path="$(resolve_path "${target_path}")"
  fi

  terminate_process --output "${normalized_path}"
}

terminate_process() {
  case "$1" in
  --error) display_info "${1:-}-${2:-}" "${3:-}" ;;
  --output) display_info "${1:-}" "${2:-}" ;;
  *) ;;
  esac
}

list() {
  #@ Initialize variables
  list=""
  action="build"
  separator="${delimiter:-" "}"

  #@ Parse arguments
  while [ "$#" -ge 1 ]; do
    case "$1" in
    --create | --make | --build) action=build ;;
    --delim* | --sep*) separator="${2:-}" shift ;;
    *) list="${list:+${list}${delimiter}}$1" ;;

    esac
    shift
  done

  #@ Add the defined separator, if necessary
  [ -n "${separator:-}" ] &&
    list=$(
      printf "%s" "${list:-}" |
        sed "s/${delimiter}/${separator}/g"
    )

  case "${action:-}" in
  build) printf "%s" "${list:-}" ;;
  parse) ;;
  *) ;;
  esac
}

trim() {
  printf "%s" "${1}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'
}

pout() {
  #@ Initialize variables
  key="" val="" tag="" pad="" msg="" trim=true

  #@ Parse message type and content
  while [ "$#" -gt 0 ]; do
    case "$1" in
    -k | --key) key="$2" shift ;;
    -v | --val) val="$2" shift ;;
    -d | --debug)
      if [ "${verbosity:-0}" -ge 4 ]; then
        tag="DEBUG"
      else
        return
      fi
      ;;
    -e | --error) tag="ERROR" ;;
    -w | --warn) tag=" WARN" ;;
    -i | --info) tag=" INFO" ;;
    -t | --trace) tag="TRACE" ;;
    --no-trim) unset trim ;;
    --usage)
      usage_guide
      exit 0
      ;;
    --version)
      printf "%s\n" "${cmd_VERSION}"
      exit 0
      ;;
    *) msg="${msg:+${msg}${delimiter}}$1" ;;
    esac
    shift
  done

  #@ Format the message
  if [ -n "${key}" ]; then

    #@ Tag missing values
    val="${val:-"${msg:-"{undefined}"}"}"

    #@ Trim leading and trailing whitespace
    if [ -n "${trim:-}" ]; then
      key="$(trim "${key}")"
      val="$(trim "${val}")"
    fi

    case "${tag}" in
    *DEBUG* | *ERROR* | *WARN* | *INFO*)
      #@ Define the separator
      sep=" | "

      #@ Calculate padding for label alignment
      debug_pad="${debug_pad:-18}"
      pad="$(printf "%*s" "$((debug_pad - ${#key}))" "")"

      #@ Format the tagged key-value pair
      msg="$(
        printf "[%s] /> %s <\ %s%s%s%s\n" \
          "${tag}" "${cmd_NAME}" "${pad}" "${key}" "${sep}" "${val}"
      )"
      ;;
    *)
      #@ Define the separator
      sep=": "

      #@ Print the key-value pair
      msg="$(
        printf "%s%s%s\n" "${key}" "${sep}" "${val}"
      )"
      ;;
    esac
  else
    case "${tag}" in
    *DEBUG* | *ERROR* | *WARN* | *INFO*)
      #@ Format the tagged message
      msg="$(
        printf "[%s] /> %s <\ %b\n" \
          "${tag}" "${cmd_NAME}" "${msg}"
      )"
      ;;
    *) msg="$(trim "${msg}")" ;;
    esac
  fi

  #@ Print the message
  case "${tag}" in
  ERROR | WARN) printf "%s\n" "${msg}" >&2 ;;
  *) printf "%s\n" "${msg}" ;;
  esac
}

sanitize_environment() {
  #@ Remove varibles
  unset verbosity
  unset target_path
  unset normalized_path
  unset target_path
  unset next_target_path_component
  unset error_generated
}

display_info() {
  case "$1" in
  --error*)
    [ "${verbosity}" -eq 0 ] && return
    case "$1" in
    path) printf "Invalid path: %s" "$2" ;;
    circ) printf "Circular symbolic link: %s" "$2" ;;
    info) printf "Invalid verbosity level: %s" "$2" ;;
    arg) printf "<target_path> required \nUsage: %s\n" "${cmd_USAGE}" ;;
    opt) printf "Unrecognized option: %s" "$2" ;;
    cd) printf "Change directory operation failed" ;;
    *)
      shift
      printf "%b" "$*"
      ;;
    esac
    ;;
  --output)
    case "${verbosity}" in
    3 | on | info) printf "%s\n" "${normalized_path}" ;;
    4 | debug | trace)
      printf "    Verbosity: %s\n" "${verbosity}"
      printf "  Target Path: %s\n" "${target_path}"
      printf "Absolute Path: %s\n" "${normalized_path}"
      ;;
    0 | off | quiet | *) ;;
    esac
    ;;
  --version)
    printf "%s" "${cmd_VERSION}"
    ;;
  --usage)
    cat <<USAGE
${cmd_NAME} [v.${cmd_VERSION}]

DESCRIPTION:
${cmd_NAME} [v.${cmd_VERSION}] by ${cmd_AUTHOR}, ${cmd_DESCRIPTION}

USAGE:
  ${cmd_USAGE}

OPTIONS:
  -h, --help       Show detailed help information and exit.
  -v, --version    Show the script version number and exit.
  -d, --verbose    Display additional information during execution: [current: "${verbosity}"].
  -q, --quiet      Supress all output. Error flag will still work.

ARGUMENTS:
  target_path      The path to normalize.
  verbosity        The verbosity level

Exit status:
  0                   The path was successfully normalized.
  1                   An error occurred.

Examples:
  ${cmd_NAME} -d=debug ~/../../usr/bin
  ${cmd_NAME} /var/log/../lib --verbose info
  ${cmd_NAME} /var/run

USAGE
    ;;
  *) printf "%s\n" "$*" ;;
  esac
}

main "$@"
