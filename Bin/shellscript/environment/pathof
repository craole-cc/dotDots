#!/bin/sh
# shellcheck enable=all

main() {
  set_defaults
  parse_arguments "$@"
  execute_process
}

set_defaults() {
  #| Script Metadata
  cmd_PATH="$(search_all "$0")"
  cmd_NAME="$(basename "${cmd_PATH}")"
  cmd_HOME="$(dirname -- "${cmd_PATH}")"
  cmd_AUTHOR="Craig 'Craole' Cole"
  cmd_USAGE="${cmd_NAME} [OPTIONS] <target_path>"
  cmd_VERSION="1.6.0"
  cmd_DESCRIPTION="Search for a target in the filesystem and in the PATH"
  cmd_DEPENDENCIES="coreutils, fd, find"

  #| Operational Modes
  trap cleanup EXIT INT TERM
  set -e
  set -u
  debug=1

  #| Global Variables
  delimiter="$(printf '\037')"
  LF="$(printf '\n')"
  IFS="${delimiter}"
  CMD_FD="${CMD_FD:-"$(command -v fd 2>/dev/null)"}"
  delimiter=" "
  search_types="all downward upward exe path file dir"
  search_directions="up upwards down downwards both"
  sort_types="depth alphanumeric natural unsorted"
  result_limit_types="first last none"
  exe_types=".sh .rs .py .rb .exe .cmd .bat"
  debug_pad=20

  #| Process Variables
  cwd="$(pwd -P)"
  depth=100
  search_direction="both"
  get_prj=""
  get_dir=""
  get_tag=""
  hidden=""
  result_limit=""
  limit=""
  sort_type="depth" # depth, alphanumeric, natural, unsorted
  path=""
  pathlist=""
  pattern=""
  case_insensitive="true"
  fuzzy_match="true"
  # smart_exec="true"
  search_type="all"
}

parse_arguments() {
  while [ "$#" -ge 1 ]; do
    case "$1" in
    -h | --help)
      pout --usage
      ;;
    -v | --version)
      pout --version
      ;;
    -d | --debug | --dry-run)
      debug=1
      ;;
    -t | --type | --search-type)
      if [ -n "${2:-}" ]; then
        case "$2" in
        "${search_types}") search_type="$2" ;;
        *)
          printf "Invalid sort type: %s\n" "$2" >&2
          exit 1
          ;;
        esac
        shift
      else
        pout --debug "Proceeding with default sort type: ${sort_type}"
      fi
      ;;
    --direction)
      if [ -n "${2:-}" ]; then
        case "$2" in
        "${search_directions}") search_direction="$2" ;;
        *)
          printf "Invalid search direction: %s\n" "$2" >&2
          exit 1
          ;;
        esac
        shift
      else
        pout --debug "Proceeding with default search direction: ${search_direction}"
      fi
      ;;
    -c | --cwd | -[bB] | --base)
      if [ -z "$2" ]; then
        printf "Missing argument for %s\n" "$1" >&2
        exit 1
      elif [ ! -d "$2" ]; then
        printf "Invalid directory: %s\n" "$2" >&2
        exit 1
      else
        cwd="$2"
        shift
      fi
      ;;
    -l | --*limit*)
      if [ -n "${2:-}" ]; then
        #@ Initialize variables
        valid_type=false

        #@ Check if the argument is in the predifined list
        for lt in ${result_limit_types}; do
          if [ "$2" = "${lt}" ]; then
            valid_type=true
            break
          fi
        done

        #@ Check if the argument is 0 or a positive integer
        if [ "${valid_type}" = false ]; then
          case "$2" in
          *[!0-9]* | '')
            #? Contains non-digits or empty
            printf "Invalid limit: %s. Must be one of: %s or 0/positive integer.\n" \
              "$2" "${result_limit_types}" >&2
            exit 1
            ;;
          0 | [1-9]* | *)
            #? Valid non-negative integer
            valid_type=true
            ;;
          esac
        fi

        result_limit="$2"
        shift
      else
        result_limit=1
        pout --debug "Proceeding with default result limit: ${result_limit}"
      fi
      ;;
    -s | --sort)
      if [ -n "$2" ]; then
        case "$2" in
        "${sort_types}") sort_type="$2" ;;
        *)
          printf "Invalid sort type: %s\n" "$2" >&2
          exit 1
          ;;
        esac
        shift
      else
        pout --debug "Proceeding with default sort type: ${sort_type}"
      fi
      ;;
    --closest)
      sort_type="closest"
      result_limit=1
      depth="any"
      direction="both"
      ;;
    --first)
      sort_type="alnum"
      result_limit=1
      depth="any"
      direction="both"
      ;;
    -n | --basename | --*name | --tag)
      get_tag=true
      sort_type="alnum"
      result_limit=1
      depth="any"
      direction="both"
      ;;
    -D | --dir* | --*home)
      get_dir=true
      sort_type="alnum"
      result_limit=1
      depth="any"
      direction="both"
      ;;
    -p | --project | --prj)
      get_prj=true
      sort_type="alnum"
      limit=1
      depth="any"
      direction="up"
      ;;
    --no-smart | --no-extensive | --no-deep)
      smart_exec=0
      ;;
    --include-hidden | --hidden)
      hidden=true
      ;;
    --no-hidden)
      hidden=false
      ;;
    -[lL] | --list)
      list_mode=1
      ;;
    -[iI] | --item | --pattern)
      pattern="${pattern:+${pattern}${delimiter}}$2"
      shift
      ;;
    *)
      pattern="${pattern:+${pattern}${delimiter}}$1"
      ;;
    esac
    shift
  done

  pout --debug --key "PATTERN" --val "   ${pattern}"
  pout --debug --key "HIDDEN" "${hidden}"
  pout --debug --key "SORT" --val "${sort_type}"
  pout --debug --key "LIMIT" --val "${limit}"
  pout --debug --key "DEPTH" --val "${depth}"
  pout --debug --key "DIRECTION" --val "${direction}"
  pout --debug --key "NAME" --val "${get_tag}"
  pout --debug --key "DIR" --val "${get_dir}"
  pout --debug --key "PRJ" --val "${get_prj}"
  # pout --debug --key "SMART" --val "${smart_exec}"
  # pout --debug --key "LIST" --val "${list_mode}"
  pout --debug --key "LIMIT" --val "${result_limit}"

  pattern="$(prep_lookup "${pattern:-}")"
  pout --debug --key "PATTERN (Prepped)" "${pattern}"

  case "${depth}" in
  least | closest) depth=0 ;;
  one*) depth="1" ;;
  ![0-9]* | '' | any | *) depth="" ;;
  esac
  pout --debug --key "DEPTH (Prepped)" "${depth}"
}

execute_process() {
  #@ Exit if the target path is the current working directory
  # [ "${cwd}" = "${pattern}" ] && {
  #   printf "%s" "${cwd}"
  #   exit 0
  # }

  # result="$(search_all)"
  result="$(search_all "${pattern}")"

  if [ -n "${get_tag}" ]; then
    result="$(basename "${result}")"
  elif [ -n "${get_dir}" ]; then
    result="$(dirname "${result}")"
  fi

  printf "%s" "${result}"

  #@ Check if the target path is a known binary
  # if [ -e "$path" ]; then
  #   printf "%s" "$path"
  # elif [ "$path" ]; then
  #   # logline \
  #   #   --error "$cmd_NAME" "The path to '$1' does not exist" \
  #   #   --fatal 2
  #   printf "ERROR: %s |> The path to '%s' does not exist" "$cmd_NAME" "$1"
  #   printf "%s" "$cmd_USAGE"
  #   return 2
  # else
  #   # logline \
  #   #   --error "$cmd_NAME" "Unable to locate path to '$1'" \
  #   #   --fatal 1
  #   printf "ERROR: %s |> Unable to locate path to '%s'" "$cmd_NAME" "$1"
  #   printf "%s" "$cmd_USAGE"
  #   return 1
}

prep_lookup() {
  #DOC Description
  #DOC Parse arguments, resolve the given pattern to an absolute path if it is relative,
  #DOC and return the resolved path. Otherwise, return the original pattern.
  #DOC
  #DOC Usage
  #DOC prep_lookup [options] pattern
  #DOC
  #DOC Options
  #DOC -c, --cwd cwd    The current working directory to resolve the pattern in.
  #DOC
  #DOC Examples
  #DOC    prep_lookup -c /usr/share/icons foo.png
  #DOC    $(pwd)/foo.png
  #DOC
  #DOC    prep_lookup ./usr/share/icons/foo.png
  #DOC    /usr/share/icons/foo.png${reset}

  #@ Parse arguments
  while [ "$#" -ge 1 ]; do
    case $1 in
    -c | --cwd) cwd="$2" ;;
    *) pattern="$1" ;;
    esac
    shift
  done

  #@ Resolve the pattern to an absolute path if it is relative
  #@ Otherwise, return the original pattern
  case "${pattern}" in
  .)
    #@ Return the current working directory
    printf "%s" "${cwd}"
    exit 0
    ;;
  ./*)
    #@ Remove the leading './' from the pattern if present
    pattern="${pattern#./}"

    #@ Return the prep_lookupd path
    printf "%s" "${cwd}/${pattern}"
    ;;
  *)
    #@ Return the original pattern
    printf "%s" "${pattern}"
    ;;
  esac
}

sort_results() {
  while [ "$#" -ge 1 ]; do
    case "$1" in
    --type | -t) sort_type="$2" ;;
    --list) sort_results="$2" ;;
    *) sort_results="$1" ;;
    esac
    shift
  done

  case "$sort_type" in
  depth | d*)
    printf "%s" "$sort_results" |
      awk -v ORS="\n" -v tab="$(printf '\t')" '
        BEGIN { FS = "/" }

        function get_sort_priority(str) {
          first = substr(str, 1, 1)
          #@ Return "1" for punctuation (highest priority)
          if (first ~ /^[[:punct:]]/) return "1"

          #@ Return "2" for numbers (second priority)
          if (first ~ /^[0-9]/) return "2"

          #@ Return "3" for everything else (lowest priority)
          return "3"
        }

        #@ Pad numbers in string while preserving non-numeric characters
        function pad_numbers(str) {
          result = ""
          pos = 1
          len = length(str)

          while (pos <= len) {
            #@ Process numeric sequences
            if (substr(str, pos, 1) ~ /^[0-9]/) {
                num = ""
                #@ Accumulate consecutive digits
                while (pos <= len && substr(str, pos, 1) ~ /^[0-9]/) {
                    num = num substr(str, pos, 1)
                    pos++
                }
                #@ Zero-pad number to 10 digits for correct sorting
                result = result sprintf("%010d", num)
            } else {
                #@ Preserve non-numeric character
                result = result substr(str, pos, 1)
                pos++
            }
          }
          return result
        }

        {
          #@ Calculate directory depth
          depth = NF - 1

          #@ Initialize empty sort key
          sort_key = ""

          #@ Process each path component
          for (i = 1; i <= NF; i++) {
            if ($i != "") {
              #@ Normalize case
              part = tolower($i)

              #@ Get sort category (1=punct, 2=num, 3=other)
              priority = get_sort_priority(part)

              #@ Convert numbers to padded form
              padded = pad_numbers(part)

              #@ Append to sort key with comma separator
              sort_key = sort_key priority padded ","
            }
          }

          #@ Clean up trailing delimiter
          if (sort_key != "") {
            sort_key = substr(sort_key, 1, length(sort_key) - 1)
          }

          #@ Output format: depth<tab>sort_key<tab>original_path
          printf "%d%s%s%s%s\n", depth, tab, sort_key, tab, $0
        }' |
      sort | cut -f3 | grep --invert-match '^$'
    ;;
  lexical | l* | alphanumeric | alnum | a*)
    sort_cmd="sort --numeric-sort"
    with_punctuation() {
      printf "%s" "$1" |
        while IFS= read -r line; do
          case "$line" in
          */[[:punct:]]*) printf "%s\n" "$line" ;;
          esac
        done | eval "$2"
    }
    without_punctuation() {
      printf "%s" "$1" |
        while IFS= read -r line; do
          case "$line" in
          */[[:punct:]]*) ;;
          *) printf "%s\n" "$line" ;;
          esac
        done | eval "$2"
    }

    printf "%s" "$(
      with_punctuation "$sort_results" "$sort_cmd"
      without_punctuation "$sort_results" "$sort_cmd"
    )" | grep --invert-match '^$'
    ;;
  natural | n*)
    printf "%s" "$sort_results" |
      awk -v ORS="\n" -v tab="$(printf '\t')" '
            BEGIN { FS = "/" }

            function get_sort_priority(str) {
              first = substr(str, 1, 1)
              #@ Return "1" for punctuation (highest priority)
              if (first ~ /^[[:punct:]]/) return "1"

              #@ Return "2" for numbers (second priority)
              if (first ~ /^[0-9]/) return "2"

              #@ Return "3" for everything else (lowest priority)
              return "3"
            }

            #@ Pad numbers in string while preserving non-numeric characters
            function pad_numbers(str) {
              result = ""
              pos = 1
              len = length(str)

              while (pos <= len) {
                #@ Process numeric sequences
                if (substr(str, pos, 1) ~ /^[0-9]/) {
                    num = ""
                    #@ Accumulate consecutive digits
                    while (pos <= len && substr(str, pos, 1) ~ /^[0-9]/) {
                        num = num substr(str, pos, 1)
                        pos++
                    }
                    #@ Zero-pad number to 10 digits for correct sorting
                    result = result sprintf("%010d", num)
                } else {
                    #@ Preserve non-numeric character
                    result = result substr(str, pos, 1)
                    pos++
                }
              }
              return result
            }

            {
              #@ Initialize empty sort key
              sort_key = ""

              #@ Process each path component
              for (i = 1; i <= NF; i++) {
                if ($i != "") {
                  #@ Normalize case
                  part = tolower($i)

                  #@ Get sort category (1=punct, 2=num, 3=other)
                  priority = get_sort_priority(part)

                  #@ Convert numbers to padded form
                  padded = pad_numbers(part)

                  #@ Append to sort key with comma separator
                  sort_key = sort_key priority padded ","
                }
              }

              #@ Clean up trailing delimiter
              if (sort_key != "") {
                sort_key = substr(sort_key, 1, length(sort_key) - 1)
              }

              #@ Output format: depth<tab>sort_key<tab>original_path
              printf "%d%s%s%s%s\n", depth, tab, sort_key, tab, $0
            }' |
      sort | cut -f3 | grep --invert-match '^$'
    ;;
  *)
    printf "%s" "$sort_results"
    ;;
  esac
}

limit_results() {
  while [ "$#" -ge 1 ]; do
    case "$1" in
    --limit) limit="$2" ;;
    --list) list="$2" ;;
    *) list="$1" ;;
    esac
    shift
  done

  case "$limit" in
  '') printf "%s" "$list" ;;
  ![0-9]*) printf "%s" "$list" | head -n 1 ;;
  *) printf "%s" "$list" | head -n "$limit" ;;
  esac
}

search_exe() {
  #DOC Search for an executable in the PATH and with common extensions.
  #DOC Usage: search_exe <executable_pattern>
  #DOC Description:
  #DOC   This function attempts to find the specified executable by searching
  #DOC   the system's PATH. If the executable is not found, it extends the search
  #DOC   to include common file extensions if the 'smart_exec' option is enabled.
  #DOC   The function returns the path of the executable if found, or an empty string
  #DOC   if the executable is not located.
  #DOC Options:
  #DOC   <executable_pattern>: The pattern or name of the executable to search for.
  #DOC Notes:
  #DOC   - The function will utilize the `command -v` command to check for the
  #DOC     executable in the PATH.
  #DOC   - If 'smart_exec' is enabled, the function will also search for executables
  #DOC     with common extensions.
  #DOC   - Debugging information is printed if 'debug' is enabled.

  #@ Parse arguments
  exe_pattern="${1:-}"

  #@ Search for executable in PATH
  if command -v "${exe_pattern}" 2>/dev/null; then
    exe_path="$(command -v "${exe_pattern}" 2>/dev/null)"
  else
    exe_path=""
  fi

  #@ Extended search for executables with common extensions if not found
  if [ -z "${exe_path:-}" ]; then
    case "${smart_exec:-}" in
    1 | on | true)
      for ext in ${exe_types:-}; do
        potential_exe="${exe_pattern}${ext}"
        pout --debug "Trying ${potential_exe}"

        if command -v "${potential_exe}" 2>/dev/null; then
          exe_path="$(command -v "${potential_exe}")"
          break
        else
          exe_path="$(find_path --downwards --for "${potential_exe}")"
          if [ -n "${exe_path}" ]; then
            break
          else
            pout --debug "No results for ${potential_exe}"
          fi
        fi
      done
      ;;
    '' | off | no | false | *) ;;
    esac
  else
    pout --debug "Unable to determine executable path for ${exe_pattern}"
  fi

  #@ Return search result
  printf "%s" "${exe_path:-}"
}

find_path() {
  #@ Initialize variables
  search_path="${cwd}"
  search_pattern=""
  search_type=""
  search_item=""
  search_results=""
  search_results_count=0

  #@ Parse options
  while [ "$#" -gt 0 ]; do
    case "$1" in
    --down* | down*) search_type="downward" ;;
    --up* | up*) search_type="upward" ;;
    --from)
      [ -n "$2" ] && {
        search_path="$2"
        shift
      }
      ;;
    --for* | for*)
      [ -n "$2" ] && {
        search_item="$2"
        shift
      }
      ;;
    *) search_item="$1" ;;
    esac
    shift
  done

  #@ Validate required parameters
  if [ -z "${search_type:-}" ]; then
    printf "%s\n" "<\ ERROR /> Missing argument: direction" >&2
    printf "%s\n" "${cmd_USAGE}" >&2
    return 1
  else
    search_type_proper="$(
      printf "%s" "${search_type}" | sed 's/^\(.\)/\u\1/'
    )"
  fi

  if [ -z "${search_item:-}" ]; then
    printf "%s\n" "<\ ERROR /> Missing argument: item" >&2
    printf "%s\n" "${cmd_USAGE}" >&2
    return 1
  else
    search_pattern="*${search_item}*"
  fi

  search_downwards() {
    if [ -x "${CMD_FD:-}" ] && [ -x "${CMD_FD}" ]; then
      "${CMD_FD}" \
        --hidden \
        --absolute-path \
        --max-depth "${depth}" \
        --glob "${search_pattern}" \
        "${search_path}" \
        2>/dev/null
    else
      timeout 5 find "${search_path}" \
        -maxdepth "${depth}" \
        -iname "${search_pattern}" \
        2>/dev/null || true
    fi
  }

  search_upwards() {
    #@ Initialize variables
    res=""
    found=""
    loop_guard=0

    #@ Collect search results from parent directories
    while [ "${search_path}" != "/" ]; do

      loop_guard=$((loop_guard + 1))
      [ "${loop_guard}" -gt 100 ] && {
        pout_debug "Upward search exceeded maximum iterations (100), stopping"
        break
      }
      if [ -x "${CMD_FD:-}" ] && [ -x "${CMD_FD}" ]; then
        found="$(
          "${CMD_FD}" \
            --hidden \
            --absolute-path \
            --glob "${search_pattern}" \
            --max-depth 1 \
            "${search_path}" \
            2>/dev/null
        )" || true
      else
        found="$(find "${search_path}" -maxdepth 1 -iname "${search_pattern}" 2>/dev/null)" || true
      fi

      if [ -n "${found}" ]; then
        res="${res}${res:+${LF}}${found}"
      fi

      #@ Move up to parent directory, with proper error checking
      if ! search_path="$(dirname "${search_path}")"; then
        pout --debug "dirname failed for ${search_path}, stopping upward search"
        break
      fi
    done

    #@ Return results
    printf "%s" "${res:-}"
  }

  #@ Fetch search results
  case "${search_type}" in
  upward) search_results="$(search_upwards)" ;;
  downward | *) search_results="$(search_downwards)" ;;
  esac

  #@ Debug results
  pout --debug "$(
    printf "Searching %s for '%s' from '%s'" "$(
      printf "%s" "${search_type}" |
        tr '[:upper:]' '[:lower:]' || true
    )" "${search_item}" "${search_path}"
  )"

  if [ -n "${search_results}" ]; then
    printf "%s" "${search_results}" |
      while IFS= read -r line || [ -n "${line}" ]; do
        search_results_count=$((search_results_count + 1))
        pout --debug "$(
          printf "%s search yielded <\ %s /> %s" \
            "${search_type_proper}" "${search_results_count}" "${line}"
        )"
      done
  else
    pout --debug "${search_type_proper} search yielded no results"
  fi

  #@ Process results by match quality
  if [ -n "${search_results}" ]; then
    printf "%s" "${search_results}" |
      awk -v target="${search_item}" '
        function basename(path) {
          sub(".*/", "", path)
          return path
        }
        {
          file = basename($0)
          if (index(file, target) == 1) {
            print "3", $0  # Exact match at start - highest priority
          } else if (file == target) {
            print "2", $0  # Exact filename match - high priority
          } else {
            # Score matches by components
            split($0, parts, "/")
            score = 0
            for(i in parts) {
              if(parts[i] ~ target) score++
            }
            print "1." score, $0
          }
        }' |
      sort -r | cut -d' ' -f2-
  fi

  #@ Return results
  printf "%s" "${search_results}"
}

search_fs() {
  #DOC Search the filesystem for a pattern in both directions from the
  #DOC current working directory, and return the list of paths.
  #DOC
  #DOC Usage: search_fs [--cwd <directory>] <pattern>
  #DOC
  #DOC Options:
  #DOC   --cwd: Set the current working directory to <directory>. If not provided,
  #DOC          the current working directory is used.
  #DOC
  #DOC Examples:
  #DOC   search_fs --cwd /home/user test.txt
  #DOC   search_fs test.txt

  #@ Parse arguments
  while [ "$#" -ge 1 ]; do
    case "$1" in
    --cwd) cwd="$2" shift ;;
    --first | --closest) closest=true ;;
    --pattern) pattern="$2" shift ;;
    *) pattern="$1" ;;
    esac
    shift
  done

  search_fs__downwards() {
    #DOC Search for a pattern in the directory tree below the given directory,
    #DOC recursively. The search is case-sensitive. The search is performed
    #DOC downwards from the given directory, and the paths are returned as absolute
    #DOC paths.
    #DOC
    #DOC Usage: search_fs__downwards <directory> <pattern>
    #DOC
    #DOC Options:
    #DOC   <directory>: The directory to start the search from.
    #DOC   <pattern>: The pattern to search for.
    #DOC
    #DOC Notes:
    #DOC   The function returns nothing if the pattern is not found.

    dir="$1"
    target="$2"

    if type fd >/dev/null 2>&1; then
      cmd="fd --base-directory \"$dir\""
      opt="${opt:-} --absolute-path --glob"
      [ "$hidden" ] && opt="$opt --hidden"
      # [ "$depth" ] && opt="$opt --max-depth $depth"
      pat="$target"
      # if [ "$pattern" ]; then
      #   fd --base-directory "$dir" --absolute-path --hidden --glob "$target"
      # else
      #   fd --base-directory "$dir" "$target"
      # fi
    elif type find >/dev/null 2>&1; then
      cmd="find \"$dir\""
      # opt="$opt -type f"
      pat="-wholename \"*/$target\""
    fi

    # echo "LIMIT: $limit"
    # eval "$cmd" "$opt" ""
    eval "${cmd}" "$opt" "$pat"
  }

  search_fs__upwards() {
    #DOC Search for the pattern in the current working directory and upwards.
    #DOC
    #DOC Usage: search_fs__upwards
    #DOC
    #DOC Description:
    #DOC   This function searches for the given pattern in the current working directory
    #DOC   and upwards. It runs search_fs__downwards in a loop until it reaches the root
    #DOC   directory, at which point it stops.

    dir="$1"
    target="$2"

    while [ "$dir" != "/" ]; do
      result="$(search_fs__downwards "$dir" "$target")"
      [ "$result" ] && printf "%s" "$result" && break
      dir="$(dirname "$dir")"
    done
  }

  search_fs__closest() {
    #DOC   Return the closest match to the current directory.
    #DOC
    #DOC   This function takes a list of paths and returns the closest one to the current directory.
    #DOC   The algorithm works as follows:
    #DOC
    #DOC   1. Print each file path with its level of nesting (NF-1)
    #DOC   2. Sort the file list by nesting level
    #DOC   3. Remove the nesting level from each line
    #DOC   4. Select the first item (i.e. the file closest to the current directory)
    #DOC
    #DOC   The closest file is defined as the file with the lowest nesting level. If two files have
    #DOC   the same nesting level, the first one is returned.

    #@ Extract the desired path from the list
    path="$(
      printf "%s" "$pathlist" |
        awk -F'/' '{print NF-1, $0}' |
        # 1
        sort -n |
        # 2
        cut -d' ' -f2- |
        # 3
        head -n 1 # 4
    )"

    #@ Remove trailing backslash on Windows
    path="${path%\\}"

    #@ Remove trailing slash, if any
    path="${path%/}"

    #@ Return the path
    printf "%s" "${path}"
  }

  case "${search_direction}" in
  both)
    pathlist="$(search_fs__downwards "${cwd}" "${pattern}")"
    [ -n "${pathlist}" ] ||
      pathlist="$(search_fs__upwards "${cwd}" "${pattern}")"
    ;;
  up*)
    pathlist="$(
      search_fs__upwards "${cwd}" "${pattern}"
    )"
    ;;
  down* | *) pathlist="$(
    search_fs__downwards "${cwd}" "${pattern}"
  )" ;;
  esac

  #@ Search the filesystem in both directions
  pathlist="$(search_fs__downwards "${cwd}" "${pattern}")"
  [ -n "${pathlist}" ] ||
    pathlist="$(search_fs__upwards "${cwd}" "${pattern}")"

  if [ -n "${closest}" ]; then
    path="$(search_fs__closest "${pathlist}")"
  else
    path="${pathlist}"
  fi

  pathlist="$(sort_results --type "${sort_type}" "${pathlist}")"
  pathlist="$(limit_results --limit "${result_limit}" --list "${pathlist}")"

  #@ Return the list of paths
  printf "%s" "${pathlist}"
}

search_all() {
  #DOC Search for a pattern in the current directory, the filesystem, and in the PATH.
  #DOC Usage: search_all [--cwd <directory>] [--first | --closest] <pattern>
  #DOC Options:
  #DOC   --cwd: Set the current working directory to <directory>. If not provided,
  #DOC          the current working directory is used.
  #DOC   --first | --closest: Return the first match or the closest match to the
  #DOC                    current directory.
  #DOC Examples:
  #DOC   search_all --cwd /home/user --first test.txt
  #DOC   search_all --cwd /home/user --closest test.txt

  #@ Parse arguments
  while [ "$#" -ge 1 ]; do
    case "$1" in
    --cwd) cwd="$2" ;;
    *) pattern="$1" ;;
    esac
    shift
  done

  #@ Define the pattern as the initial path return
  result="${pattern}"

  if [ -z "${pattern}" ]; then
    return
  else

    #@ Check for the path among the known executables
    result="$(search_exe "${pattern}")"

    #@ Check for the path in the filesystem
    [ -n "${result}" ] || result="$(search_fs --cwd "${cwd}" "${pattern}")"
  fi
  #@ Return the path or an empty string
  printf "%s" "${result}"
}

tests() {
  main ls
  echo
  main bat
  echo
  main geet
  echo
  main adcocjohghhfpidemphmcmlmhnfgikei
  echo
  main pathof
  echo

  sort_results_test="
    /home/craole/Documents/dotfiles/configuration/cli/git/global/config
    /home/craole/Documents/dotfiles/.git/config
    /home/craole/Documents/dotfiles/_hidden10/config
    /home/craole/Documents/dotfiles/_hidden4/config
    /home/craole/Documents/dotfiles/_hidden/config
    /home/craole/Documents/dotfiles/1test/config
    /home/craole/Documents/dotfiles/abc/config
    /home/craole/Documents/dotfiles/123/config
    /home/craole/Documents/dotfiles/abc/2/config
    /home/craole/Documents/dotfiles/Configuration/cli/gitOne/config
    /home/craole/Documents/dotfiles/Configuration/cli/git10/config
    /home/craole/Documents/dotfiles/configuration/cli/git100/config
    /home/craole/Documents/dotfiles/Configuration/cli/git03/config
    /home/craole/Documents/dotfiles/Configuration/cli/git11/config
    /home/craole/Documents/dotfiles/Configuration/cli/git3/config
    /home/craole/Documents/dotfiles/Configuration/cli/git02/config
    /home/craole/Documents/dotfiles/Configuration/cli/git000002/config
    /home/craole/Documents/dotfiles/Configuration/cli/git/backup/config
    /home/craole/Documents/dotfiles/Configuration/cli/git03/config
    /home/craole/Documents/dotfiles/Configuration/cli/git2/config
    /home/craole/Documents/dotfiles/configuration/cli/git3/config
    /home/craole/Documents/dotfiles/Configuration/cli/git1/config
    /home/craole/Documents/dotfiles/Configuration/cli/Git1/config
    /home/craole/Documents/dotfiles/Configuration/cli/git1/configs
  "

  test_sort() {
    printf "\nSORT_TYPE: %s\n" "$1"
    sort_results --type "$1" --list "$sort_results_test"
  }

  test_sort "lexical"
  test_sort "depth"
  test_sort "alphanumeric"
  test_sort "natural"
  test_sort "unsorted"

}

cleanup() {
  unset cmd_PATH cmd_NAME cmd_HOME cmd_AUTHOR cmd_USAGE cmd_VERSION cmd_DESCRIPTION cmd_DEPENDENCIES
  unset cwd depth direction get_dir get_tag hidden limit sort_type path pathlist pattern case_insensitive

}

trim() {
  printf "%s" "${1}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'
}

pout() {
  #@ Initialize variables
  key="" val="" tag="" pad="" msg="" trim=true

  #@ Parse message type and content
  while [ "$#" -gt 0 ]; do
    case "$1" in
    -k | --key) key="$2" shift ;;
    -v | --val) val="$2" shift ;;
    -d | --debug)
      case "${debug:-}" in off | false | 0 | '') return ;;
      *) tag="DEBUG" ;; esac
      ;;
    -e | --error) tag="ERROR" ;;
    --no-trim) unset trim ;;
    --usage)
      usage_guide
      exit 0
      ;;
    --version)
      printf "%s\n" "${cmd_VERSION}"
      exit 0
      ;;
    *)
      msg="${msg:-}${msg:+${delimiter}}${1}"
      ;;
    esac
    shift
  done

  #@ Format the message
  if [ -n "${key}" ]; then

    #@ Tag missing values
    val="${val:-"${msg:-"{undefined}"}"}"

    #@ Trim leading and trailing whitespace
    if [ -n "${trim:-}" ]; then
      key="$(trim "${key}")"
      val="$(trim "${val}")"
    fi

    case "${tag}" in
    DEBUG | ERROR | WARN | INFO)
      #@ Define the separator
      sep=" | "

      #@ Calculate padding for label alignment
      debug_pad="${debug_pad:-24}"
      pad="$(printf "%*s" "$((debug_pad - ${#key}))" "")"

      #@ Format the tagged key-value pair
      msg="$(printf "[%s] /> %s <\ %s%s%s%s\n" \
        "${tag}" "${cmd_NAME}" "${pad}" "${key}" "${sep}" "${val}")"
      ;;
    *)
      #@ Define the separator
      sep=": "

      #@ Print the key-value pair
      msg="$(
        printf "%s%s%s\n" "${key}" "${sep}" "${val}"
      )"
      ;;
    esac
  else
    msg="$(trim "${msg}")"
  fi

  #@ Print the message
  case "${tag}" in
  ERROR | WARN) printf "%s\n" "${msg}" >&2 ;;
  *) printf "%s\n" "${msg}" ;;
  esac
}

usage_guide() {
  cat <<EOF
${cmd_NAME} [v.${cmd_VERSION}] - Intelligent Path Finder

USAGE:
  ${cmd_NAME} [OPTIONS] [PATTERN]

DESCRIPTION:
  Recursively searches for files, directories or executables in parent
  or child directories. Provides smart detection of project roots and
  executables in PATH.

SEARCH DIRECTION OPTIONS:
  --up                Search in parent directories only
  --down              Search in child directories only
  --both              Search in both directions (default: smart detection)
  -d, --direction DIR Specify search direction (up|down|both)
  -b, --base PATH     Starting directory for search (default: current directory)

SEARCH TYPE OPTIONS:
  --exe               Search for executables in PATH and directories
  --all               Search for all file types (default)
  --type TYPE         Specify type to search for (file|dir|exe|all)

MATCHING BEHAVIOR:
  -e, --exact         Use exact name matching (disables fuzzy matching)
  --shallow           Combine exact matching with non-extensive search
  --case-sensitive    Enable case-sensitive search
  --fuzzy             Enable fuzzy name matching (default)
  --no-fuzzy          Disable fuzzy name matching

SEARCH DEPTH CONTROL:
  --max-depth NUM     Limit search depth (default: 100)
  --smart, --deep     Perform extensive search for executables (default)
  --no-smart          Disable extensive executable search

ITEM SPECIFICATION:
  -i, --item PATTERN  File pattern to search for (can be used multiple times)
                      Without this flag, the pattern is set to the last argument(s)

OUTPUT CONTROL:
  -o, --output FILE   Output search results to file (default: stdout)
  -p, --print         Print search results to stdout
  -l, --list          Return all matching results instead of just the closest
  --limit NUM         Limit number of results when using --list (default: 50)
  --sort TYPE         Sort results by (distance|name|path|time) (default: distance)
  --format FORMAT     Output format (plain|json|csv) (default: plain)

GENERAL OPTIONS:
  -h, --help          Show this help message
  -v, --version       Show version information
  -V, --debug         Enable debug output

EXAMPLES:
  # Find .gitignore in parent directories
  ${cmd_NAME} --up .gitignore

  # Search for index.html under /tmp
  ${cmd_NAME} --down --base /tmp index.html

  # Find closest executable named 'cargo'
  ${cmd_NAME} --exe --up cargo

  # Find exact match for 'README.md' in current project
  ${cmd_NAME} --exact README.md

  # Search for multiple items
  ${cmd_NAME} --item "*.js" --item "*.ts"

DEFAULT BEHAVIOR:
  • Starting location: Current directory or detected project root
  • Search direction: Checks child directories first, then parents
  • Maximum depth: 100 directory levels
  • File types: All files and directories
  • Case sensitivity: Case-insensitive matching
  • Matching method: Fuzzy matching enabled
  • Smart executable search: Enabled
  • Output: Single closest match (use --list for multiple results)

PROJECT ROOT DETECTION:
  Automatically detects project roots using common markers:
  • Git repositories (.git)
  • Nix flakes (flake.nix)
  • Node.js (package.json)
  • Rust (Cargo.toml)
  • Go (go.mod)
  • And other common project files

NOTES:
  • By default, returns the located path closest to the starting directory
  • With --list, returns all matches sorted by distance from starting point
  • When using --exe, searches both PATH and directories
  • Multiple search patterns can be specified with repeated --item flags
  • Exit code 0 indicates success (item found), non-zero indicates failure
EOF
}

main "$@"
# tests
