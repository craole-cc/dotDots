#!/bin/sh

main() {
  #@ Include signal trapping
  trap cleanup EXIT INT TERM

  #@ Initialize the script
  initialize_utilities
  initialize_script
  initialize_environment "$@"

  #@ Synchronize files from the source directory to the target directory
  synchronize_dirs --source "${SOURCE_PATH}" --target "${TARGET_PATH}"

  #@ Set ownersip and permissions of the target directory
  set_ownership "${TARGET_PATH}" "root" "wheel"
  set_permissions "${TARGET_PATH}" "d" "770" "directory"
  set_permissions "${TARGET_PATH}" "f" "660" "file"
  set_permissions "${TARGET_PATH}" "d" "g+s" "group sticky bit for directories"

  #@ Deploy symlinks for each user in the wheel group
  execute_process
}

initialize_script() {
  LOG_INFO="INFO"
  LOG_WARN="WARN"
  LOG_ERROR="ERROR"

  SCR_NAME="link_dots"
  SCR_VERSION="0.1"
  SCR_USAGE_BASIC="Usage: ${SCR_NAME} --source [SOURCE_DIR] --target [TARGET_DIR]"
  SCR_USAGE_GUIDE=$(
    cat <<EOF
${SCR_USAGE_BASIC}

Options:
  -s, --source     Source directory containing dot files
  -t, --target     Target directory for synchronized files
  -v, --verbose    Enable verbose logging
  -d, --dry-run    Show what would happen without making changes
  -h               Show the usage instructions
      --help       Show this help message
      --version    Show version information
EOF
  )
}

initialize_environment() {
  #@ Define the target and source directories for the symlink
  unset TARGET_PATH SOURCE_PATH VERBOSE DRY_RUN USERS_CACHE

  while [ "$#" -gt 0 ]; do
    case "$1" in
    -h)
      printf "%s\n" "${SCR_USAGE_BASIC}"
      return 0
      ;;
    --help)
      printf "%s\n" "${SCR_USAGE_GUIDE}"
      return 0
      ;;
    --version)
      printf "%s\n" "${SCR_VERSION}"
      return 0
      ;;
    -s | --source)
      [ -z "$2" ] && {
        log "${LOG_ERROR}" "Missing source directory path"
        return 1
      }
      SOURCE_PATH="$2"
      shift
      ;;
    -t | --target)
      [ -z "$2" ] && {
        log "${LOG_ERROR}" "Missing target directory path"
        return 1
      }
      TARGET_PATH="$2"
      shift
      ;;
    -d | --verbose | --debug)
      VERBOSE=true
      ;;
    --dry-run | --simulate)
      DRY_RUN=true
      VERBOSE=true
      ;;
    -x | --strict)
      STRICT_MODE=true
      ;;
    *)
      log "${LOG_ERROR}" "Unknown option: $1"
      return 1
      ;;
    esac
    shift
  done
}

initialize_utilities() {

  log() {
    #DOC Enhanced logging function with timestamps and levels
    #DOC Parameters:
    #DOC   $1 (string): Log level (INFO, WARN, ERROR)
    #DOC   $2 (string): Message to log
    _level="$1"
    _message="$2"
    _timestamp="$(date '+%Y-%m-%d %H:%M:%S')"

    printf "[%s] [%s] %s\n" "${_timestamp}" "${_level}" "${_message}"

    #@ Exit on error messages if strict mode is enabled
    [ "${_level}" = "${LOG_ERROR}" ] && [ "${STRICT_MODE}" = true ] && return 1
  }

  wehave() {
    #DOC Check if all of the given commands are available in the system PATH.
    #DOC Parameters:
    #DOC   $@ (string): The commands to check for.
    #DOC
    #DOC Returns 0 if all commands are available, 1 otherwise.
    for _cmd in "$@"; do
      command -v "${_cmd}" >/dev/null 2>&1
    done
  }

  validate_info() {
    #DOC Validates the existence of an argument, file, directory, or path.
    #DOC
    #DOC Arguments:
    #DOC   --arg [NAME] (optional): Validate that the argument NAME is set.
    #DOC   --dir [PATH] (optional): Validate that the directory specified by PATH exists.
    #DOC   --file [PATH] (optional): Validate that the file specified by PATH exists.
    #DOC   --path [PATH] (optional): Validate that the path specified by PATH exists.
    #DOC If no validation type is specified, validate_info will exit with code 0.

    unset _validated _type _var

    case "$1" in
    --root-user)
      user_id="$(id -u)"
      [ "${user_id}" -eq 0 ] || {
        printf "ðŸ”´ This script must be run as root\n"
        return 1
      }
      ;;
    --arg | --var)
      #TODO: What is this?
      if [ -n "$2" ]; then
        _var="$(get_var "$2")"

        if [ -n "${_var}" ]; then
          _validated=true
          return 0
        else
          printf "ðŸ”´ Unable to validate the variable: %s\n" "$2"
          return 1
        fi
      else
        printf "ðŸ”´ Missing required argument/variable: %s\n" "$2"
        return 1
      fi
      ;;
    --dir)
      _type="Directory"
      _var="$(get_var "$2")"
      [ -d "${_var}" ] && _validated=true
      ;;
    --file)
      _type="File"
      _var="$(get_var "$2")"
      [ -f "${_var}" ] && _validated=true
      ;;
    --diff)
      _source="$(get_var "$2")"
      _target="$(get_var "$3")"

      [ -d "${_source}" ] || {
        log "${LOG_WARN}" "Source directory does not exist"
        return 1
      }

      [ -n "${_target}" ] || {
        log "${LOG_ERROR}" "Target directory not defined"
        return 1
      }

      [ "$(resolve_path "${_source}" || true)" = "$(resolve_path "${_target}" || true)" ] && {
        log "${LOG_ERROR}" "Source and target paths cannot be the same"
        return 1
      }

      return 0
      ;;
    --link)
      _type="Symbolic link"
      _var="$(get_var "$2")"
      _target="$(get_var "$3")"
      _resolved="$(resolve_path "${_var}")"

      [ -L "${_var}" ] && [ -n "${_resolved}" ] && {
        if [ "${_resolved}" = "${_target}" ]; then
          _validated=true
        elif diff_dir "${_var}" "${_target}"; then
          _validated=true
        else
          log "${LOG_ERROR}" "Symbolic link does not point to target path"
          return 1
        fi
      }
      ;;
    *) ;;
    esac

    case "${_type}" in
    "Directory" | "File")

      #@ Check path lengths
      [ "${#_var}" -gt 4096 ] && {
        log "${LOG_ERROR}" "Path exceeds maximum length: ${_var}"
        return 1
      }

      #@ Prevent relative path traversal
      case "${_var}" in
      */../* | ../* | */.. | \.\.)
        log "${LOG_ERROR}" "Path contains invalid parent directory references: ${_var}"
        return 1
        ;;
      *) ;;
      esac

      #@ Prevent traversal of root directory
      [ "${_var}" = "/" ] && {
        log "${LOG_ERROR}" "Root directory cannot be used as source"
        return 1
      }
      ;;
    *) ;;
    esac

    if [ -n "${_validated}" ]; then
      [ -n "${VERBOSE}" ] &&
        log "${LOG_INFO}" "${_type} validated: $(fs_info "${_var}" || true)"
      return 0
    else
      log "${LOG_ERROR}" "${_type} does not exist: ${_var}"
      return 1
    fi
  }

  fs_info() {
    #DOC Retrieves and displays detailed information about the given path.
    #DOC
    #DOC Parameters:
    #DOC   _path: The file or directory path for which to retrieve information.
    #DOC
    #DOC Returns:
    #DOC   1 if the path does not exist, otherwise prints the detailed information.
    #DOC   Uses 'eza' or 'pls' for enhanced formatting if available, defaulting to 'ls'.

    _path="$1"

    if [ ! -e "${_path}" ]; then
      log "${LOG_ERROR}" "Path does not exist: ${_path}"
      return 1
    elif wehave eza; then
      eza "${_path}" \
        --long \
        --list-dirs \
        --smart-group \
        --no-time \
        --octal-permissions \
        --color=always --icons=auto
    elif wehave pls; then
      pls "${_path}" -d oct -d perm -d group -d user -d typ
    else
      ls "${_path}" \
        -l \
        --human-readable \
        --directory \
        --color=always
    fi
  }

  get_var() {
    #DOC Safely retrieve a value, either directly or from a variable name.
    #DOC
    #DOC Examples:
    #DOC   get_var FOO      # Gets value of $FOO
    #DOC   get_var '$FOO'   # Gets value of $FOO
    #DOC   get_var "$FOO"   # Returns $FOO value directly
    #DOC   get_var /path    # Returns "/path" directly
    #DOC
    #DOC Parameters:
    #DOC   $1 (string): Direct value or name of variable to get
    #DOC
    #DOC Returns:
    #DOC   The value, either directly or from the specified variable
    #DOC
    #DOC Notes:
    #DOC   - Safely handles unset variables
    #DOC   - Preserves whitespace in values
    #DOC   - POSIX-compliant implementation

    value="$1"

    #@ Return empty string if no argument provided
    [ -z "${value}" ] && return 1

    #@ Treat value as variable ref if starts with $ or is a valid name
    case "${value}" in
    '$'*) value="${value#$}" ;;              #? Strip leading $
    [a-zA-Z_]*[a-zA-Z0-9_]*) ;;              #? Valid variable name
    *) printf '%s' "${value}" && return 0 ;; #? Direct value
    esac

    #@ Get the variable value
    eval "printf '%s' \"\${${value}:-}\""
  }

  get_users_per_group() {
    #DOC Retrieve the list of users belonging to a specified group.
    #DOC
    #DOC Parameters:
    #DOC   $1 (string): The name of the group to query.
    #DOC
    #DOC Returns:
    #DOC   A space-separated string of usernames that are members of the specified group.
    #DOC
    #DOC Notes:
    #DOC   This function uses the `getent` command to fetch group information and
    #DOC   extracts the list of users from the group entry. It assumes that the
    #DOC   group name provided exists in the system.

    _group="$1"

    #@ Return cached result if available
    [ -n "${USERS_CACHE}" ] && {
      printf '%s' "${USERS_CACHE}"
      return 0
    }

    #@ Get and cache new result
    USERS_CACHE="$(getent group "${_group}" | cut -d: -f4 | tr ',' ' ')"
    printf '%s' "${USERS_CACHE}"
  }

  diff_dir() {
    #DOC Compare the contents of two directories.
    #DOC
    #DOC Parameters:
    #DOC   $1 (string): The path to the first directory to compare.
    #DOC   $2 (string): The path to the second directory to compare.
    #DOC
    #DOC Returns:
    #DOC   0 if the contents of the directories match, otherwise 1.
    #DOC
    #DOC Notes:
    #DOC   This function compares the contents of the two directories using the
    #DOC   `diff` command with the `--recursive` and `--quiet` flags. This means
    #DOC   that the comparison will be done recursively, and that no output will
    #DOC   be produced if the contents match. If the contents differ, a message will
    #DOC   be printed indicating which files differ.

    _dir1="$1"
    _dir2="$2"

    if diff --recursive --brief "${_dir1}" "${_dir2}" >/dev/null; then
      [ -n "${VERBOSE}" ] &&
        log "${LOG_INFO}" "Contents of '${_dir1}' and '${_dir2}' match"
      return 0
    else
      log "${LOG_WARN}" "$(
        printf "Contents of '%s' and '%s' differ" \
          "${_dir1}" "${_dir2}"
      )"
      return 1
    fi
  }

  set_permissions() {
    #DOC Set permissions for items in a directory.
    #DOC
    #DOC Parameters:
    #DOC   $1 (string): The path to the directory to set permissions for.
    #DOC   $2 (string): The type of items to set permissions for. Can be 'd' for directories,
    #DOC       'f' for files, or 'l' for symbolic links.
    #DOC   $3 (string): The permissions to set. Can be in octal (e.g. 755) or symbolic (e.g. rwxr-x).
    #DOC   $4 (string): A description of the permissions being set.
    #DOC
    #DOC Returns:
    #DOC   0 if the permissions were set successfully, otherwise 1.
    #DOC
    #DOC Notes:
    #DOC   This function uses either the `fd` command or the `find` command to locate all items
    #DOC   of the specified type inside the specified directory, and then sets the permissions
    #DOC   using the `chmod` command. If the permissions are set successfully, a success message
    #DOC   will be printed. If the permissions cannot be set, a failure message will be printed
    #DOC   and the script will exit with a non-zero status code.

    _path="$1"
    _type="$2"
    _mode="$3"
    _description="$4"

    [ -n "${DRY_RUN}" ] && {
      log "${LOG_INFO}" "$(
        printf "[DRY RUN] Would set '%s' permissions for %s" \
          "${_description}" "${_path}"
      )"
      return 0
    }

    CMD_FD=$(command -v fd 2>/dev/null)
    if [ -n "${CMD_FD}" ]; then
      cmd="fd --type ${_type} . ${_path} --exec chmod ${_mode} {}"
    else
      cmd="find ${_path} -type ${_type} -exec chmod ${_mode} {} +"
    fi

    if eval "${cmd}"; then
      log "${LOG_INFO}" "$(
        printf "Set '%s' permissions for %s" \
          "${_description}" "${_path}"
      )"
    else
      log "${LOG_ERROR}" "$(
        printf "Failed to set '%s' permissions for %s" \
          "${_description}" "${_path}"
      )"
      return 1
    fi
  }

  set_ownership() {
    #DOC Change the owner and group of a directory.
    #DOC
    #DOC Parameters:
    #DOC   $1 (string): The path to the directory whose ownership is to be changed.
    #DOC   $2 (string): The new owner of the directory.
    #DOC   $3 (string): The new group of the directory.
    #DOC
    #DOC Returns:
    #DOC   0 if the ownership is successfully changed, otherwise exits with a non-zero status code.
    #DOC
    #DOC Notes:
    #DOC   This function uses the `chown` command to recursively change the ownership and group
    #DOC   of the specified directory. If successful, a success message will be printed and the
    #DOC   directory's detailed listing will be shown. On failure, an error message will be printed
    #DOC   and the script will exit.

    _path="$1"
    _owner="$2"
    _group="$3"

    [ -n "${DRY_RUN}" ] && {
      log "${LOG_INFO}" "$(
        printf "[DRY RUN] Would set ownership of %s to %s:%s" \
          "${_path}" "${_owner}" "${_group}"
      )"
      return 0
    }

    if chown --recursive "${_owner}:${_group}" "${_path}"; then
      log "${LOG_INFO}" "$(
        printf "Set ownership of %s to %s:%s" \
          "${_path}" "${_owner}" "${_group}"
      )"
      [ -n "${VERBOSE}" ] && validate_info --dir "${_path}"
    else
      log "${LOG_ERROR}" "$(
        printf "Failed to set ownership for %s" "${_path}"
      )"
      return 1
    fi
  }

  synchronize_dirs() {
    #DOC Synchronizes one directory with another
    #DOC
    #DOC Parameters:
    #DOC   $1 (string): The source directory.
    #DOC   $2 (string): The target directory.
    #DOC
    #DOC Returns:
    #DOC   none
    #DOC
    #DOC Notes:
    #DOC   This function uses the `rsync` command to recursively synchronize the source
    #DOC   directory to the target directory. If the `rsync` command is not available,
    #DOC   it will remove the target directory and copy the source directory to the
    #DOC   target directory instead.

    unset _source _target _backup
    while [ "$#" -gt 0 ]; do
      case "$1" in
      --source) _source=$2 ;;
      --target) _target=$2 ;;
      --backup) _backup=$2 ;;
      *) break ;;
      esac
      shift
    done

    validate_info --diff "${_source}" "${_target}" || {
      log "${LOG_WARN}" "Skipping synchronization"
      return 0
    }

    validate_info --arg "SOURCE_PATH" || return 1
    validate_info --dir "SOURCE_PATH" || return 1
    validate_info --arg "TARGET_PATH" || return 1

    [ -n "${DRY_RUN}" ] && {
      log "${LOG_INFO}" "$(
        printf "[DRY RUN] Would synchronize '%s' to '%s'" \
          "${_source}" "${_target}"
      )"
      return 0
    }

    CMD_RSYNC=$(command -v rsync 2>/dev/null)

    #@ Make a backup of the target file, if it exists.
    if [ -d "${_target}" ]; then
      _backup="/tmp/${_target##*/}.$$.$(
        dd if=/dev/urandom bs=1 count=4 2>/dev/null |
          od -A n -t u4 |
          tr -d ' \n'
      )"
      mkdir -p "${_backup}"

      _backup_space=$(df -P "$(dirname "${_backup}")" | awk 'NR==2 {print $4}')
      _target_size=$(du -s "${_target}" | cut -f1)
      if [ "${_target_size}" -gt "${_backup_space}" ]; then
        log "${LOG_ERROR}" "Insufficient space for backup"
        return 1
      fi
      cp -a "${_target}/." "${_backup}/"
      log "${LOG_INFO}" "$(
        printf "Created backup at %s" "${_backup}"
      )"
    fi
    if [ -n "${CMD_RSYNC}" ]; then
      "${CMD_RSYNC}" --delete --recursive "${_source}/" "${_target}/" || {
        [ -d "${_backup}" ] && {
          log "${LOG_WARN}" "Sync failed, restoring from backup"
          remove_path "${_target}"
          mv "${_backup}" "${_target}"
        }
        log "${LOG_ERROR}" "Failed to synchronize directories"
        return 1
      }
    else
      remove_path "${_target}"
      cp --recursive "${_source}" "${_target}" || {
        [ -d "${_backup}" ] && {
          log "${LOG_WARN}" "Copy failed, restoring from backup"
          mv "${_backup}" "${_target}"
        }
        log "${LOG_ERROR}" "Failed to copy directory"
        return 1
      }
    fi

    #@ Clean up backup if successful
    [ -d "${_backup}" ] && remove_path "${_backup}"

    log "${LOG_INFO}" "$(
      printf "Updated '%s' to match '%s'" \
        "${_target}" "${_source}"
    )"
  }

  remove_path() {
    #DOC Prints the resolved path of a file or directory
    #DOC
    #DOC Parameters:
    #DOC   $1 (string): The file or directory path to resolve.
    #DOC
    #DOC Returns:
    #DOC   The resolved path of the file or directory.
    #DOC
    #DOC Notes:
    #DOC   This function will first try to use the `respath` command to resolve the
    #DOC   path. If `respath` is not available, it will try to use the `readlink` or
    #DOC   `realpath` commands. If all of these are unavailable, it will simply print
    #DOC   the path as is.

    if [ "$#" -gt 0 ]; then
      log "${LOG_ERROR}" "No paths to remove provided"
      return 1
    elif wehave cnc; then
      cnc "$@"
    elif wehave trashy; then
      trash "$@"
    elif wehave trash-put; then
      trash-put "$@"
    elif wehave rm; then
      rm --recursive --force --verbose "$@"
    fi
  }

  resolve_path() {
    _path="$1"

    if wehave respath; then
      _resolver="respath"
    elif wehave readlink; then
      _resolver="readlink -f"
    elif wehave realpath; then
      _resolver="realpath"
    else
      log "${LOG_WARN}" "No path resolver found, using raw path"
      printf '%s' "$_path"
      return 0
    fi

    eval "${_resolver}" "'${_path}'"
  }

  prompt_to_overwrite() {
  #DOC Prompts the user to overwrite an existing file
  #DOC
  #DOC Parameters:
  #DOC   $1 (string): The path to the file or directory to overwrite.
  #DOC
  #DOC Returns:
  #DOC   0 if the user chooses to overwrite, otherwise 1.
  #DOC
  #DOC Notes:
  #DOC   This function will repeatedly prompt the user to overwrite the file or
  #DOC   directory until they either choose to overwrite or exit. If the user chooses
  #DOC   to overwrite, the file or directory will be removed and the function will
  #DOC   return 0. If the user chooses to exit, the function will return 1.
    _path="$1"

    [ -n "${DRY_RUN}" ] && {
      log "${LOG_INFO}" "[DRY RUN] Would prompt to overwrite ${_path}"
      return 0
    }

    while true; do
      printf "%s already exists. Overwrite it? (y|N): " "${_path}"
      read -r _choice

      case "${_choice}" in
      [Yy]*)
        log "${LOG_INFO}" "Overwriting ${_path}"
        rm -rf "${_path}"
        return 0
        ;;
      [Nn]*)
        log "${LOG_WARN}" "Skipping ${_path}"
        return 1
        ;;
      *)
        log "${LOG_WARN}" "Invalid choice. Please enter 'Y' or 'N'"
        ;;
      esac
    done
  }
}

execute_process() {
  for _user in $(get_users_per_group "wheel"); do
    case "$_user" in
    "root") continue ;;*);;
    esac

    _link_path="/home/${_user}/.dots"

    [ -e "${_link_path}" ] && [ ! -L "${_link_path}" ] && {
      log "${LOG_WARN}" "DOTS cannot be symlinked because another file exists at ${_link_path}"
      prompt_to_overwrite "${_link_path}" || continue
    }

    validate_info --link "${_link_path}" "${TARGET_PATH}" && continue

    [ -n "${DRY_RUN}" ] && {
      log "${LOG_INFO}" "[DRY RUN] Would create symlink ${_link_path} -> ${TARGET_PATH}"
      continue
    }

    ln --symbolic --force "${TARGET_PATH}" "${_link_path}"
    log "${LOG_INFO}" "Created symlink ${_link_path} -> ${TARGET_PATH}"
  done
}

cleanup() {
  # log "$LOG_INFO" "Wrapping up..."
  rm -f "${_backup}"
  #@ Store the exit code of the last command
  _exit_code=$?

  # #@ Create a flag to track if we're cleaning up after an error
  # [ "$_exit_code" -ne 0 ] && _is_error=true || _is_error=false

  # #@ Handle interrupted syncs or failed operations
  # if [ "$_is_error" = true ]; then
  #   if [ -d "$TARGET_PATH" ]; then
  #     log "$LOG_WARN" "Checking target directory integrity..."

  #     #@ If source exists and sync was interrupted, verify integrity
  #     [ -d "$SOURCE_PATH" ] &&
  #       diff_dir "$SOURCE_PATH" "$TARGET_PATH" >/dev/null 2>&1 &&
  #       log "$LOG_ERROR" "Target directory may be in inconsistent state"
  #   fi
  # fi

  # #@ Clean up any temporary files
  # for _temp in /tmp/link_dots.*; do
  #   [ -e "$_temp" ] && rm -rf "$_temp"
  # done

  # #@ Report final status
  # if [ "$_is_error" = true ]; then
  #   log "$LOG_ERROR" "Script terminated with errors (exit code: $_exit_code)"
  # else
  #   log "$LOG_INFO" "Cleanup completed successfully"
  # fi

  return "${_exit_code}"
}

main "$@"
# main \
#   --source /home/craole/Documents/dotfiles \
#   --target /dots \
#   --strict
