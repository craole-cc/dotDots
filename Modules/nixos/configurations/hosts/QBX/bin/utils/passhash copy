#!/bin/sh
# passhash - Portable password hashing script

usage="
  Usage: passhash [USERNAME]
  Generate password hash with Argon2id (preferred) or SHA-512

  Options:
    -h, --help    Show this help message

  Security requirements:
    - 12+ characters
    - Mixed case letters
    - At least one number
    - At least one special character (!@#$%^&*)
"

main() {
  #@ Parse command-line options
  while [ "$#" -gt 0 ]; do
    case "$1" in
      -h)
        printf "%s" "$usage"
        return 0
        ;;
      --help)
        printf "%s" "$usage"
        return 0
        ;;
      -i | --insecure | --simple) insecure=1 ;;
      *) username="$1" ;;
    esac
    shift
  done

  #@ Get the name of the user for which the password is being set
  [ -n "${username:-"$(get_user)"}" ] || {
    print_error "Unable to determine username"
    return 1
  }
  # username="${username:-"$(get_user)"}"
  # [ "$username" ] || return 1
  # username="${username:-$(get_user)}"

  #@ Get the password
  # password="$(get_pass "$username")" || {
  #   get_pass "$username"
  #   print_error "Failed to get password"
  #   return 1
  # }
  password="$(get_pass "$username")"
  stty echo
  if ! get_pass "$username"; then
    return 1
  fi

  #@ Generate the hashed version of the password
  hashed_password="$(get_hash "$password")" || {
    print_error "Failed to generate hash"
    return 1
  }
  # [ "$password" ] || return 1
  # if "$(get_hash "$password")"; then
  #   hashed_password="$(get_hash "$password")"
  # else
  #   return 1
  # fi

  #@ Print the result
  printf 'Hashed Password for %s: %s -> %s' "$username" "$password" "$hashed_password"

  cleanup
}

initialize_environment() {
  cleanup

  while [ "$#" -gt 0 ]; do
    case "$1" in
      -h)
        printf "%s" "$usage"
        return 0
        ;;
      --help)
        printf "%s" "$usage"
        return 0
        ;;
      -i | --insecure | --simple) insecure=1 ;;
      *) username="$1" ;;
    esac
    shift
  done
}

print_error() {
  _msg="$*"
  if command -v tput > /dev/null 2>&1; then
    _red=$(tput setaf 1)
    _normal=$(tput sgr0)
  else
    _red="\x1B[0;31m"
    _normal="\x1B[0m"
  fi

  printf "%s[ERROR] %s%s\n" "$_red" "$_normal" "$_msg"
}

validate_password() {
  _pass="$1"

  check_length() {
    if [ ${#_pass} -lt 12 ]; then
      print_error "Password must be at least 12 characters long"
      return 1
    fi
  }

  # Complexity checks
  check_pattern() {
    printf "%s" "$_pass" | grep -qE "$1" || {
      print_error "Passwords must contain at least one" "$2"
      return 1
    }
  }

  # check_length || return 1
  check_pattern '[A-Z]' 'uppercase letter' || return 1
  # check_pattern '[a-z]' 'lowercase letter' || return 1
  # check_pattern '[0-9]' 'number' || return 1
  # check_pattern '[!@#$%^&*]' 'special character' || return 1

  # return "$_valid"
}

get_user() {
  if command -v id > /dev/null 2>&1; then
    user="$(id -un)"
  elif command -v whoami > /dev/null 2>&1; then
    user="$(whoami)"
  else
    user="${USERNAME:-"$USER"}"
  fi

  printf "%s" "$user"
}

get_pass() {
  stty -echo
  printf "Enter password for %s: " "$1" >&2
  read -r pw1
  printf "\nConfirm password: " >&2
  read -r pw2
  printf "\n" >&2
  stty echo

  if [ "$pw1" != "$pw2" ]; then
    printf "ERROR: Passwords do not match\n" >&2
    return 1
  fi

  if [ "$insecure" ]; then
    printf "%s" "$pw1"
    return 0
  fi

  # validate_password "$pw1" >/dev/null || return 1
  if validate_password "$pw1"; then
    printf "%s" "$pw1"
  else
    return 1
  fi
}

get_hash() {
  salt=$(dd if=/dev/urandom bs=16 count=1 2> /dev/null | base64)

  if command -v argon2 > /dev/null 2>&1; then
    hash=$(printf "%s" "$1" | argon2 "$salt" -id -t 3 -m 16 -p 4 -l 32 -r)
  else
    hash=$(printf '%s' "$1" | sha512sum | awk '{print $1}')
  fi

  printf '%s' "$hash"
}

cleanup() {
  unset username insecure password pw1 pw2 salt hash _valid _pass
}

main "$@"
