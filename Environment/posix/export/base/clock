#!/bin/sh
#
# POSIX Duration and Timestamp Utilities
# Provides duration parsing, formatting, timestamp generation, and display utilities
# with support for both compact (e.g., "2m 30s") and verbose (e.g., "2 minutes and 30 seconds") formats.
#
# Author: Craig 'Craole' Cole
# Copyright: (c) Craig 'Craole' Cole, 2025. All rights reserved.
# License: MIT License
#
# Usage: source this script or run specific functions

# Configuration constants
DURATION_COMPACT_MINUTES="m"
DURATION_COMPACT_SECONDS="s"
DURATION_COMPACT_MILLISECONDS="ms"
DURATION_COMPACT_SEPARATOR=" "
DURATION_COMPACT_ICON="ó±‡»"

DURATION_VERBOSE_MINUTE_SINGULAR="minute"
DURATION_VERBOSE_MINUTE_PLURAL="minutes"
DURATION_VERBOSE_SECOND_SINGULAR="second"
DURATION_VERBOSE_SECOND_PLURAL="seconds"
DURATION_VERBOSE_MILLISECOND_SINGULAR="millisecond"
DURATION_VERBOSE_MILLISECOND_PLURAL="milliseconds"
DURATION_VERBOSE_CONNECTOR="and"
DURATION_VERBOSE_LIST_SEPARATOR=", "

TIMESTAMP_DEFAULT="[%Y-%m-%d %H:%M:%S]"
TIMESTAMP_SHORT="[%H:%M:%S]"
TIMESTAMP_ISO="%Y-%m-%dT%H:%M:%S"
TIMESTAMP_COMPACT="%Y%m%d-%H%M%S"
TIMESTAMP_FILENAME="%Y-%m-%d_%H-%M-%S"

# Helper function to check if a value is numeric
is_numeric() {
  case "${1#-}" in
  '' | *[!0-9.]*) return 1 ;;
  *) return 0 ;;
  esac
}

# Helper function to get current time in milliseconds since epoch
get_current_time_ms() {
  # Try different methods to get milliseconds
  if command -v python3 >/dev/null 2>&1; then
    python3 -c "import time; print(int(time.time() * 1000))"
  elif command -v python >/dev/null 2>&1; then
    python -c "import time; print(int(time.time() * 1000))"
  elif command -v perl >/dev/null 2>&1; then
    perl -MTime::HiRes=time -E 'say int(time*1000)'
  else
    # Fallback to seconds precision
    printf "%s000\n" "$(date +%s)"
  fi
}

# Convert various duration inputs to milliseconds
# Args: duration (string or number)
# Returns: duration in milliseconds (via stdout)
convert_to_milliseconds() {
  duration="$1"

  case "$duration" in
  '')
    printf "0\n"
    return 0
    ;;
  *)
    if is_numeric "$duration"; then
      printf "%.0f\n" "$duration"
      return 0
    else
      printf "ERROR: Invalid duration format: %s\n" "$duration" >&2
      printf "0\n"
      return 1
    fi
    ;;
  esac
}

# Format duration as compact string (e.g., "2m 30s 500ms")
# Args: duration_ms [include_icon]
# Returns: compact duration string (via stdout)
format_duration_compact() {
  duration_ms="$1"
  include_icon="${2:-0}"

  duration_ms=$(convert_to_milliseconds "$duration_ms")

  # Convert to integer arithmetic (multiply by 1000 for precision)
  duration_ms_int=$(printf "%.0f\n" "$duration_ms")

  # Calculate components
  total_seconds=$((duration_ms_int / 1000))
  milliseconds=$((duration_ms_int % 1000))
  minutes=$((total_seconds / 60))
  seconds=$((total_seconds % 60))

  parts=""

  # Add minutes if >= 1
  if [ "$minutes" -ge 1 ]; then
    case "$parts" in
    '') parts="${minutes}${DURATION_COMPACT_MINUTES}" ;;
    *) parts="${parts}${DURATION_COMPACT_SEPARATOR}${minutes}${DURATION_COMPACT_MINUTES}" ;;
    esac
  fi

  # Add seconds if > 0
  if [ "$seconds" -gt 0 ]; then
    case "$parts" in
    '') parts="${seconds}${DURATION_COMPACT_SECONDS}" ;;
    *) parts="${parts}${DURATION_COMPACT_SEPARATOR}${seconds}${DURATION_COMPACT_SECONDS}" ;;
    esac
  fi

  # Add milliseconds if > 0 or if no other parts
  if [ "$milliseconds" -gt 0 ] || [ -z "$parts" ]; then
    case "$parts" in
    '') parts="${milliseconds}${DURATION_COMPACT_MILLISECONDS}" ;;
    *) parts="${parts}${DURATION_COMPACT_SEPARATOR}${milliseconds}${DURATION_COMPACT_MILLISECONDS}" ;;
    esac
  fi

  # Add icon if requested
  case "$include_icon" in
  1 | true | yes)
    printf "%s %s\n" "$DURATION_COMPACT_ICON" "$parts"
    ;;
  *)
    printf "%s\n" "$parts"
    ;;
  esac
}

# Get singular or plural form of a unit
# Args: count singular_form plural_form
# Returns: appropriate form (via stdout)
get_unit_form() {
  count="$1"
  singular="$2"
  plural="$3"

  case "$count" in
  1) printf "%s\n" "$singular" ;;
  *) printf "%s\n" "$plural" ;;
  esac
}

# Join duration parts with proper English grammar
# Args: part1 [part2] [part3] ...
# Returns: grammatically correct joined string (via stdout)
join_duration_parts() {
  # Count arguments
  argc=0
  for arg in "$@"; do
    argc=$((argc + 1))
  done

  case "$argc" in
  0) printf "\n" ;;
  1) printf "%s\n" "$1" ;;
  2) printf "%s %s %s\n" "$1" "$DURATION_VERBOSE_CONNECTOR" "$2" ;;
  *)
    # More than 2 parts - need comma separation
    result=""
    i=1
    for part in "$@"; do
      if [ "$i" -eq 1 ]; then
        result="$part"
      elif [ "$i" -eq "$argc" ]; then
        result="${result}${DURATION_VERBOSE_LIST_SEPARATOR}${DURATION_VERBOSE_CONNECTOR} ${part}"
      else
        result="${result}${DURATION_VERBOSE_LIST_SEPARATOR}${part}"
      fi
      i=$((i + 1))
    done
    printf "%s\n" "$result"
    ;;
  esac
}

# Format duration as verbose string (e.g., "2 minutes and 30 seconds")
# Args: duration_ms
# Returns: verbose duration string (via stdout)
format_duration_verbose() {
  duration_ms="$1"

  duration_ms=$(convert_to_milliseconds "$duration_ms")
  duration_ms_int=$(printf "%.0f\n" "$duration_ms")

  # Calculate components
  total_seconds=$((duration_ms_int / 1000))
  milliseconds=$((duration_ms_int % 1000))
  minutes=$((total_seconds / 60))
  remaining_seconds=$((total_seconds % 60))

  parts=""

  if [ "$minutes" -ge 1 ]; then
    unit=$(get_unit_form "$minutes" "$DURATION_VERBOSE_MINUTE_SINGULAR" "$DURATION_VERBOSE_MINUTE_PLURAL")
    parts="$minutes $unit"

    if [ "$remaining_seconds" -gt 0 ]; then
      unit=$(get_unit_form "$remaining_seconds" "$DURATION_VERBOSE_SECOND_SINGULAR" "$DURATION_VERBOSE_SECOND_PLURAL")
      parts="$parts|$remaining_seconds $unit"
    fi
  elif [ "$total_seconds" -ge 1 ]; then
    unit=$(get_unit_form "$total_seconds" "$DURATION_VERBOSE_SECOND_SINGULAR" "$DURATION_VERBOSE_SECOND_PLURAL")
    parts="$total_seconds $unit"

    if [ "$milliseconds" -gt 0 ]; then
      unit=$(get_unit_form "$milliseconds" "$DURATION_VERBOSE_MILLISECOND_SINGULAR" "$DURATION_VERBOSE_MILLISECOND_PLURAL")
      parts="$parts|$milliseconds $unit"
    fi
  else
    unit=$(get_unit_form "$milliseconds" "$DURATION_VERBOSE_MILLISECOND_SINGULAR" "$DURATION_VERBOSE_MILLISECOND_PLURAL")
    parts="$milliseconds $unit"
  fi

  # Convert pipe-separated parts back to arguments for join_duration_parts
  case "$parts" in
  *\|*)
    # Split on pipe and call join function
    part1=$(printf "%s\n" "$parts" | cut -d'|' -f1)
    part2=$(printf "%s\n" "$parts" | cut -d'|' -f2)
    case "$(printf "%s\n" "$parts" | tr '|' '\n' | wc -l)" in
    2) join_duration_parts "$part1" "$part2" ;;
    3)
      part3=$(printf "%s\n" "$parts" | cut -d'|' -f3)
      join_duration_parts "$part1" "$part2" "$part3"
      ;;
    *) join_duration_parts "$part1" "$part2" ;;
    esac
    ;;
  *)
    printf "%s\n" "$parts"
    ;;
  esac
}

# Calculate duration between start and end times
# Args: start_time_ms [end_time_ms]
# Returns: duration in milliseconds (via stdout)
get_duration_from_times() {
  start_time="$1"
  end_time="${2:-$(get_current_time_ms)}"

  if ! is_numeric "$start_time" || ! is_numeric "$end_time"; then
    printf "ERROR: Invalid time values\n" >&2
    printf "0\n"
    return 1
  fi

  duration=$((end_time - start_time))
  case "$duration" in
  -*) duration=$((-duration)) ;;
  esac

  printf "%s\n" "$duration"
}

# Generate formatted timestamps
# Args: [format] [datetime_override]
# Returns: formatted timestamp (via stdout)
get_timestamp() {
  format="${1:-Default}"
  datetime_override="$2"

  # Determine format string
  format_string=""
  case "$format" in
  Default) format_string="$TIMESTAMP_DEFAULT" ;;
  Short) format_string="$TIMESTAMP_SHORT" ;;
  ISO) format_string="$TIMESTAMP_ISO" ;;
  Compact) format_string="$TIMESTAMP_COMPACT" ;;
  Filename) format_string="$TIMESTAMP_FILENAME" ;;
  *) format_string="$format" ;;
  esac

  # Generate timestamp
  if [ -n "$datetime_override" ]; then
    # If override provided, assume it's a Unix timestamp
    date -d "@$datetime_override" +"$format_string" 2>/dev/null || date -r "$datetime_override" +"$format_string" 2>/dev/null || date +"$format_string"
  else
    date +"$format_string"
  fi
}

# Format duration in specified format
# Args: duration format [include_icon]
# Returns: formatted duration string (via stdout)
format_duration() {
  duration="$1"
  format="${2:-Compact}"
  include_icon="${3:-0}"

  case "$format" in
  Compact | compact)
    format_duration_compact "$duration" "$include_icon"
    ;;
  Verbose | verbose)
    format_duration_verbose "$duration"
    ;;
  *)
    printf "ERROR: Invalid format '%s'. Use 'Compact' or 'Verbose'\n" "$format" >&2
    format_duration_compact "$duration" "$include_icon"
    ;;
  esac
}

# Create completion messages with duration information
# Args: duration [action] [format]
# Returns: complete message with duration (via stdout)
get_duration_message() {
  duration="$1"
  action="${2:-Operation}"
  format="${3:-Verbose}"

  formatted_duration=$(format_duration "$duration" "$format")
  printf "%s completed in %s.\n" "$action" "$formatted_duration"
}

# Measure execution time of a command
# Args: format action command [args...]
# Returns: formatted duration or completion message (via stdout)
measure_command() {
  format="${1:-Compact}"
  action="$2"
  shift 2

  start_time=$(get_current_time_ms)

  # Execute the command
  "$@"
  command_exit_code=$?

  end_time=$(get_current_time_ms)
  duration=$(get_duration_from_times "$start_time" "$end_time")

  if [ -n "$action" ]; then
    get_duration_message "$duration" "$action" "$format"
  else
    format_duration "$duration" "$format"
  fi

  return $command_exit_code
}

# Test function to demonstrate the utilities
test_duration() {
  printf "\n=== Duration Module Tests ===\n"

  # Test cases
  test_cases="500:500ms 1500:1.5_seconds 65000:1_minute_5_seconds 125500:2_minutes_5.5_seconds"

  for test_case in $test_cases; do
    duration=$(printf "%s\n" "$test_case" | cut -d':' -f1)
    description=$(printf "%s\n" "$test_case" | cut -d':' -f2 | tr '_' ' ')

    printf "\nTesting: %s (%sms)\n" "$description" "$duration"
    printf "  Compact: %s\n" "$(format_duration_compact "$duration")"
    printf "  Compact with icon: %s\n" "$(format_duration_compact "$duration" 1)"
    printf "  Verbose: %s\n" "$(format_duration_verbose "$duration")"
    printf "  Message: %s\n" "$(get_duration_message "$duration" "Test operation")"
  done

  printf "\n=== Edge Cases ===\n"
  printf "Zero duration: %s\n" "$(format_duration_verbose 0)"
  printf "Empty duration: %s\n" "$(format_duration_verbose "")"

  printf "\n=== Timestamp Tests ===\n"
  printf "Default: %s\n" "$(get_timestamp)"
  printf "Short: %s\n" "$(get_timestamp Short)"
  printf "ISO: %s\n" "$(get_timestamp ISO)"
  printf "Compact: %s\n" "$(get_timestamp Compact)"
  printf "Filename: %s\n" "$(get_timestamp Filename)"
  printf "Custom: %s\n" "$(get_timestamp '%Y-%m-%d')"

  printf "\n=== Command Measurement Test ===\n"
  duration=$(measure_command Compact "" sleep 1)
  printf "Sleep test duration: %s\n" "$duration"
}

# Main execution - run tests if script is executed directly
case "${0##*/}" in
*duration* | *test*)
  case "${1:-}" in
  test) test_duration ;;
  help | --help | -h)
    printf "POSIX Duration and Timestamp Utilities\n\n"
    printf "Functions available:\n"
    printf "  format_duration_compact <ms> [include_icon]\n"
    printf "  format_duration_verbose <ms>\n"
    printf "  format_duration <ms> <format> [include_icon]\n"
    printf "  get_timestamp [format]\n"
    printf "  get_duration_message <ms> [action] [format]\n"
    printf "  measure_command <format> <action> <command> [args...]\n"
    printf "  test_duration\n\n"
    printf "Example:\n"
    printf "  format_duration 1500 Compact\n"
    printf "  get_timestamp ISO\n"
    printf "  measure_command Verbose 'File listing' ls -la\n"
    ;;
  '') test_duration ;;
  esac
  ;;
esac
