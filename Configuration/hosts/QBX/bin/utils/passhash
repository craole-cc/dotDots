#!/bin/sh
# passhash - Portable password hashing script with configurable Argon2 parameters

#~@ Define Argon2 parameters (with sensible defaults)
ARGON2_TIME_COST=${ARGON2_TIME_COST:-3}      # CPU cost
ARGON2_MEMORY_COST=${ARGON2_MEMORY_COST:-16} # Memory cost in KiB (2^16)
ARGON2_PARALLELISM=${ARGON2_PARALLELISM:-4}  # Parallelism degree
ARGON2_HASH_LENGTH=${ARGON2_HASH_LENGTH:-32} # Hash length in bytes

#~@ Trap to ensure stty is reset if script is interrupted
trap 'stty echo' INT TERM EXIT

usage() {
  cat <<EOF
  Usage: $0 [USERNAME]
  Generate password hash

  Options:
    -h, --help    Show this help message
    -t            Set Argon2 time cost (default: $ARGON2_TIME_COST)
    -m            Set Argon2 memory cost (default: $ARGON2_MEMORY_COST)
    -p            Set Argon2 parallelism (default: $ARGON2_PARALLELISM)
    -l            Set hash length (default: $ARGON2_HASH_LENGTH)

  Security requirements:
    - 12+ characters
    - Mixed case letters
    - At least one number
    - At least one special character (!@#$%^&*)

  Environment Variables:
    ARGON2_TIME_COST     Argon2 time cost
    ARGON2_MEMORY_COST   Argon2 memory cost
    ARGON2_PARALLELISM   Argon2 parallelism degree
    ARGON2_HASH_LENGTH   Hash output length
EOF
}
get_user() {
  #~@ Get username from command-line argument
  [ "$1" ] && printf '%s' "$1" && return 0

  #~@ Determine current user
  user=$(id -un 2>/dev/null || whoami 2>/dev/null)
  user=${user:-${USER:-${USERNAME}}}
  if [ -z "$user" ]; then
    print_error "Unable to determine current user"
    return 1
  fi

  printf '%s' "$user"
}

validate_password() {
  _pass="$1"

  check_length() {
    [ "${#_pass}" -lt 12 ] && {
      print_error "Password must be at least 12 characters long"
      return 1
    }
  }

  check_pattern() {
    printf '%s' "$_pass" | grep -qE "$1" || {
      print_error "Passwords must contain at least one $2"
      return 1
    }
  }

  check_length || return 1
  check_pattern '[A-Z]' 'uppercase letter' || return 1
  check_pattern '[a-z]' 'lowercase letter' || return 1
  check_pattern '[0-9]' 'number' || return 1
  check_pattern '[!@#$%^&*]' 'special character' || return 1
}

get_pass() {
  #~@ Disable terminal echo
  stty -echo

  #~@ Prompt for first password
  printf "Enter password for %s: " "$1" >&2
  read -r pw1
  printf "\nConfirm password: " >&2
  read -r pw2
  printf "\n" >&2

  #~@ Restore terminal echo
  stty echo

  #~@ Check if passwords match
  if [ "$pw1" != "$pw2" ]; then
    print_error "Passwords do not match"
    return 1
  fi

  #~@ Validate password complexity
  if validate_password "$pw1"; then
    printf '%s' "$pw1"
  else
    return 1
  fi
}

get_hash() {
  #~@ Generate salt
  salt=$(dd if=/dev/urandom bs=16 count=1 2>/dev/null | base64)

  #~@ Hash password with salt
  if command -v argon2 >/dev/null 2>&1; then
    hash="$(
      printf "%s" "$1" | argon2 "$salt" -id \
        -t "$ARGON2_TIME_COST" \
        -m "$ARGON2_MEMORY_COST" \
        -p "$ARGON2_PARALLELISM" \
        -l "$ARGON2_HASH_LENGTH" \
        -r
    )"
  elif command -v openssl >/dev/null 2>&1; then
    printf '%s%s' "$1" "$salt" |
      openssl dgst -sha512 -hex |
      cut -d' ' -f2
  elif command -v sha512sum >/dev/null 2>&1; then
    printf '%s%s' "$1" "$salt" |
      sha512sum |
      cut -d' ' -f1
  else
    print_error "No hash generation tool available (argon, openssl or sha512sum)"
    return 1
  fi
}

print_error() {
  _msg="$*"
  if command -v tput >/dev/null 2>&1; then
    _red=$(tput setaf 1)
    _normal=$(tput sgr0)
  else
    _red="\x1B[0;31m"
    _normal="\x1B[0m"
  fi

  printf "%s[ERROR] %s%s\n" "$_red" "$_normal" "$_msg" >&2
}

main() {
  #~@ Parse command-line options
  while [ "$#" -gt 0 ]; do
    case "$1" in
    -h | --help)
      usage
      return 0
      ;;
    -t)
      [ "$2" ] && {
        ARGON2_TIME_COST="$2"
        shift
      }
      ;;
    -m)
      [ "$2" ] && {
        ARGON2_MEMORY_COST="$2"
        shift
      }
      ;;
    -p)
      [ "$2" ] && {
        ARGON2_PARALLELISM="$2"
        shift
      }
      ;;
    -l)
      [ "$2" ] && {
        ARGON2_HASH_LENGTH="$2"
        shift
      }
      ;;
    *)
      username="$1"
      ;;
    esac
    shift
  done

  #~@ Get username
  username="$(get_user "$username")" || return 1

  #~@ Get and validate password
  password=$(get_pass "$username") || return 1

  #~@ Generate hash
  hashed_password=$(get_hash "$password") || return 1

  #~@ Print result (careful not to expose password)
  printf 'Hashed Password for %s: \n%s\n' "$username" "$hashed_password"

  #~@ Cleanup sensitive variables
  unset username password pw1 pw2 hashed_password
}

#~@ Run main and exit
main "$@"
