#!/bin/sh
# shellcheck disable=all

usage() {
  #DOC Displays usage information for the script
  #DOC Args: None
  #DOC Returns: 1 (to indicate usage error)
  #DOC Example: usage
  printf "Usage: weatherin [--latitude LATITUDE --longitude LONGITUDE] [CITY, COUNTRY] [COUNTRY] [CITY] [GPS_COORDINATES] [--verbose] [--debug]\n"
  printf "Example:\n"
  printf "  weatherin \"18.0431254,-77.50741\"\n"
  printf "  weatherin \"Mandeville, Jamaica\"\n"
  printf "  weatherin --latitude 18.0431254 --longitude -77.50741\n"
  printf "  weatherin Jamaica\n"
  printf "  weatherin Mandeville\n"
  printf "Options:\n"
  printf "  --verbose   Show detailed weather information\n"
  printf "  --debug     Enable debug mode to show script execution details\n"
  return 1
}

initialize_variables() {
  #DOC Parses command-line arguments
  #DOC Args:
  #DOC   $1 - Latitude
  #DOC   $2 - Longitude
  #DOC   $3 - Location
  #DOC   $4 - Verbose flag
  #DOC   $5 - Debug flag
  #DOC Returns: None
  #DOC Example: initialize_variables 37.7749 -122.4194 "San Francisco, USA" 0 0

  #{ Reset arguments
  unset latitude longitude location debug verbose test

  #{ Parse arguments
  while [ $# -gt 0 ]; do
    case "$1" in
    --location | --coordinates)
      if [ -n "$2" ]; then
        location="$2"
        shift
      else
        printf "Error: --location requires a value.\n" >&2
        usage
        return 1
      fi
      ;;
    --latitude)
      if [ -n "$2" ]; then
        latitude="$2"
        shift 2
      else
        printf "Error: --latitude requires a value.\n" >&2
        usage
        return 1
      fi
      ;;
    --longitude)
      if [ -n "$2" ]; then
        longitude="$2"
        shift
      else
        printf "Error: --longitude requires a value.\n" >&2
        usage
        return 1
      fi
      ;;
    -V | --verbose)
      verbose=true
      # debug=true
      ;;
    -d | --debug)
      debug=true
      ;;
    -x | --test)
      test=true
      ;;
    --show-gps)
      show_gps=true
      ;;
    *)
      if [ "$location" ]; then
        location="${location} $1"
      else
        location="$1"
      fi
      ;;
    esac
    shift
  done

  #{ Validate input
  if [ "$latitude" ] && [ "$longitude" ]; then
    location="${latitude},${longitude}"
  elif [ -z "$location" ]; then
    [ "$test" ] || {
      printf "Error: No location provided.\n" >&2
      usage
      return 1
    }
  fi

  #{ Debug the arguments
  [ "$debug" ] && {
    printf "DEBUG: Verbose = %s\n" "$verbose"
    printf "DEBUG: Latitude = %s\n" "$latitude"
    printf "DEBUG: Longitude = %s\n" "$longitude"
    printf "DEBUG: Location = %s\n" "$location"
  }
}

initialize_utilities() {

  cleanup_location() {
    #DOC Cleans up a location string by normalizing spaces and commas
    #DOC
    #DOC Parameters:
    #DOC   $1 {string} Location string that may contain spaces and commas
    #DOC
    #DOC Returns:
    #DOC   {string} Normalized location string with spaces replaced by '+',
    #DOC   redundant commas removed, and plus signs around commas cleaned up
    #DOC
    #DOC Example:
    #DOC   cleanup_location "Mandeville , Jamaica" => "Mandeville,Jamaica"
    printf "%s" "$1" |
      tr -s ' ' '+' |
      #? Convert spaces to plus
      sed 's/,+/,/g' |
      #? Convert comma plus combination to a single comma
      sed 's/+,/,/g' #? Convert plus comma combination to a single comma
  }

  fetch_weather() {
    #DOC Fetches weather information for a given location
    #DOC
    #DOC Parameters:
    #DOC   $1 {string} Location (format: float,float or int,int without spaces)
    #DOC
    #DOC Returns:
    #DOC   {string} Weather information (plain text) or empty string on failure
    #DOC
    #DOC Example:
    #DOC   fetch_weather "18.0431254,-77.50741"
    #DOC
    #DOC View options:
    #DOC   c    Weather condition,
    #DOC   C    Weather condition textual name,
    #DOC   x    Weather condition, plain-text symbol,
    #DOC   h    Humidity,
    #DOC   t    Temperature (Actual),
    #DOC   f    Temperature (Feels Like),
    #DOC   w    Wind,
    #DOC   l    Location,
    #DOC   m    Moon phase 🌑🌒🌓🌔🌕🌖🌗🌘,
    #DOC   M    Moon day,
    #DOC   p    Precipitation (mm/3 hours),
    #DOC   P    Pressure (hPa),
    #DOC   u    UV index (1-12),
    #DOC   D    Dawn*,
    #DOC   S    Sunrise*,
    #DOC   z    Zenith*,
    #DOC   s    Sunset*,
    #DOC   d    Dusk*,
    #DOC   T    Current time*,
    #DOC   Z    Local timezone.
    #DOC
    #DOC  Note:
    #DOC   * times are shown in the local timezone

    # #{ Validate location format
    # printf "%s" "$1" |
    #   grep -qE '^-?[0-9]{1,3}(\.[0-9]+)?,-?[0-9]{1,3}(\.[0-9]+)?$' || {
    #   printf "Error: Invalid location format." >&2 &&
    #     printf "Use format like '18.0431254,-77.50741' (float,float) or '18,-77' (int,int) without spaces.\n" >&2
    #   return 1
    # }

    while [ "$#" -gt 0 ]; do
      case "$1" in
      -h) show_usage ;;
      --help) show_help ;;
      --detailed) detailed=true ;;
      *) _location="$1" ;;
      esac
      shift
    done
    # _location="Mandeville, Jamaica"
    # options='condition_icon,condition_name,condition_symbol,temperature_actual,temperature_feel,wind,location,humidity,moon_phase,moon_day,precipitation,pressure,uv_index,dawn,sunrise,zenith,sunset,dusk,time,timezone'
    detailed=true

    #{ Use the external weather API
    _url="https://wttr.in"

    _format_json="j2"
    _format_struct="v2"
    _format_simple="condition_icon=%c+condition_name=%C+condition_symbol=%x+temperature_actual=%t+temperature_feel=%f+wind=%w+humidity=%h+moon_phase=%m+moon_day=%M+precipitation=%p+pressure=%P+uv_index=%u"
    _api_url="$(printf '%s/%s?format=' "$_url" "$location")"
    _api_url_struct="$(printf '%s%s' "$_api_url" "$_format_struct")"
    _api_url_simple="$(printf '%s%s' "$_api_url" "$_format_simple")"
    _api_url_json="$(printf '%s%s' "$_api_url" "$_format_json")"
    _response_struct="$(curl -s "$_api_url_struct")"
    _response_simple="$(curl -s "$_api_url_simple")"
    _response_json="$(curl -s "$_api_url_json")"

    #{ Print the parsed variables
    printf '\nDEBUG: Structured\n\tURL: %s\n\tRES: %s\n' \
      "$_api_url_struct" "$_response_struct"
    printf '\nDEBUG:     Simple\n\tURL: %s\n\tRES: %s\n' \
      "$_api_url_simple" "$_response_simple"
    printf '\nDEBUG:     JSON\n\tURL: %s\n\tRES: %s\n' \
      "$_api_url_json" "$_response_json"

    return
    _response_struct='┌┤  Weather report for: Warsaw,Poland  ├─────────────────────────────────┐
│                                                                        │
│                                                                        │
│       Fri 24 Jan              Sat 25 Jan              Sun 26 Jan       │
│                       ╷                       ╷                        │
│                                                                        │
│                                                                        │
│+6           ⢠⠊⢇                       ⡠⠒⠉⠉⠦⡀                      ⡠⠊⠣⡀ │
│            ⢀⠇ ⠈⡆                     ⡔⠁    ⠡⡀                    ⡰⠁  ⢇ │
│            ⡜   ⢣                    ⡊       ⠑⢄⣀⢀⡠⠤⠢⢄        ⢀⠤⢄⣀⠎    ⠘⠄│
│           ⢠⠃   ⠘⡄                 ⣀⠎           ⠁    ⠣⡀     ⡔⠁          │
│           ⡎     ⢇                ⡐⠁                  ⠑⢄   ⡌            │
│          ⢰⠁     ⢸               ⡔⠁                     ⠒⠔⠊             │
│         ⢀⠇       ⡇             ⡌                                       │
│⡖⠤⠒⠒⠒⠒⠒⠤⡠⠎        ⢸        ⡠⠒⠒⠒⠊                                        │
│⡇                  ⢣     ⢀⠎                                             │
│+1                  ⠑⠤⣀⢁⣀⠆                                              │
│                                                                        │
│─────┴─────┼─────┴─────╂─────┴─────┼─────┴─────╂─────┴─────┼─────┴─────╂│
│     6    12    18           6    12    18           6    12    18      │
│                                                                        │
│                          0.10mm|99%                                    │
│                              ▁█                                        │
│                              ██▇                                       │
│                             ▁███                                       │
│                             ████▅                                      │
│                       __   ▁█████    __                                │
│                                                                        │
│                                                                        │
│ 🌦  ☁️  ☁️  ⛅️ ☀️  ⛅️ ☀️  ☀️  ☀️  ☁️  🌦  ☁️  ☁️  ⛅️ ⛅️ ⛅️ ☁️  ☁️  ☀️  ☁️  ☁️  ☁️  ☁️  ⛅️│
│ →  →  ↗  ↗  ↗  ↑  ↑  ↑  ↑  ↑  ↑  ↑  ↑  ↑  ↑  ↑  ↑  ↑  ↖  ↑  ↑  ↑  ↑  ↗ │
│ 17 12 8  7  10 12 11 14 17 17 14 14 12 15 17 13 16 10 13 12 11 8  9  10│
│                                                                        │
│🌘                     🌘                      🌘                     🌘│
│        ━━━━━━━━━─              ━━━━━━━━━─              ━━━━━━━━━─      │
│                                                                        │
│                                                                        │
└────────────────────────────────────────────────────────────────────────┘
Weather: ⛅️  Partly cloudy, +6°C, 61%, ↑12km/h, 1014hPa
Timezone: Europe/Warsaw
  Now:    17:51:40+0100 | Dawn:    06:49:40  | Sunrise: 07:28:23
  Zenith: 11:48:00      | Sunset:  16:08:22  | Dusk:    16:47:07
Location: Warszawa, mazowieckie, RP [52.2318,21.0058]'
    _response_simple="condition_icon=☀️   condition_name=Sunny condition_symbol=o temperature_actual=+23°C temperature_feel=+26°C wind=↙7km/h humidity=90% moon_phase=🌘 moon_day=23 precipitation=0.0mm pressure=1018hPa uv_index=0"

    #{ Parse the data into variables
    while IFS='=' read -r key value; do
      case "$key" in
      condition_icon) condition_icon="$value" ;;
      condition_name) condition_name="$value" ;;
      condition_symbol) condition_symbol="$value" ;;
      temperature_actual) temperature_actual="$value" ;;
      temperature_feel) temperature_feel="$value" ;;
      wind) wind="$value" ;;
      humidity) humidity="$value" ;;
      moon_phase) moon_phase="$value" ;;
      moon_day) moon_day="$value" ;;
      precipitation) precipitation="$value" ;;
      pressure) pressure="$value" ;;
      uv_index) uv_index="$value" ;;
      esac
    done <<EOF
$(printf '%s' "$_response_simple" | tr ' ' '\n')
EOF

    #{ Extract weather details
    weather_line=$(echo "$_response_struct" | grep 'Weather:')
    weather_condition=$(echo "$weather_line" | sed -n 's/.*Weather: \(.*\), +[0-9]*°C.*/\1/p')
    temperature=$(echo "$weather_line" | sed -n 's/.*, \(+[0-9]*°C\).*/\1/p')
    humidity=$(echo "$weather_line" | sed -n 's/.*, \([0-9]*%\).*/\1/p')
    wind=$(echo "$weather_line" | sed -n 's/.*, \(↑[0-9]*km\/h\).*/\1/p')
    pressure=$(echo "$weather_line" | sed -n 's/.*, \([0-9]*hPa\).*/\1/p')

    #{ Extract timezone
    timezone=$(echo "$_response_struct" | grep 'Timezone:' | sed -n 's/Timezone: \(.*\)/\1/p')

    #{ Extract location and coordinates
    location_line=$(echo "$_response_struct" | grep 'Location:')
    location=$(echo "$location_line" | sed -n 's/Location: \(.*\) \[.*/\1/p')
    coordinates=$(echo "$location_line" | sed -n 's/.*\[\(.*\)\]/\1/p')

    #{ Extract time-related information
    now=$(echo "$_response_struct" | grep 'Now:' | sed -n 's/.*Now: *\(.*\) |.*/\1/p')
    sunrise=$(echo "$_response_struct" | grep 'Sunrise:' | sed -n 's/.*Sunrise: *\(.*\)/\1/p')
    sunset=$(echo "$_response_struct" | grep 'Sunset:' | sed -n 's/.*Sunset: *\(.*\)/\1/p')

    # Print the parsed variables
    echo "Weather Condition: $weather_condition"
    echo "Temperature: $temperature"
    echo "Humidity: $humidity"
    echo "Wind: $wind"
    echo "Pressure: $pressure"
    echo "Timezone: $timezone"
    echo "Location: $location"
    echo "Coordinates: $coordinates"
    echo "Current Time: $now"
    echo "Sunrise: $sunrise"
    echo "Sunset: $sunset"

    printf 'DEBUG: Condition⤸\n\tIcon: %s\n\tName: %s\n\tSymbol: %s\n' \
      "$condition_icon" "$condition_name" "$condition_symbol"
    printf 'DEBUG: Temperature⤸\n\tActual: %s \n\tFeels Like: %s\n' "$temperature_actual" "$temperature_feel"
    printf 'DEBUG: Wind: %s\n' "$wind"
    printf 'DEBUG: Humidity: %s\n' "$humidity"
    printf 'DEBUG: Moon⤸\n\tPhase: %s \n\tDay: %s\n' "$moon_phase" "$moon_day"
    printf 'DEBUG: Precipitation: %s\n' "$precipitation"
    printf 'DEBUG: Pressure: %s\n' "$pressure"
    printf 'DEBUG: UV Index: %s\n' "$uv_index"
    return
    # info="$(curl -s "$url_formatted")"
    return
    case "$verbose" in
    '' | 0) curl -s "$url_formatted" ;;
    *) curl -s "https://wttr.in/${1}" ;;
    esac

    #TODO: Handle response errors
    #TODO: allow formatting options
  }

  fetch_coordinates() {
    #DOC Fetches GPS coordinates for a given city or country name using an external geocoding API.
    #DOC
    #DOC Parameters:
    #DOC   $1 {string} - The location name, such as "San Francisco, USA".
    #DOC
    #DOC Returns:
    #DOC   {string} GPS coordinates in the format "latitude,longitude" (e.g., "37.7749,-122.4194"),
    #DOC   or an empty string if the resolution fails.
    #DOC
    #DOC Example:
    #DOC   fetch_coordinates "San Francisco, USA"

    #{ Variables
    unset _location _response osm_api_url _data _latitude _longitude

    #{ Use a geocoding API to resolve the location
    _location=$(cleanup_location "$1")

    #{ Skip if coordinates are already provided
    printf "%s" "$_location" |
      grep -qE '^-?[0-9]{1,3}(\.[0-9]+)?,-?[0-9]{1,3}(\.[0-9]+)?$' && {
      printf "%s" "$_location"
      return 0
    }

    #{ Use a geocoding API to resolve the location
    _url="https://nominatim.openstreetmap.org"
    _format="&format=geocodejson"
    _limit="&limit=1"
    _poly="&polygon_kml=1"
    _addr="&addressdetails=1"
    _api_url="${_url}/search?q=${_location}${_format}${_limit}${_poly}${_addr}"
    _response="$(curl -s "$_api_url")"

    [ "$debug" ] && {
      printf "DEBUG: Location = %s\n" "$_location"
      printf "DEBUG: API URL = %s\n" "$_api_url"
      printf "DEBUG: Response: %s\n" "$_response"
    }

    #{ Extract coordinates, latitude and longitude
    if command -v jq >/dev/null 2>&1; then
      _coordinates=$(printf "%s" "$_response" | jq -r '.features[].geometry.coordinates')
      _longitude=$(printf "%s" "$_coordinates" | jq -r '.[0]')
      _latitude=$(printf "%s" "$_coordinates" | jq -r '.[1]')
    else
      #{ Extract coordinates using grep and sed in a POSIX-friendly way
      _coordinates="$(
        printf '%s' "$_response" |
          sed -n 's/.*"coordinates":\s*\[\s*\([^,]*\)\s*,\s*\([^]]*\)\s*\].*/\1,\2/p'
      )"

      #{ Use sed to extract longitude and latitude, handling potential spaces
      _longitude=$(printf '%s' "$_coordinates" | cut -d',' -f1)
      _latitude=$(printf '%s' "$_coordinates" | cut -d',' -f2)
    fi

    [ "$debug" ] && {
      printf "DEBUG: Coordinates = %s\n" "$_coordinates"
      printf "DEBUG: Longitude = %s\n" "$_longitude"
      printf "DEBUG: Latitude = %s\n" "$_latitude"
    }

    #{ Ensure both latitude and longitude are set
    { [ "$_latitude" ] && [ "$_longitude" ]; } || {
      printf "Error: Failed to resolve location '%s'." "$1" >&2
      return 1
    }

    #{ Return the coordinates
    printf '%s,%s' "$_latitude" "$_longitude"
  }

  duration_from_nanoseconds() {
    #DOC Converts a duration from nanoseconds to a human-readable string.
    #DOC
    #DOC Parameters:
    #DOC   $1 {int} Duration in nanoseconds.
    #DOC
    #DOC Returns:
    #DOC   {string} Formatted duration string in the format of "Xm Y.Zs" if the duration is
    #DOC   longer than a minute, "Y.Zs" if the duration is longer than a second, or "Y.Zms"
    #DOC   otherwise, where X is minutes, Y is seconds, and Z is milliseconds.
    #DOC
    #DOC Example:
    #DOC   start_time_in_nanoseconds=$(date +%s%N)
    #DOC   actual_output=$(eval "$command_under_test")
    #DOC   end_time_in_nanoseconds=$(date +%s%N)
    #DOC   duration_in_nanoseconds=$((end_time_in_nanoseconds - start_time_in_nanoseconds))
    #DOC   formatted_duration=$(duration_from_nanoseconds "$duration_in_nanoseconds")

    duration_in_nanoseconds="$1"
    duration_in_milliseconds=$((duration_in_nanoseconds / 1000000))
    duration_in_seconds=$((duration_in_milliseconds / 1000))
    duration_in_minutes=$((duration_in_seconds / 60))

    if [ "$duration_in_minutes" -gt 0 ]; then
      #? Duration is in minutes and seconds
      remaining_seconds=$((duration_in_seconds % 60))
      remaining_milliseconds=$((duration_in_milliseconds % 1000))
      printf "%dm %d.%03ds" "$duration_in_minutes" "$remaining_seconds" "$remaining_milliseconds"
    elif [ "$duration_in_seconds" -gt 0 ]; then
      #? Duration is in seconds and milliseconds
      remaining_milliseconds=$((duration_in_milliseconds % 1000))
      printf "%d.%03ds" "$duration_in_seconds" "$remaining_milliseconds"
    else
      #? Duration is in milliseconds
      printf "%d.%03dms" "$duration_in_milliseconds" "$((duration_in_nanoseconds % 1000000 / 1000))"
    fi
  }

  assert() {
    #DOC Asserts that the output of a command matches the expected value.
    #DOC
    #DOC Parameters:
    #DOC   $1 {string} The first argument is the expected value.
    #DOC   $* {string} All remaining arguments are concatenated into a single command.
    #DOC
    #DOC Example
    #DOC   # PASS case
    #DOC   assert "Hello, World!" echo "Hello, World!"
    #DOC   # FAIL case
    #DOC   assert "Hello, World!" echo "Goodbye, World!"
    #DOC
    #DOC Return:
    #DOC   [PASS] echo "Hello, World!"
    #DOC     Actual:   Hello, World!
    #DOC     Duration: 1.234 ms
    #DOC
    #DOC   [FAIL] echo "Goodbye, World!"
    #DOC     Expected: Hello, World!
    #DOC     Actual:   Goodbye, World!
    #DOC     Duration: 1.567 s

    #{ Initialize the environment variabes
    expected_value="$1"
    shift
    command_under_test="$*"

    #{ Validate the variables
    [ -z "$expected_value" ] && {
      echo "Error: 'expected_value' is missing." >&2
      return 1
    }
    [ -z "$command_under_test" ] && {
      echo "Error: 'command_under_test' is missing." >&2
      return 1
    }

    #{ Evaluate the command to get the actual result and duration
    start_time_in_nanoseconds=$(date +%s%N)
    actual_output=$(eval "$command_under_test")
    end_time_in_nanoseconds=$(date +%s%N)
    duration_in_nanoseconds=$((end_time_in_nanoseconds - start_time_in_nanoseconds))

    #{ Format duration into a human-readable string
    formatted_duration=$(duration_from_nanoseconds "$duration_in_nanoseconds")

    #{ Test and print the result
    if [ "$actual_output" != "$expected_value" ]; then
      printf "\n\033[1;31m[FAIL]\033[0m %s\n" "$command_under_test"
      printf "  \033[1;34mExpected:\033[0m %s\n" "$expected_value"
      printf "  \033[1;34mActual:\033[0m   %s\n" "$actual_output"
      printf "  \033[1;34mDuration:\033[0m %s\n" "$formatted_duration"
    else
      printf "\n\033[1;32m[PASS]\033[0m %s\n" "$command_under_test"
      printf "  \033[1;34mActual:\033[0m   %s\n" "$actual_output"
      printf "  \033[1;34mDuration:\033[0m %s\n" "$formatted_duration"
    fi
  }
}

initialize_tests() {
  test_cleanup_location() {
    assert \
      "Mandeville,Jamaica" \
      cleanup_location '"Mandeville, Jamaica"'
    assert \
      "Mandeville+Jamaica" \
      cleanup_location '"Mandeville + Jamaica"'
    assert \
      "Mandeville,Manchester,Jamaica" \
      cleanup_location '"Mandeville, Manchester, Jamaica"'
    assert \
      "Hanbury+District,Manchester,Jamaica" \
      cleanup_location '"Hanbury District, Manchester, Jamaica"'
    assert \
      "Hanbury+District,Manchester,Jamaica" \
      cleanup_location '"Hanbury      District, Manchester, Jamaica"'
    assert \
      "18.0431254,-77.50741" \
      cleanup_location '"18.0431254,-77.50741"'
    assert \
      "18,-77" \
      cleanup_location '"18,-77"'
    assert \
      "18.0431254,-77.50741" \
      cleanup_location '"18.0431254, -77.50741"'
    assert \
      "18.0431254,-77.50741" \
      cleanup_location '"18.0431254, -77.50741"'
  }

  test_fetch_coordinates() {
    assert \
      "18.0431254,-77.50741" \
      fetch_coordinates '"Mandeville, Jamaica"'
    assert \
      "18.053470063746403,-77.49528810165127" \
      fetch_coordinates \"Hanbury Road,Jamaica\"
    assert \
      "37.7792588,-122.4193286" \
      fetch_coordinates '"San Francisco, USA"'
    assert \
      "18.053470063746403,-77.49528810165127" \
      fetch_coordinates \"Hanbury Road,Jamaica\"
    assert \
      "18.0431254,-77.50741" \
      fetch_coordinates '"18.0431254  ,  -77.50741"'
    assert \
      "18,-77" \
      fetch_coordinates '"18,-77"'
  }

  test_fetch_weather() {
    #TODO: Build this test to check for 404 errors
    main 18.0431254,-77.50741
    echo
    main 18.0431311,-77.5073146287935
    echo
    main "Paris"
    echo
    main 18,-77
    echo
    main 18.04313,-77.507314
    echo
    main 18.0431254,-77.50741
    echo
    main Mandeville
    echo
  }
}
main() {
  #{ Establish the script environment
  initialize_variables "$@"
  initialize_utilities
  initialize_tests

  #{ Perform tests
  [ "$test" ] && {
    # test_cleanup_location
    # test_fetch_coordinates
    test_fetch_weather
    return
  }

  #{ Resolve the location to coordinates
  coordinates="$(fetch_coordinates "$location")"
  [ "$coordinates" ] || {
    [ "$verbose" ] && {
      printf "Error: Failed to resolve location.\n" >&2
      usage
    }
    return 1
  }

  #{ Fetch and display weather
  weather="$(fetch_weather "$coordinates")"
  [ "$weather" ] || {
    [ "$verbose" ] && {
      printf "Error: Failed to fetch weather data. Please check your input and internet connection.\n" >&2
      usage
    }
    return 1
  }

  [ -z "$verbose" ] && [ "$show_gps" ] && printf "Weather report: %s\n" "$coordinates"
  printf "%s\n" "$weather"
}
# fi

# main "$@" --debug Hanbury Road , Jamaica
# main "$@" | rg "FAIL" --after-context=3
main "$@"
#TODO: return the name of the city
