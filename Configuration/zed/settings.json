    {
        "theme": {
            "mode": "system",
            "light": "Catppuccin Latte",
            "dark": "Catppuccin FrappÃ©"
        },
        "icon_theme": {
            "mode": "system",
            "light": "Catppuccin Latte",
            "dark": "Catppuccin FrappÃ©"
        },
        "base_keymap": "VSCode",
        "features": {
            "edit_prediction_provider": "zed"
        },
        "buffer_font_family": "Zed Plex Mono",
        "buffer_font_features": {
            "calt": true,
            "ss01": true,
            "ss02": true,
            "ss03": true,
            "ss04": true,
            "ss05": true,
            "ss06": true,
            "ss07": true,
            "ss08": true,
            "zero": true,
            "onum": true
        },
        "buffer_font_size": 18,
        "buffer_font_weight": 400,
        "buffer_line_height": "comfortable",
        "ui_font_family": ".SystemUIFont",
        "ui_font_fallbacks": [],
        "ui_font_features": {
            "calt": false
        },
        "ui_font_weight": 400,
        "ui_font_size": 16,
        "unnecessary_code_fade": 0.3,
        "active_pane_magnification": 1.0,
        "pane_split_direction_horizontal": "up",
        "pane_split_direction_vertical": "left",
        "centered_layout": {
            "left_padding": 0.2,
            "right_padding": 0.2
        },
        "multi_cursor_modifier": "alt",
        "vim_mode": false,
        "hover_popover_enabled": true,
        "confirm_quit": false,
        "restore_on_startup": "last_session",
        "drop_target_size": 0.2,
        "when_closing_with_no_tabs": "platform_default",
        "use_system_path_prompts": true,
        "cursor_blink": true,
        "cursor_shape": "hollow",
        "current_line_highlight": "all",
        "show_completions_on_input": true,
        "show_completion_documentation": true,
        "completion_documentation_secondary_query_debounce": 300,
        "auto_signature_help": true,
        "show_signature_help_after_edits": true,
        "show_wrap_guides": true,
        "wrap_guides": [],
        "redact_private_values": false,
        "expand_excerpt_lines": 3,
        "private_files": [
            "**/.env*",
            "**/*.pem",
            "**/*.key",
            "**/*.cert",
            "**/*.crt",
            "**/secrets.yml"
        ],
        "use_on_type_format": true,
        "use_autoclose": true,
        "use_auto_surround": true,
        "always_treat_brackets_as_autoclosed": false,
        "show_edit_predictions": true,
        "show_whitespaces": "selection",
        "calls": {
            "mute_on_join": false,
            "share_on_join": false
        },
        "toolbar": {
            "breadcrumbs": true,
            "quick_actions": true,
            "selections_menu": true
        },
        "scrollbar": {
            "show": "auto",
            "cursors": true,
            "git_diff": true,
            "search_results": true,
            "selected_symbol": true,
            "diagnostics": "all"
        },
        "middle_click_paste": true,
        "double_click_in_multibuffer": "select",
        "gutter": {
            "line_numbers": true,
            "code_actions": true,
            "runnables": true,
            "folds": true
        },
        "indent_guides": {
            "enabled": true,
            "line_width": 1,
            "active_line_width": 1,
            "coloring": "indent_aware",
            "background_coloring": "indent_aware"
        },
        "scroll_beyond_last_line": "one_page",
        "vertical_scroll_margin": 3,
        "scroll_sensitivity": 1.0,
        "relative_line_numbers": false,
        "search_wrap": true,
        "search": {
            "whole_word": false,
            "case_sensitive": false,
            "include_ignored": false,
            "regex": false
        },
        "seed_search_query_from_cursor": "always",
        "use_smartcase_search": false,
        "inlay_hints": {
            "enabled": true,
            "show_type_hints": true,
            "show_parameter_hints": true,
            "show_other_hints": true,
            "show_background": true,
            "edit_debounce_ms": 700,
            "scroll_debounce_ms": 50
        },
        "project_panel": {
            "button": true,
            "default_width": 240,
            "dock": "left",
            // Whether to show file icons in the project panel.
            "file_icons": true,
            // Whether to show folder icons or chevrons for directories in the project panel.
            "folder_icons": true,
            // Whether to show the git status in the project panel.
            "git_status": true,
            // Amount of indentation for nested items.
            "indent_size": 20,
            // Whether to reveal it in the project panel automatically,
            // when a corresponding project entry becomes active.
            // Gitignored entries are never auto revealed.
            "auto_reveal_entries": true,
            // Whether to fold directories automatically and show compact folders
            // (e.g. "a/b/c" ) when a directory has only one subdirectory inside.
            "auto_fold_dirs": true,
            /// Scrollbar-related settings
            "scrollbar": {
                /// When to show the scrollbar in the project panel.
                ///
                /// Default: always
                "show": "always"
            }
        },
        "outline_panel": {
            // Whether to show the outline panel button in the status bar
            "button": true,
            // Default width of the outline panel.
            "default_width": 300,
            // Where to dock the outline panel. Can be 'left' or 'right'.
            "dock": "left",
            // Whether to show file icons in the outline panel.
            "file_icons": true,
            // Whether to show folder icons or chevrons for directories in the outline panel.
            "folder_icons": true,
            // Whether to show the git status in the outline panel.
            "git_status": true,
            // Amount of indentation for nested items.
            "indent_size": 20,
            // Whether to reveal it in the outline panel automatically,
            // when a corresponding outline entry becomes active.
            // Gitignored entries are never auto revealed.
            "auto_reveal_entries": true,
            /// Whether to fold directories automatically
            /// when a directory has only one directory inside.
            "auto_fold_dirs": true
        },
        "collaboration_panel": {
            // Whether to show the collaboration panel button in the status bar.
            "button": true,
            // Where to dock the collaboration panel. Can be 'left' or 'right'.
            "dock": "left",
            // Default width of the collaboration panel.
            "default_width": 240
        },
        "chat_panel": {
            // Whether to show the chat panel button in the status bar.
            "button": "always",
            // Where to the chat panel. Can be 'left' or 'right'.
            "dock": "right",
            // Default width of the chat panel.
            "default_width": 240
        },
        "message_editor": {
            // Whether to automatically replace emoji shortcodes with emoji characters.
            // For example: typing `:wave:` gets replaced with `ðŸ‘‹`.
            "auto_replace_emoji_shortcode": true
        },
        "notification_panel": {
            // Whether to show the notification panel button in the status bar.
            "button": true,
            // Where to dock the notification panel. Can be 'left' or 'right'.
            "dock": "right",
            // Default width of the notification panel.
            "default_width": 380
        },
        "assistant": {
            // Version of this setting.
            "version": "2",
            // Whether the assistant is enabled.
            "enabled": true,
            // Whether to show the assistant panel button in the status bar.
            "button": true,
            // Where to dock the assistant panel. Can be 'left', 'right' or 'bottom'.
            "dock": "right",
            // Default width when the assistant is docked to the left or right.
            "default_width": 640,
            // Default height when the assistant is docked to the bottom.
            "default_height": 320,
            // The default model to use when creating new contexts.
            "default_model": {
                // The provider to use.
                "provider": "ollama",
                // The model to use.
                "model": "qwen2.5-coder:7b"
            }
        },
        "slash_commands": {
            "docs": {
                "enabled": false
            },
            "project": {
                "enabled": false
            }
        },
        "show_call_status_icon": true,
        "enable_language_server": true,
        "linked_edits": true,
        "language_servers": [
            "..."
        ],
        "autosave": {
            "after_delay": {
                "milliseconds": 500
            }
        },
        "tab_bar": {
            "show": true,
            "show_nav_history_buttons": true
        },
        "tabs": {
            "git_status": false,
            "close_position": "right",
            "file_icons": false
        },
        "preview_tabs": {
            "enabled": true,
            "enable_preview_from_file_finder": false,
            "enable_preview_from_code_navigation": false
        },
        "file_finder": {
            "file_icons": true
        },
        "remove_trailing_whitespace_on_save": true,
        "extend_comment_on_newline": true,
        "ensure_final_newline_on_save": true,
        "format_on_save": "on",
        "formatter": "auto",
        "soft_wrap": "editor_width",
        "preferred_line_length": 80,
        // Whether to indent lines using tab characters, as opposed to multiple
        // spaces.
        "hard_tabs": false,
        // How many columns a tab should occupy.
        "tab_size": 4,
        // Control what info is collected by Zed.
        "telemetry": {
            // Send debug info like crash reports.
            "diagnostics": true,
            // Send anonymized usage data like what languages you're using Zed with.
            "metrics": true
        },
        // Automatically update Zed. This setting may be ignored on Linux if
        // installed through a package manager.
        "auto_update": true,
        // Diagnostics configuration.
        "diagnostics": {
            // Whether to show warnings or not by default.
            "include_warnings": true
        },
        // Add files or globs of files that will be excluded by Zed entirely:
        // they will be skipped during FS scan(s), file tree and file search
        // will lack the corresponding file entries.
        "file_scan_exclusions": [
            "**/.git",
            "**/.svn",
            "**/.hg",
            "**/CVS",
            "**/.DS_Store",
            "**/Thumbs.db",
            "**/.classpath",
            "**/.settings"
        ],
        // Git gutter behavior configuration.
        "git": {
            // Control whether the git gutter is shown. May take 2 values:
            // 1. Show the gutter
            //      "git_gutter": "tracked_files"
            // 2. Hide the gutter
            //      "git_gutter": "hide"
            "git_gutter": "tracked_files",
            // Control whether the git blame information is shown inline,
            // in the currently focused line.
            "inline_blame": {
                "enabled": true
                // Sets a delay after which the inline blame information is shown.
                // Delay is restarted with every cursor movement.
                // "delay_ms": 600
            }
        },
        // Configuration for how direnv configuration should be loaded. May take 2 values:
        // 1. Load direnv configuration through the shell hook, works for POSIX shells and fish.
        //      "load_direnv": "shell_hook"
        // 2. Load direnv configuration using `direnv export json` directly.
        //    This can help with some shells that otherwise would not detect
        //    the direnv environment, such as nushell or elvish.
        //      "load_direnv": "direct"
        "load_direnv": "shell_hook",
        "edit_predictions": {
            // A list of globs representing files that inline completions should be disabled for.
            "disabled_globs": [
                ".env"
            ]
        },
        // Settings specific to journaling
        "journal": {
            // The path of the directory where journal entries are stored
            "path": "~",
            // What format to display the hours in
            // May take 2 values:
            // 1. hour12
            // 2. hour24
            "hour_format": "hour12"
        },
        // Settings specific to the terminal
        "terminal": {
            // What shell to use when opening a terminal. May take 3 values:
            // 1. Use the system's default terminal configuration in /etc/passwd
            //      "shell": "system"
            // 2. A program:
            //      "shell": {
            //        "program": "sh"
            //      }
            // 3. A program with arguments:
            //     "shell": {
            //         "with_arguments": {
            //           "program": "/bin/bash",
            //           "args": ["--login"]
            //         }
            //     }
            "shell": "system",
            // Where to dock terminals panel. Can be `left`, `right`, `bottom`.
            "dock": "bottom",
            // Default width when the terminal is docked to the left or right.
            "default_width": 640,
            // Default height when the terminal is docked to the bottom.
            "default_height": 320,
            // What working directory to use when launching the terminal.
            // May take 4 values:
            // 1. Use the current file's project directory.  Will Fallback to the
            //    first project directory strategy if unsuccessful
            //      "working_directory": "current_project_directory"
            // 2. Use the first project in this workspace's directory
            //      "working_directory": "first_project_directory"
            // 3. Always use this platform's home directory (if we can find it)
            //     "working_directory": "always_home"
            // 4. Always use a specific directory. This value will be shell expanded.
            //    If this path is not a valid directory the terminal will default to
            //    this platform's home directory  (if we can find it)
            //      "working_directory": {
            //        "always": {
            //          "directory": "~/zed/projects/"
            //        }
            //      }
            "working_directory": "current_project_directory",
            // Set the cursor blinking behavior in the terminal.
            // May take 3 values:
            //  1. Never blink the cursor, ignoring the terminal mode
            //         "blinking": "off",
            //  2. Default the cursor blink to off, but allow the terminal to
            //     set blinking
            //         "blinking": "terminal_controlled",
            //  3. Always blink the cursor, ignoring the terminal mode
            //         "blinking": "on",
            "blinking": "terminal_controlled",
            // Set whether Alternate Scroll mode (code: ?1007) is active by default.
            // Alternate Scroll mode converts mouse scroll events into up / down key
            // presses when in the alternate screen (e.g. when running applications
            // like vim or  less). The terminal can still set and unset this mode.
            // May take 2 values:
            //  1. Default alternate scroll mode to on
            //         "alternate_scroll": "on",
            //  2. Default alternate scroll mode to off
            //         "alternate_scroll": "off",
            "alternate_scroll": "off",
            // Set whether the option key behaves as the meta key.
            // May take 2 values:
            //  1. Rely on default platform handling of option key, on macOS
            //     this means generating certain unicode characters
            //         "option_to_meta": false,
            //  2. Make the option keys behave as a 'meta' key, e.g. for emacs
            //         "option_to_meta": true,
            "option_as_meta": true,
            // Whether or not selecting text in the terminal will automatically
            // copy to the system clipboard.
            "copy_on_select": false,
            // Whether to show the terminal button in the status bar
            "button": true,
            // Any key-value pairs added to this list will be added to the terminal's
            // environment. Use `:` to separate multiple values.
            "env": {
                // "KEY": "value1:value2"
            },
            // Set the terminal's line height.
            // May take 3 values:
            //  1. Use a line height that's comfortable for reading, 1.618
            //         "line_height": "comfortable"
            //  2. Use a standard line height, 1.3. This option is useful for TUIs,
            //      particularly if they use box characters
            //         "line_height": "standard",
            //  3. Use a custom line height.
            //         "line_height": {
            //           "custom": 2
            //         },
            "line_height": "comfortable",
            // Activate the python virtual environment, if one is found, in the
            // terminal's working directory (as resolved by the working_directory
            // setting). Set this to "off" to disable this behavior.
            "detect_venv": {
                "on": {
                    // Default directories to search for virtual environments, relative
                    // to the current working directory. We recommend overriding this
                    // in your project's settings, rather than globally.
                    "directories": [
                        ".env",
                        "env",
                        ".venv",
                        "venv"
                    ],
                    // Can also be `csh`, `fish`, `nushell` and `power_shell`
                    "activate_script": "default"
                }
            },
            "toolbar": {
                // Whether to display the terminal title in its toolbar.
                "title": true
            }
            // Set the terminal's font size. If this option is not included,
            // the terminal will default to matching the buffer's font size.
            // "font_size": 15,
            // Set the terminal's font family. If this option is not included,
            // the terminal will default to matching the buffer's font family.
            // "font_family": "Zed Plex Mono",
            // Set the terminal's font fallbacks. If this option is not included,
            // the terminal will default to matching the buffer's font fallbacks.
            // This will be merged with the platform's default font fallbacks
            // "font_fallbacks": ["FiraCode Nerd Fonts"],
            // Sets the maximum number of lines in the terminal's scrollback buffer.
            // Default: 10_000, maximum: 100_000 (all bigger values set will be treated as 100_000), 0 disables the scrolling.
            // Existing terminals will not pick up this change until they are recreated.
            // "max_scroll_history_lines": 10000,
        },
        "code_actions_on_format": {},
        /// Settings related to running tasks.
        "tasks": {
            "variables": {}
        },
        // An object whose keys are language names, and whose values
        // are arrays of filenames or extensions of files that should
        // use those languages.
        //
        // For example, to treat files like `foo.notjs` as JavaScript,
        // and `Embargo.lock` as TOML:
        //
        // {
        //   "JavaScript": ["notjs"],
        //   "TOML": ["Embargo.lock"]
        // }
        //
        "file_types": {
            "Plain Text": [
                "txt"
            ],
            "JSON": [
                "flake.lock"
            ],
            "JSONC": [
                "**/.zed/**/*.json",
                "**/zed/**/*.json",
                "**/Zed/**/*.json",
                "tsconfig.json",
                "pyrightconfig.json"
            ]
        },
        /// By default use a recent system version of node, or install our own.
        /// You can override this to use a version of node that is not in $PATH with:
        /// {
        ///   "node": {
        ///     "node_path": "/path/to/node"
        ///     "npm_path": "/path/to/npm" (defaults to node_path/../npm)
        ///   }
        /// }
        /// or to ensure Zed always downloads and installs an isolated version of node:
        /// {
        ///   "node": {
        ///     "ignore_system_version": true,
        ///   }
        /// NOTE: changing this setting currently requires restarting Zed.
        "node": {},
        // The extensions that Zed should automatically install on startup.
        //
        // If you don't want any of these extensions, add this field to your settings
        // and change the value to `false`.
        "auto_install_extensions": {
            "html": true,
            "basher": true,
            "material-icon-theme": true,
            "cargotoml": true,
            "catppuccin": true,
            "catppuccin-icons": true,
            "codebook": false,
            "gruvbox material": true,
            "marksman": true,
            "nix": true,
            "snippets": true,
            "toml": true,
            "xy-zed": true
        },
        // Different settings for specific languages.
        "languages": {
            "Astro": {
                "prettier": {
                    "allowed": true,
                    "plugins": [
                        "prettier-plugin-astro"
                    ]
                }
            },
            "Blade": {
                "prettier": {
                    "allowed": true
                }
            },
            "C": {
                "format_on_save": "off",
                "use_on_type_format": false
            },
            "C++": {
                "format_on_save": "off",
                "use_on_type_format": false
            },
            "CSS": {
                "prettier": {
                    "allowed": true
                }
            },
            "Elixir": {
                "language_servers": [
                    "elixir-ls",
                    "!next-ls",
                    "!lexical",
                    "..."
                ]
            },
            "Erlang": {
                "language_servers": [
                    "erlang-ls",
                    "!elp",
                    "..."
                ]
            },
            "Go": {
                "code_actions_on_format": {
                    "source.organizeImports": true
                }
            },
            "GraphQL": {
                "prettier": {
                    "allowed": true
                }
            },
            "HEEX": {
                "language_servers": [
                    "elixir-ls",
                    "!next-ls",
                    "!lexical",
                    "..."
                ]
            },
            "HTML": {
                "prettier": {
                    "allowed": true
                }
            },
            "Java": {
                "prettier": {
                    "allowed": true,
                    "plugins": [
                        "prettier-plugin-java"
                    ]
                }
            },
            "JavaScript": {
                "language_servers": [
                    "!typescript-language-server",
                    "vtsls",
                    "..."
                ],
                "prettier": {
                    "allowed": true
                }
            },
            "JSON": {
                "prettier": {
                    "allowed": true
                }
            },
            "JSONC": {
                "format_on_save": "on"
                // "prettier": {
                //     "allowed": true,
                // },
            },
            "Markdown": {
                // "format_on_save": "off",
                "use_on_type_format": false,
                "prettier": {
                    "allowed": true
                }
            },
            "PHP": {
                "language_servers": [
                    "phpactor",
                    "!intelephense",
                    "..."
                ],
                "prettier": {
                    "allowed": true,
                    "plugins": [
                        "@prettier/plugin-php"
                    ],
                    "parser": "php"
                }
            },
            "Ruby": {
                "language_servers": [
                    "solargraph",
                    "!ruby-lsp",
                    "!rubocop",
                    "..."
                ]
            },
            "SCSS": {
                "prettier": {
                    "allowed": true
                }
            },
            "SQL": {
                "prettier": {
                    "allowed": true,
                    "plugins": [
                        "prettier-plugin-sql"
                    ]
                }
            },
            "Starlark": {
                "language_servers": [
                    "starpls",
                    "!buck2-lsp",
                    "..."
                ]
            },
            "Svelte": {
                "language_servers": [
                    "svelte-language-server",
                    "..."
                ],
                "prettier": {
                    "allowed": true,
                    "plugins": [
                        "prettier-plugin-svelte"
                    ]
                }
            },
            "TSX": {
                "language_servers": [
                    "!typescript-language-server",
                    "vtsls",
                    "..."
                ],
                "prettier": {
                    "allowed": true
                }
            },
            "Twig": {
                "prettier": {
                    "allowed": true
                }
            },
            "TypeScript": {
                "language_servers": [
                    "!typescript-language-server",
                    "vtsls",
                    "..."
                ],
                "prettier": {
                    "allowed": true
                }
            },
            "Vue.js": {
                "language_servers": [
                    "vue-language-server",
                    "..."
                ],
                "prettier": {
                    "allowed": true
                }
            },
            "XML": {
                "prettier": {
                    "allowed": true,
                    "plugins": [
                        "@prettier/plugin-xml"
                    ]
                }
            },
            "YAML": {
                "prettier": {
                    "allowed": true
                }
            }
        },
        // Different settings for specific language models.
        "language_models": {
            "anthropic": {
                "version": "1",
                "api_url": "https://api.anthropic.com"
            },
            "google": {
                "api_url": "https://generativelanguage.googleapis.com"
            },
            "ollama": {
                "api_url": "http://localhost:11434",
                "low_speed_timeout_in_seconds": 60
            },
            "openai": {
                "version": "1",
                "api_url": "https://api.openai.com/v1",
                "low_speed_timeout_in_seconds": 600
            }
        },
        // Zed's Prettier integration settings.
        // Allows to enable/disable formatting with Prettier
        // and configure default Prettier, used when no project-level Prettier installation is found.
        "prettier": {
            // // Whether to consider prettier formatter or not when attempting to format a file.
            // "allowed": false,
            //
            // // Use regular Prettier json configuration.
            // // If Prettier is allowed, Zed will use this for its Prettier instance for any applicable file, if
            // // the project has no other Prettier installed.
            // "plugins": [],
            //
            // // Use regular Prettier json configuration.
            // // If Prettier is allowed, Zed will use this for its Prettier instance for any applicable file, if
            // // the project has no other Prettier installed.
            // "trailingComma": "es5",
            // "tabWidth": 4,
            // "semi": false,
            // "singleQuote": true
        },
        // LSP Specific settings.
        "lsp": {
            // Specify the LSP name as a key here.
            // "rust-analyzer": {
            //     // These initialization options are merged into Zed's defaults
            //     "initialization_options": {
            //         "check": {
            //             "command": "clippy" // rust-analyzer.check.command (default: "check")
            //         }
            //     }
            // }
        },
        // Jupyter settings
        "jupyter": {
            "enabled": true
            // Specify the language name as the key and the kernel name as the value.
            // "kernel_selections": {
            //    "python": "conda-base"
            //    "typescript": "deno"
            // }
        },
        // Vim settings
        "vim": {
            "toggle_relative_line_numbers": false,
            "use_system_clipboard": "always",
            "use_multiline_find": false,
            "use_smartcase_find": false,
            "custom_digraphs": {}
        },
        // The server to connect to. If the environment variable
        // ZED_SERVER_URL is set, it will override this setting.
        "server_url": "https://zed.dev",
        // Settings overrides to use when using Zed Preview.
        // Mostly useful for developers who are managing multiple instances of Zed.
        "preview": {
            // "theme": "Andromeda"
        },
        // Settings overrides to use when using Zed Nightly.
        // Mostly useful for developers who are managing multiple instances of Zed.
        "nightly": {
            // "theme": "Andromeda"
        },
        // Settings overrides to use when using Zed Stable.
        // Mostly useful for developers who are managing multiple instances of Zed.
        "stable": {
            // "theme": "Andromeda"
        },
        // Settings overrides to use when using Zed Dev.
        // Mostly useful for developers who are managing multiple instances of Zed.
        "dev": {
            // "theme": "Andromeda"
        },
        // Task-related settings.
        "task": {
            // Whether to show task status indicator in the status bar. Default: true
            "show_status_indicator": true
        },
        // Whether to show full labels in line indicator or short ones
        //
        // Values:
        //   - `short`: "2 s, 15 l, 32 c"
        //   - `long`: "2 selections, 15 lines, 32 characters"
        // Default: long
        "line_indicator_format": "long",
        // Set a proxy to use. The proxy protocol is specified by the URI scheme.
        //
        // Supported URI scheme: `http`, `https`, `socks4`, `socks4a`, `socks5`,
        // `socks5h`. `http` will be used when no scheme is specified.
        //
        // By default no proxy will be used, or Zed will try get proxy settings from
        // environment variables.
        //
        // Examples:
        //   - "proxy": "socks5h://localhost:10808"
        //   - "proxy": "http://127.0.0.1:10809"
        "proxy": null,
        // Set to configure aliases for the command palette.
        // When typing a query which is a key of this object, the value will be used instead.
        //
        // Examples:
        // {
        //   "W": "workspace::Save"
        // }
        "command_aliases": {},
        // ssh_connections is an array of ssh connections.
        // By default this setting is null, which disables the direct ssh connection support.
        // You can configure these from `project: Open Remote` in the command palette.
        // Zed's ssh support will pull configuration from your ~/.ssh too.
        // Examples:
        // [
        //   {
        //     "host": "example-box",
        //     "projects": [
        //       {
        //         "paths": ["/home/user/code/zed"]
        //       }
        //     ]
        //   }
        // ]
        "ssh_connections": null,
        // Configures the Context Server Protocol binaries
        //
        // Examples:
        // {
        //   "id": "server-1",
        //   "executable": "/path",
        //   "args": ['arg1", "args2"]
        // }
        "experimental.context_servers": {
            "servers": []
        }
    }
